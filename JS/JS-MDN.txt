Tutoraials -
	
A) Complete beginners
	1) JavaScript basics -
	* JavaScript is a programming language that adds interactivity to your website
	
	
	2) JavaScript first steps
	3) JavaScript building blocks
	4) Introducing JavaScript objects

B) JS Guide
  	Grammar and types
	Control flow and error handling
	Loops and iteration
	Functions
	Expressions and operators
	Numbers and dates
	Text formatting
	Regular expressions
	Indexed collections
	Keyed collections
	Working with objects
	Using classes
	Using promises
	JavaScript typed arrays
	Iterators and generators
	Meta programming
	JavaScript modules
C) Intermediate	
	1) Client-side JavaScript frameworks
	2) Client-side web APIs
	3) Language overview
	4) JavaScript data structures
	5) Equality comparisons and sameness
	6) Enumerability and ownership of properties
	7) Closures -
		* a closure gives you access to an outer function's scope from an inner function 
	

D) Advanced
	1) Inheritance and the prototype chain
		* In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one.
		* JavaScript implements inheritance by using objects
		* Each object has an internal link to another object called its prototype.
		* That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype
	 Inheritance with the prototype chain
	* Inheriting Properties - 
		* The [[Prototype]] internal slot can be accessed and modified with the Object.getPrototypeOf() and Object.setPrototypeOf() functions respectively. This is equivalent to the JavaScript accessor __proto__ which is non-standard but de-facto implemented by many JavaScript engines.
		* const o = {
			  a: 1,
			  b: 2,
			  // __proto__ sets the [[Prototype]]. It's specified here
			  // as another object literal.
			  __proto__: {
			    b: 3,
			    c: 4,
			  },
			};
		// Thus, the full prototype chain looks like:
		// { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> Object.prototype ---> null
		
		* console.log(o.b); // 2
		// Is there a 'b' own property on o? Yes, and its value is 2.
		// The prototype also has a 'b' property, but it's not visited.
		// This is called Property Shadowing

		* console.log(o.d); // undefined
		// no property found, return undefined.

	* Inheriting "methods" -
		* In JavaScript, any function can be added to an object in the form of a property. An inherited function acts just as any other property, including property shadowing as shown above (in this case, a form of method overriding).
		* When an inherited function is executed, the value of this points to the inheriting object, not to the prototype object where the function is an own property

	* Constructors -
		* The power of prototypes is that we can reuse a set of properties if they should be present on every instance — especially for methods
		* const boxPrototype = {
		  getValue() {
		    return this.value;
		  },
		};
		
		const boxes = [
		  { value: 1, __proto__: boxPrototype },
		  { value: 2, __proto__: boxPrototype },
		  { value: 3, __proto__: boxPrototype },
		];
		* so for creating object with prototype, we can use function constructor
	
	* using classes -
		class Box {
		  constructor(value) {
		    this.value = value;
		  }
		
		  // Methods are created on Box.prototype
		  getValue() {
		    return this;
		  } 
		   getc = () => {return this}   // Methods are created on Object created by " new Box(5) "
		}


	* Implicit constructors of literals
		* // Object literals (without the `__proto__` key) automatically
		// have `Object.prototype` as their `[[Prototype]]`
		const object = { a: 1 };
		Object.getPrototypeOf(object) === Object.prototype; // true
		
		// Array literals automatically have `Array.prototype` as their `[[Prototype]]`
		const array = [1, 2, 3];
		Object.getPrototypeOf(array) === Array.prototype; // true
		
		// RegExp literals automatically have `RegExp.prototype` as their `[[Prototype]]`
		const regexp = /abc/;
		Object.getPrototypeOf(regexp) === RegExp.prototype; // true


		* Number.prototype + 1; // 1
		Array.prototype.map((x) => x + 1); // []
		String.prototype + "a"; // "a"
		RegExp.prototype.source; // "(?:)"
		Function.prototype(); // Function.prototype is a no-op function by itself

	* Inspecting prototypes: a deeper dive
		* function doSomething() {}
		console.log(doSomething.prototype);
		// It does not matter how you declare the function; a
		// function in JavaScript will always have a default
		// prototype property — with one exception: an arrow
		// function doesn't have a default prototype property:
		const doSomethingFromArrowFunction = () => {};
		console.log(doSomethingFromArrowFunction.prototype);


	* Different ways of creating and mutating prototype chains -
		* Objects created with syntax constructs -
		* need to learn 


	2) Memory Management
		* JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection)
		* The main concept that garbage collection algorithms rely on is the concept of reference.
		* Regardless of the programming language, the memory life cycle is pretty much always the same:
			1. Allocate the memory you need
			2. Use the allocated memory (read, write)
			3. Release the allocated memory when it is not needed anymore
			The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.
		* Some high-level languages, such as JavaScript, utilize a form of automatic memory management known as garbage collection (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it.
		* Mark-and-sweep algorithm - This algorithm reduces the definition of "an object is no longer needed" to "an object is unreachable". In this algorithm, all objects get marked which has referenced with variables. After this, it delete all unmarked objects.
		* Although JavaScript does not directly expose the garbage collector API, the language offers several data structures that indirectly observe garbage collection and can be used to manage memory usage.

		* need to learn 
			about WeakMaps and WeakSets, WeakRefs and FinalizationRegistry ......
	
	3) Concurrency model and Event Loop - 
		* JavaScript has a runtime model based on an event loop.
		* Here, we saw how event loop works. It's same as tony described. There's image which show how event loop works
		* In that image, they mention heap, stack, and queue
		* Heap - Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.
		* Stack - Here, we add execution context on each other
		* queue (Event Queue) - where async operations are added here.
		* In Event loop, sometime async operations have to wait more than given time bcz it might have already opeartions in queue
		* A very interesting property of the event loop model is that JavaScript, unlike a lot of other languages, never blocks.
------------------
References:

A) Built-in objects -
	1) AggregateError -
    		* The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.

	    constructor -
	      * AggregateError() - Creates a new AggregateError object.
	
	    Instance properties
	      * AggregateError.prototype.message - Error message. Inherited from Error.
	
	      * AggregateError.prototype.name - Error name. Inherited from Error.
	
	      * AggregateError.prototype.cause - Error cause. Inherited from Error.
	
	      * AggregateError.prototype.errors -
	      An array that essentially reflects the iterable with which the AggregateError was instantiated; for example, if the AggregateError was created using the AggregateError() constructor, an array produced from whatever iterable was passed to the constructor as its first argument.

	2) Array
	3) ArrayBuffer
	4) AsyncFunction
	5) AsyncGenerator
	6) AsyncGeneratorFunction
	7) AsyncIterator
	8) Atomics
	9) BigInt
	10) BigInt64Array
	11) BigUint64Array
	12) Boolean
	13) DataView
	14) Date
	15) decodeURI()
	16) decodeURIComponent()
	17) encodeURI()
	18) encodeURIComponent()
	19) Error
	20) escape() Deprecated
	21) eval()
	22) EvalError
	23) FinalizationRegistry
	24) Float32Array
	25) Float64Array
	26) Function
	27) Generator
	28) GeneratorFunction
	29) globalThis
	30) Infinity
	31) Int16Array
	32) Int32Array
	33) Int8Array
	34) InternalErrorNon-standard
	35) Intl
	36) isFinite()
	37) isNaN()
	38) Iterator
	39) JSON
	40) Map
	41) Math
	42) NaN
	43) Number
	44) Object
	45) parseFloat()
	46) parseInt()
	47) Promise
	48) Proxy
	49) RangeError
	50) ReferenceError
	51) Reflect
	52) RegExp
	53) Set
	54) SharedArrayBuffer
	55) String
	56) Symbol
	57) SyntaxError
	58) TypedArray
	59) TypeError
	60) Uint16Array
	61) Uint32Array
	62) Uint8Array
	63) Uint8ClampedArray
	64) undefined
	65) unescape()Deprecated
	66) URIError
	67) WeakMap
	68) WeakRef
	69) WeakSet



B) Expressions & operators
	1) Addition (+) -
		* The addition (+) operator produces the sum of numeric operands or string concatenation.
		* ex. console.log(2 + 3)
		* The + operator is overloaded for two distinct operations: numeric addition and string concatenation. When evaluating, it first coerces both operands to primitives. Then, the two operands' types are tested:-
			1) If one side is a string, the other operand is also converted to a string and they are concatenated.
			2) If they are both BigInts, BigInt addition is performed. If one side is a BigInt but the other is not, a TypeError is thrown.
			3) Otherwise, both sides are converted to numbers, and numeric addition is performed.
				// Number addition
				1 + 2; // 3 		// Number + Number -> addition
				true + 1; // 2		// Boolean + Number -> addition	
				false + false; // 0	// Boolean + Boolean -> addition

				// BigInt addition
				1n + 2n; // 3n		// BigInt + BigInt -> addition
				1n + 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions	// BigInt + Number -> throws TypeError
				1n + BigInt(2); // 3n		// To add a BigInt to a non-BigInt, convert either operand
				Number(1n) + 2; // 3

				// String concatenation
				"foo" + "bar"; // "foobar"		// String + String -> concatenation
				5 + "foo"; // "5foo"			// Number + String -> concatenation
				"foo" + false; // "foofalse"		// String + Boolean -> concatenation
				"2" + 2; // "22"			// String + Number -> concatenation

		* String concatenation is often thought to be equivalent with template literals or String.prototype.concat(), but they are not. Addition coerces the expression to a primitive, which calls valueOf() in priority; on the other hand, template literals and concat() coerce the expression to a string, which calls toString() in priority. If the expression has a @@toPrimitive method, string concatenation calls it with "default" as hint, while template literals use "string". This is important for objects that have different string and primitive representations — such as Temporal, whose valueOf() method throws.




	2) Addition assignment (+=) -
		* The addition assignment (+=) operator performs addition (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.
		* x += y is equivalent to x = x + y, except that the expression x is only evaluated once.
		* Own Notes - 
			* operand coerce as per other operand if require
			* value must comes in string, number or NaN. hence coerce other value if both are not same.
			
		ex. 	
		// boolean 
		let boolean1 = true
		// boolean1 += true //2
		// boolean1 += "check"  //"truecheck"
		// boolean1 += 4        //5
		// boolean1 += undefined    //NaN
		// boolean1 += null         //1     // null converts to 0
		// boolean1 + [2,3,5]       //"true2,3,5"
		// boolean1 + []            //"true"
		// boolean1 + {}            //"true[object Object]"
		
		
		// String
		let names = "sumeet";
		// names += true            //"sumeettrue"
		// name += "sddsd"          //'sumeetsddsd'
		// name += 5                //'sumeet5'
		// name += undefined        //"sumeetundefined"
		// name += null             //"sumeetnull"
		// name += [21,34,55]       // 'sumeet21,34,55'
		// name += {}               //'sumeet[object Object]'
		
		
		// number
		let number1 = 5
		// number1  += true         // 6
		// number1  += "check"      // '4check'
		// number1  += 5            // 10
		// number1  += undefined    // NaN
		// number1  += null         // 5
		// number1  += [2,3,4]      // '52,3,4'
		// number1  += {}           // '5[object Object]'
		
		// undefined
		let undefined1;
		// undefined1 += true       // NaN
		// undefined1 += "check"    // 'undefinedcheck'
		// undefined1 += 5          // NaN
		// undefined1  += undefined    // NaN
		// undefined1  += null         // NaN
		// undefined1  += [2,3,4]      // 'undefined2,3,4'
		// undefined1  += {}           // 'undefined[object Object]'
		
		
		// null
		let null1 = null;
		// null1 += true            // 1 
		// null1 += "check"         // 'nullcheck'
		// null1 += 5               // 5
		// null1  += undefined      // NaN
		// null1  += null           // 0
		// null1  += [2,3,4]        // 'null2,3,4'
		// null1  += {}             // error
		
		
		// Array
		let array1 = [2,4];
		// array1 += true            // '2,4true'
		// array1 += "check"         // '2,4check'
		// array1 += 5               // '2,45'
		// array1  += undefined      // '2,4undefined'
		// array1  += null           // '2,4null'
		// array1  += [2,3,4]        // '2,42,3,4'
		// array1  += {}             // '2,4[object Object]'
		
		
		// object
		let object1 = {name:"sumeet"}
		// object1 += true            //  '[object Object]true'
		// object1 += "check"         //  '[object Object]check'
		// object1 += 5               //  '[object Object]5'
		// object1  += undefined      //  '[object Object]undefined'
		// object1  += null           //  '[object Object]null'
		// object1  += [2,3,4]        //  '[object Object]2,3,4'
		// object1  += {}             //  '[object Object][object Object]'


	3) Assignment (=)
		* The assignment (=) operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.
		* Description - The assignment operator is completely different from the equals (=) sign used as syntactic separators in other locations, which include:
			Initializers of var, let, and const declarations
			Default values of destructuring
			Default parameters
			Initializers of class fields
		* All these places accept an assignment expression on the right-hand side of the =, so if you have multiple equals signs chained together:
			const x = y = 5;	this is equivalent to => 	const x = (y = 5);
		* Which means y must be a pre-existing variable, and x is a newly declared const variable. y is assigned the value 5, and x is initialized with the value of the y = 5 expression, which is also 5. If y is not a pre-existing variable, a global variable y is implicitly created in non-strict mode, or a ReferenceError is thrown in strict mode. To declare two variables within the same declaration, use:


		*  To declare two variables within the same declaration, use:  const x = 5, y = 5;

		* Examples -
			let x = 2;
			x = x + 3
			const x = y = 5;		//x = 5, y = 5
		1) Simple assignment and chaining
			let x = 5;
			let y = 10;
			let z = 25;
			
			x = y; // x is 10
			x = y = z; // x, y and z are all 25
		2) Unqualified identifier assignment - need to understand

		3) Assignment with destructuring
		const result = /(a+)(b+)(c+)/.exec("aaabcc");
			let a = "", b = "", c = "";
			[, a, b, c] = result;
			console.log(a, b, c); // "aaa" "b" "cc"

		

	4) async function expression 
		* The async function keywords can be used to define an async function inside an expression.
		syntax.
			async function (param1, param2,....., paramN) { }	// for anonymous function
			async function name (param1, param2,....., paramN) { }	// for function
		* The main difference between an async function expression and an async function declaration is the function name, which can be omitted in async function expressions to create anonymous functions.
		*  An async function expression can be used as an IIFE (Immediately Invoked Function Expression) which runs as soon as it is defined, allowing you to mimic top-level await.
			
		* example -
		function resolveAfter2Seconds(x) {
		  return new Promise((resolve) => {
		    setTimeout(() => {
		      resolve(x);
		    }, 2000);
		  });
		}
		
		// async function expression assigned to a variable
		const add = async function (x) {
		  const a = await resolveAfter2Seconds(20);
		  const b = await resolveAfter2Seconds(30);
		  return x + a + b;
		};
		
		add(10).then((v) => {
		  console.log(v); // prints 60 after 4 seconds.
		});
		
		// async function expression used as an IIFE
		(async function (x) {
		  const p1 = resolveAfter2Seconds(20);
		  const p2 = resolveAfter2Seconds(30);
		  return x + (await p1) + (await p2);
		})(10).then((v) => {
		  console.log(v); // prints 60 after 2 seconds.
		});



	5) async function* expression
		* The async function* keywords can be used to define an async generator function inside an expression.
		need to understand



	6) await
		* The await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.
		* await is usually used to unwrap promises by passing a Promise as the expression. Using await pauses the execution of its surrounding async function until the promise is settled.
		* the await expression never blocks the main thread and only defers execution of code that actually depends on the result, i.e. anything after the await expression.
		need to understand

	7) Bitwise AND (&) -
		* The bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.
		ex. 
			const a = 5; // 00000000000000000000000000000101
			const b = 3; // 00000000000000000000000000000011
			
			console.log(a & b); // 00000000000000000000000000000001
			// Expected output: 1


	8) Bitwise AND assignment (&=)
		* The bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.
		ex.
			let a = 5; // 00000000000000000000000000000101
			a &= 3; // 00000000000000000000000000000011
			
			console.log(a); // 00000000000000000000000000000001
			// Expected output: 1
		* x &= y is equivalent to x = x & y, except that the expression x is only evaluated once.
		* Description -
			* The & operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt AND if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise AND. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.
			* The operator operates on the operands' bit representations in two's complement. Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.
			




	9) Bitwise NOT (~)
		* The bitwise NOT (~) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bit of the operand is 0, and a 0 otherwise.
		ex. 
			const a = 5; // 00000000000000000000000000000101
			const b = -3; // 11111111111111111111111111111101
			
			console.log(~a); // 11111111111111111111111111111010
			// Expected output: -6
			
			console.log(~b); // 00000000000000000000000000000010
			// Expected output: 2


	10) Bitwise OR (|)
		* The bitwise OR (|) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.
		ex.
			const a = 5; // 00000000000000000000000000000101
			const b = 3; // 00000000000000000000000000000011
			
			console.log(a | b); // 00000000000000000000000000000111
			// Expected output: 7
		ex. 
			// 9  (00000000000000000000000000001001)
			// 14 (00000000000000000000000000001110)
			
			14 | 9;		// 15 (00000000000000000000000000001111)
			
			14n | 9n; 	// 15n


	11) Bitwise OR assignment (|=)
		* The bitwise OR assignment (|=) operator performs bitwise OR on the two operands and assigns the result to the left operand.
		ex.
			let a = 5; // 00000000000000000000000000000101
			a |= 3; // 00000000000000000000000000000011
			
			console.log(a); // 00000000000000000000000000000111
			// Expected output: 7


	12) Bitwise XOR (^)
		* The bitwise XOR (^) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.
		ex.	
			const a = 5; // 00000000000000000000000000000101
			const b = 3; // 00000000000000000000000000000011
			
			console.log(a ^ b); // 00000000000000000000000000000110
			// Expected output: 6


	13) Bitwise XOR assignment (^=)
		* The bitwise XOR assignment (^=) operator performs bitwise XOR on the two operands and assigns the result to the left operand.
		ex.
			let a = 5; // 00000000000000000000000000000101
			a ^= 3; // 00000000000000000000000000000011
			
			console.log(a); // 00000000000000000000000000000110
			// Expected output: 6


	14) class expression
		* The class keyword can be used to define a class inside an expression.
		* The main difference between a class expression and a class declaration is the class name, which can be omitted in class expressions to create anonymous classes.
		* A simple class expression -
		const rec = class {
		  constructor(h, w){
		    this.h = h;
		    this.w = w;
		  }
		  area(){
		    return this.h * this.w
		  }
		}
		console.log(new Rectangle(5, 8).area());
		// Expected output: 40

		* Named class expressions - If you want to refer to the current class inside the class body, you can create a named class expression. The name is only visible within the scope of the class expression itself.
		const Foo = class NamedFoo {
			constructor(){}
		}


 
	15) Comma operator (,) -
		* The comma (,) operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a for loop's afterthought.
		* Syntax - One or more expressions, the last of which is returned as the value of the compound expression.

		* need to understand

	16) Conditional (ternary) operator -
		* syntax.	condition ? exprIfTrue : exprIfFalse
		* Besides false, possible falsy expressions are: null, NaN, 0, the empty string (""), and undefined. If condition is any of these, the result of the conditional expression will be the result of executing the expression exprIfFalse.
		* Conditional chains - 
			 function example() {
				  return condition1 ? value1
				    : condition2 ? value2
				    : condition3 ? value3
				    : value4;
				}

	17) Decrement (--)
		* The decrement (--) operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.
		ex.
			let x = 3;
			const y = x--;
			console.log(`x:${x}, y:${y}`);
			// Expected output: "x:2, y:3"
			
			let a = 3;
			const b = --a;
			console.log(`a:${a}, b:${b}`);
			// Expected output: "a:2, b:2"


	18) delete
		* The delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.
		ex.
			const Employee = {
			  firstname: 'Maria',
			  lastname: 'Sanchez',
			};
			
			console.log(Employee.firstname); 	// Expected output: "Maria"
			delete Employee.firstname;
			console.log(Employee.firstname);	// Expected output: undefined
		* need to understand 

	19) Destructuring assignment
		* The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.
		ex.	
			let a, b, rest;
			[a, b] = [10, 20];
			console.log(a);		// Expected output: 10
			console.log(b);		// Expected output: 20
			[a, b, ...rest] = [10, 20, 30, 40, 50];
			console.log(rest);	// Expected output: Array [30, 40, 50]
		* syntax -
			const [a, b] = array;
			const [a, , b] = array;
			const [a = aDefault, b] = array;
			const [a, b, ...rest] = array;
			const [a, , b, ...rest] = array;
			const [a, b, ...{ pop, push }] = array;
			const [a, b, ...[c, d]] = array;
			
			const { a, b } = obj;
			const { a: a1, b: b1 } = obj;
			const { a: a1 = aDefault, b = bDefault } = obj;
			const { a, b, ...rest } = obj;
			const { a: a1, b: b1, ...rest } = obj;
			const { [key]: a } = obj;
			
			let a, b, a1, b1, c, d, rest, pop, push;
			[a, b] = array;
			[a, , b] = array;
			[a = aDefault, b] = array;
			[a, b, ...rest] = array;
			[a, , b, ...rest] = array;
			[a, b, ...{ pop, push }] = array;
			[a, b, ...[c, d]] = array;
			
			({ a, b } = obj); // parentheses are required
			({ a: a1, b: b1 } = obj);
			({ a: a1 = aDefault, b = bDefault } = obj);
			({ a, b, ...rest } = obj);
			({ a: a1, b: b1, ...rest } = obj);

		* Binding and assignment - 
			* In binding patterns, the pattern starts with a declaration keyword (var, let, or const). Then, each individual property must either be bound to a variable or further destructured.
				ex. const obj = { a: 1, b: { c: 2 } };
				const {  a, b: { c: d }, } = obj;	// Two variables are bound: `a` and `d`
	
			* All variables share the same declaration, so if you want some variables to be re-assignable but others to be read-only, you may have to destructure twice — once with let, once with const.
				ex. const obj = { a: 1, b: { c: 2 } };
				const { a } = obj; // a is constant
				let {  b: { c: d }, } = obj; // d is re-assignable
			* In assignment patterns, the pattern does not start with a keyword. Each destructured property is assigned to a target of assignment — which may either be declared beforehand with var or let, or is a property of another object — in general, anything that can appear on the left-hand side of an assignment expression.
				ex. const numbers = [];
				const obj = { a: 1, b: 2 };
				({ a: numbers[0], b: numbers[1] } = obj);
				// The properties `a` and `b` are assigned to properties of `numbers`
			* Note: 
				* The parentheses ( ... ) around the assignment statement are required when using object literal destructuring assignment without a declaration.
				* { a, b } = { a: 1, b: 2 } is not valid stand-alone syntax, as the { a, b } on the left-hand side is considered a block and not an object literal according to the rules of expression statements. However, ({ a, b } = { a: 1, b: 2 }) is valid, as is const { a, b } = { a: 1, b: 2 }.
				* If your coding style does not include trailing semicolons, the ( ... ) expression needs to be preceded by a semicolon, or it may be used to execute a function on the previous line.
		
		* Default value -
			* Each destructured property can have a default value. The default value is used when the property is not present, or has value undefined. It is not used if the property has value null.
			* ex. 	const [a = 1] = []; // a is 1
				const { b = 2 } = { b: undefined }; // b is 2
				const { c = 2 } = { c: null }; // c is null
			* The default value can be any expression. It will only be evaluated when necessary.
			* ex.	const { b = console.log("hey") } = { b: 2 };	// Does not log anything, because `b` is defined and there's no need to evaluate the default value.
		
		* Rest property  - You can end a destructuring pattern with a rest property ...rest. This pattern will store all remaining properties of the object or array into a new object or array.
			* ex. 	const { a, ...others } = { a: 1, b: 2, c: 3 };
				console.log(others); // { b: 2, c: 3 }
				const [first, ...others2] = [1, 2, 3];
				console.log(others2); // [2, 3]
		* Examples - take help from official docs

	20) Division (/) -
		* The division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.
		* ex.	console.log(12 / 2);	// Expected output: 6
			console.log(3 / 2);	// Expected output: 1.5
			console.log(6 / '3');	// Expected output: 2			
			console.log(2 / 0);	// Expected output: Infinity
		* The / operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt division if both operands become BigInts; otherwise, it performs number division. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.
		For BigInt division, the result is the quotient of the two operands truncated towards zero, and the remainder is discarded. A RangeError is thrown if the divisor y is 0n. This is because number division by zero returns Infinity or -Infinity, but BigInt has no concept of infinity.
		* ex.
			1 / 2; // 0.5
			Math.floor(3 / 2); // 1
			1.0 / 2.0; // 0.5
			
			1n / 2n; // 0n
			5n / 3n; // 1n
			-1n / 3n; // 0n
			1n / -3n; // 0n
			
			2n / 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions
			
			// To do division with a BigInt and a non-BigInt, convert either operand
			2n / BigInt(2); // 1n
			Number(2n) / 2; // 1


	21) Division assignment (/=)
		* The division assignment (/=) operator performs division on the two operands and assigns the result to the left operand.
		* ex. 	let a = 3;
			a /= 2;
			console.log(a);			// Expected output: 1.5
			a /= 0;
			console.log(a);			// Expected output: Infinity
			a /= 'hello';
			console.log(a);			// Expected output: NaN
		* x /= y is equivalent to x = x / y, except that the expression x is only evaluated once.


	22) Equality (==) 
		* The equality (==) operator checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.
		*ex. 	console.log(1 == 1);		// Expected output: true
			console.log('hello' == 'hello');	// Expected output: true
			console.log('1' == 1);		// Expected output: true
			console.log(0 == false);	// Expected output: true
		* The equality operators (== and !=) provide the IsLooselyEqual semantic. This can be roughly summarized as follows:
		* need to understand


	23) Exponentiation (**) 
		* The exponentiation (**) operator returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow(), except it also accepts BigInts as operands.
		* ex.	console.log(3 ** 4);			// Expected output: 81
			console.log(10 ** -2);			// Expected output: 0.01
			console.log(2 ** (3 ** 2));		// Expected output: 512
			console.log((2 ** 3) ** 2);		// Expected output: 64


	24) Exponentiation assignment (**=) -
		* The exponentiation assignment (**=) operator performs exponentiation on the two operands and assigns the result to the left operand.
		* x **= y is equivalent to x = x ** y, except that the expression x is only evaluated once.
		* ex.
						let a = 3;
						a **= 2;		// 9


	25) function expression -
		* The function keyword can be used to define a function inside an expression.
		* ex.
					const getArea = function(name){ console.log(name, this, arguments);}

		* The main difference between a function expression and a function declaration is the function name, which can be omitted in function expressions to create anonymous functions. A function expression can be used as an IIFE (Immediately Invoked Function Expression) which runs as soon as it is defined.
		* Function expressions in JavaScript are not hoisted, unlike function declarations. You can't use function expressions before you create them.
		* Named function expression - by providing a name for a function expression, it becomes a Named Function Expression.
		* ex.			
							const math = {
									factIt: function factorial(n){
												console.log(n);
												if(n <= 1){
													return 1;
												}
												return n * factorial(n - 1);
									}
							}
							math.factIt(3);
		* Using function expression - The following example defines an "unnamed function" and assigns it to x. The function returns the square of its argument:
				const x = function (y) {
						return y * y;
				}
			


	26) function* expression
	27) Greater than (>) -
		* The greater than (>) operator returns true if the left operand is greater than the right operand, and false otherwise.
		* ex. console.log( 5 > 3 );		// true
		* x > y is generally equivalent to y < x, except that x > y coerces x to a primitive before y, while y < x coerces y to a primitive before x. Because coercion may have side effects, the order of the operands may matter.
		* String to string comparison -
				"a" > "b"; // false
				"a" > "a"; // false
				"a" > "3"; // true
		* String to Number comparison -
				"5" > 3; // true
				"3" > 3; // false
				"3" > 5; // false
				
				"hello" > 5; // false
				5 > "hello"; // false
				
				"5" > 3n; // true
				"3" > 5n; // false
		* Number to number comparison -
				5 > 3; // true
				3 > 3; // false
				3 > 5; // false
		* Number to BigInt comparison -
				5n > 3; // true
				3 > 5n; // false
		* Comparing Boolean, null, undefined, NaN -
				true > false; // true
				false > true; // false
				
				true > 0; // true
				true > 1; // false
				
				null > 0; // false
				1 > null; // true
				
				undefined > 3; // false
				3 > undefined; // false
				
				3 > NaN; // false
				NaN > 3; // false



	28) Greater than or equal (>=) -
		* The greater than or equal (>=) operator returns true if the left operand is greater than or equal to the right operand, and false otherwise.
		* ex. console.log(5 >= 3);	// true
		* need to understand in depth


	29) Grouping operator ( ) -
		* The grouping ( ) operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.
		* need to understand in depth



	30) import.meta
	31) import() -
		* The import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.


	32) in -
		* The in operator returns true if the specified property is in the specified object or its prototype chain.
		* The in operator cannot be used to search for values in other collections. To test if a certain value exists in an array, use Array.prototype.includes(). For sets, use Set.prototype.has().
		* const car = { make: 'Honda', model: 'Accord', year: 1998 };
			console.log('make' in car);		// true
		* syntax - 
					prop in object
					#prop in object
		* Description -
			* If you want to check for only non-inherited properties, use Object.hasOwn() instead.
		* ex.
			// Arrays
			const trees = ["redwood", "bay", "cedar", "oak", "maple"];
			0 in trees; // returns true
			3 in trees; // returns true
			6 in trees; // returns false
			"bay" in trees; // returns false (you must specify the index number, not the value at that index)
			"length" in trees; // returns true (length is an Array property)
			Symbol.iterator in trees; // returns true
			
			// Predefined objects
			"PI" in Math; // returns true
			
			// Custom objects
			const mycar = { make: "Honda", model: "Accord", year: 1998 };
			"make" in mycar; // returns true
			"model" in mycar; // returns true

			const color1 = new String("green");
			"length" in color1; // returns true
			
			const color2 = "coral";			// generates an error (color2 is not a String object)
			"length" in color2;

		* Using the in operator with deleted or undefined properties -
			const mycar = { make: "Honda", model: "Accord", year: 1998 };
			delete mycar.make;
			"make" in mycar; // returns false
			
			const trees = ["redwood", "bay", "cedar", "oak", "maple"];
			delete trees[3];
			3 in trees; // returns false
		  If you set a property to undefined but do not delete it, the in operator returns true for that property.

		* need to look at more example




	33) Increment (++) -
		* The increment (++) operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.
		* 


	34) Inequality (!=)
	35) instanceof
	36) Left shift (<<)
	37) Left shift assignment (<<=)
	38) Less than (<)
	39) Less than or equal (<=)
	40) Logical AND (&&)
	41) Logical AND assignment (&&=)
	42) Logical NOT (!)
	43) Logical OR (||)
	44) Logical OR assignment (||=)
	45) Multiplication (*)
	46) Multiplication assignment (*=)
	47) new
	48) new.target
	49) null
	50) Nullish coalescing assignment (??=)
	51) Nullish coalescing operator (??)
	52) Object initializer
	53) Operator precedence
	54) Optional chaining (?.)
	55) Property accessors
	56) Remainder (%)
	57) Remainder assignment (%=)
	58) Right shift (>>)
	59) Right shift assignment (>>=)
	60) Spread syntax (...)
	61) Strict equality (===)
	62) Strict inequality (!==)
	63) Subtraction (-)
	64) Subtraction assignment (-=)
	65) super
	66) this
	67) typeof
	68) Unary negation (-)
	69) Unary plus (+)
	70) Unsigned right shift (>>>)
	71) Unsigned right shift assignment (>>>=)
	72) void operator
	73) yield
	74) yield*

C) Statements & declarations
	1) async function - 
		The await keyword is permitted within the function body, enabling asynchronous, promise-based behaviour to be written in a cleaner style and avoiding the need to configure promise chains explicitly.
		* eg.
			function waitForData () {
			    return new Promise((res, rej) => {
			        setTimeout(() => {
			            res(10)
			        }, 3000)
			    })
			}
			console.log("before call");
			async function testAsyncFun(){
			    try {
			        console.log("line1");
			        const data = await waitForData();
			        console.log("line2", data);
			    } catch(e){
			        console.log("error", e)
			    }
			}
			testAsyncFun()
			console.log("outside line call");
		* In the above example, output like below -
			before call
			line1
			outside line call
			line2 10
		* Here, await help to stop execution till "waitForData" returns something and starts working on other code synchronously. once done with synchronous code, then moves to the "waitForData" function which is in microtask queues. 
		* Async functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they're synchronous by suspending execution until the returned promise is fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.
		* In situations like following - promise.all or promise.allSettled, don't use async await. 



	2) async function*
	3) block
	3) break
	4) class
	5) const
	6) continue
	7) debugger
	8) do...while
	9) empty
	
	10) Export
	* export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement.
	* When a module updates the value of a binding that it exports, the update will be visible in its imported value.
	* two types of exports: 
		Named Exports (Zero or more exports per module),
		Default Exports (One per module)
	* Syntax -
		// Exporting individual features
		export let name1, name2, …, nameN; // also var, const
		export let name1 = …, name2 = …, …, nameN; // also var, const
		export function functionName(){...}
		export class ClassName {...}

		// Export list
		export { name1, name2, …, nameN };

		// Renaming exports
		export { variable1 as name1, variable2 as name2, …, nameN };

		// Exporting destructured assignments with renaming
		export const { name1, name2: bar } = o;

		// Default exports
		export default expression;
		export default function (…) { … } // also class, function*
		export default function name1(…) { … } // also class, function*
		export { name1 as default, … };

		// Aggregating modules
		export * from …; // does not set the default export
		export * as name1 from …; // ECMAScript® 2O20
		export { name1, name2, …, nameN } from …;
		export { import1 as name1, import2 as name2, …, nameN } from …;
		export { default, … } from …;

	* default export can be imported with any name. eg. import m from './test';
	* rename named exports to avoid naming conflicts. eg. export { myFunction as function1, myVariable as variable };
	* one can create a single module concentrating various exports from various modules.
		export { default as function1, function2 } from 'bar.js';
	* 


	* Description -
	11) Expression Statement
	11) for
	12) for await...of
	13) for...in
	14) for...of
	14) for
	15) function*
	16) function declaration
	17) if...else
	18) import.meta
	19) import
	20) label
	21) let
	22) return
	23) switch
	24) throw
	25) try...catch
	26) var
	27) while
	28) with


D) Regular Expressions 
	1) Backreference: \1, \2
	2) Capturing group: (...)
	3) Character class escape: \d, \D, \w, \W, \s, \S
	4) Character class: [...], [^...]
	5) Character escape: \n, \u{...}
	6) Disjunction: |
	7) Input boundary assertion: ^, $
	8) Literal character: a, b
	9) Lookahead assertion: (?=...), (?!...)
	10) Lookbehind assertion: (?<=...), (?<!...)
	11) Named backreference: \k<name>
	12) Named capturing group: (?<name>...)
	13) Non-capturing group: (?:...)
	14) Quantifier: *, +, ?, {n}, {n,}, {n,m}
	15) Unicode character class escape: \p{...}, \P{...}
	16) Wildcard: .
	17) Word boundary assertion: \b, \B


Reference Links -
* https://codedamn.com/news/programming/comprehensive-guide-javascript-event-loop ( Event Queue / Loop, microtask, async await)  


Points need to be done to improve interview -
async await
promise
prototype and its chain
class
call, apply, bind
object.create and object.assign
methods of array, object, string, number
date
event propagation
recursion
symbol
Iterators and generators
Map, set, 




