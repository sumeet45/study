
4) Block Scoping: why?
* Block Scoping: Variable scope is defined lexically by a block. In Js, curly braces.
* Block scoping added to es6, to reduce bugs

5) Block statements and Lexical Enviornments -
* In creation of execution context, we will get following - "window, this, reference to outer variable enviornment, variable enviornment, lexical enviornment and code".
* In code, if there's block using curl braces, it will create separate lexical environments in execution contexts.
* If we declare variable in that block using var keyword, then it will store it in variable enviorment

6) let -
* ex. let myVar = 1;
      if(true) {
        console.log(myVar);  //will print 1.
        if(true){
        }
      }
* In above example, it will create 3 lexical enviornments, one above another. Our console statement is in  2nd lexical enviorment. when it won't be able to find variable in that lexical enviornment, it moves to outer lexical enviornment to look for myVar. Hence, we were able to print 1. Here, we also have reference to outer lexical enviorment for each lexical enviorment.
* if(true) {
        console.log(myVar);  // give error.
        if(true){
        let myVar = 1;        
        }
      }
* In above example, engine won't be able to find in same lexical enviorment and above one too. hence it gives error.
* If we declare variable with let, we won't be able to log using "window.myVar". 
      let myVar = true
      console.log(myVar);      //true
      console.log(windw.myVar)      // undefined
      Bcz "myVar" is store it in lexical enviornment not in variable enviorment.
* redeclaring variable using var keyword is allow in JS, but not with let.
* {} will declare block scope
* ex. let myVar = 1;
      {
            console.log(myVar);           // 1. bcz of reference of outer lexical enviornment
      }
* ex. let myVar = 1;
      {
            let myVar = 2;
            console.log(myVar);      // 2. in same scope, myVar declared with 2
      }
* ex. let myVar = 1;
      {
            let myVar = 2;
            console.log(myVar);      //2
      }
      console.log(myVar);            //1
* ex. let myVar = 1;
      {
            console.log(myVar);      // give error.  initialization required with or without value before using let variable
            let myVar = 2;
      }
      console.log(myVar);            //1
* curly braces with code is required for block scope. In switch statement and object literal method, it won't create extra lexical enviornment.
* double declaration of let variable in switch statement create error. If we add block within case, it will create another lexical enviornment.
* ex. let person = {
      firstName: ["s", "s2"]
}
for(let person of person.firstName){
      console.log(person);      //error. bcz person actually pointing to same variable which we declare in for loop, not the one which we declare with let before
}
* let person of person.firstName - is actually within block, not outside
*  ex. let person = {
            firstName: ["s", "s2"]
      }
      let person2 = person;
      for(let person of person2.firstName){
            console.log(person);      // s, s2
      }
* ex. let person = {
            firstName: ["s", "s2"]
      }
      for(person of person.firstName){
            console.log(person);      // s, s2
      }
      console.log(person);      //s2. eventually we update person object


7) Conceptual Aside: Bindings -
* Binding - connection (pointer) between a variable name and a specific location in computer's memory that holds the value.

8) Const -
* When variable is declare with const, binding is immutable.
* ex. const myVar = 1;
      {
            const myVar = 2;
            console.log(myVar);      //2
      }
      console.log(myVar);            //1
works same like let.
* ex. const myVar = 1;
      myVar = 2;                 // error
      console.log(myVar);
* In above example, assignment operator is trying connection between existing name and new memory location and const won't allow this.
* ex. 
      let me = {
            fname: "s", lname: "s2"
      }
      me.fname = "sss"
      console.log(me.fname);      //sss
Here, we are looking for memory location of fname. for that, it will check for object memory location using binding and from there it will find memory location of fname. once we got location, we can update the values of fname.
* but if we try to update the value of actual object, it will give error. Bcz we try to change binding and binding is immutable for const.


9) Templates: Why -
* It is cumbersome to write with old-fashioned methods.

10) Conceptual Aside: Whitespace Characters -
* 

11) Multi-line Strings -
* It's pretty easy to write multiline strings in template literal.
* let a = `sumeet
shedge`
* whitespaces are actually invisible characters, just remember it.


12) Interpolation -
* Interpolation - Replacing portions of strings with other strings. You "insert" or "inject" strings into another string.
* Tagged Template Literals -  
function greet(strings, firstName, lastName){
      console.log(strings);  //array ["Hello, ", " ", ""]
      console.log(firstName);  //"Tony"
      console.log(lastName);  //"Alicea"
}
const firstName = "Tony"
const lastName = "Alicea"
const greeting = greet`Hello, ${firstName} ${lastName}`


13) Classes -
* classes are another way to create objects in JS
* JS have prototyped based languages, hence class in JS works differently as compared to other language classes.

14) Conceptual Aside: Classes -
* A structure in a programming language that provides a way to create objects 
* In other languages, classes are able to create new types and objects too. In Js, only create objects and prototype chain.
* Syntactic sugar - A different way of accomplish something in a programming language, that doesn't actually introduce anything new under-the-hood.

15) Declarations and Expressions -
* classes in JS are actually just functions.
* ex. 
class Person {}      // this is declaration much like function declaration
* ex.
let p = class {}      //anonymous class assigned to variable "p"
typeof(p);      //function
* when you create a class, you're creating a function object.
* Parser add a special value to the function object ( isClassConstructor = true ). It will mark the function object as a class constructor. this property is hidden under the hood.

* ex. 
function logClass(c){
      console.log(c);
}
logClass(p);
logClass(class {

})
* even we observe call, apply, bind in class.
let p = class {}
p.bind      // available
* so it's clear that creating class is really just creating functions


16) Conceptual Aside: Instances -
* Instances - the actual object created from an object creation feature (like a class)
* we created this object using object creation feature. so its now an instance of that object creation feature. using a class or other creation method, we can create various instances, various separate objects with same structure.

17) Public Instances Fields -
* public - Directly accessible to both code written inside the object (methods) and code written outside the project.
* field - this is more generic name. A property created using the field syntax. Fields may or may not be accessible outside the object.
* for most part, field and property are almost interchangable names. Field is bit more generic and can be both public or not public
* ex. 
class Person {
      firstName = "Sumeet"
}
var me = new Person()
console.log(me);      //{ firstName: "sumeet" }
Person();      // will give error with following - class can't invoke without new keyword

* ex.
var me = new Person();
var me2 = new Person();
me2.firstName = "Anthony";
console.log(me);      // { firstName: "Tony" }
console.log(me2);      // { firstName: "Anthony"}
* above example shows, objects created using class, is completely different two objects.



18) Constructor -
* using constructor, we can create objects with given values.
* within constructor, we can set value to fields
* ex. 
class Person{
      firstName = "Tony"      // default value
      constructor(name){
            this.firstName = name
      }
}
* there is always a constructor function even if we don't create one. class without constructor will create empty object.
* prototype chain in class - It's actually same like function constructor.

ex.
class Person{
      firstName;      // default value
      constructor(name){
            this.firstName = name
      }
}
let me = new Person("Tony")
let me2 = new Person("Anthony")
console.log(me);
console.log(me2);

console.log(me.__proto__)
console.log(Person.prototype)
console.log(me.__proto__ === Person.prototype);      // true. it shows that class prototype is not prototype for class but for object which created from that class.
console.log(me2.__proto__ === Person.prototype);      // true


19) Methods -
* ex.
class Person{
      firstName;      // default value
      constructor(name){
            this.firstName = name
      }

      //greet method added within prototype
      greet(){
            return `hi ${this.firstName}`
      }
}
let me = new Person("Tony")
let me2 = new Person("Anthony")
console.log(me);
console.log(me2);
me.greet();
me2.greet();


20) extends and Prototypal inheritance -
* extends helps to implement prototypal inheritance.
* ex.
class Person{
      firstName;
      constructor(name){
            this.firstName = name
      }
      greet(){
            return `hi ${this.firstName}`
      }
}
class Tony extends Person {
      meet(){
            return `nice to meet you`
      }
}
let me = new Tony("Tony");
console.log(me.greet());      //Hi Tony
console.log(me2.meet());      //nice to meet you
console.log(me.__proto__);
console.log(me.__proto__ === Tony.prototype)
console.log(me.__proto__.__proto__)
console.log(Tony.prototype.__proto__ === Person.prototype)


* you can extends a function constructor or built in types also.
* ex.
class myNum extends Number {
      addOne(){
            return `this is addone`
      }
}
var a = new myNum(22.00222);
console.log(a.toFixed(1));
console.log(a.addOne());


21) super -
* in derived class, we must call "super" in constructor. If we don't specify constructor in it, then it will arrange by itself.
class Person{
      firstName;
      constructor(name){
            this.firstName = name
      }
      greet(){
            return `hi ${this.firstName}`
      }
}
class Tony extends Person {
      constructor(name){
            super(name)
      }
      meet(){
            return `nice to meet you`
      }
      greet(){      
            let greeting = super.greet();      // will call greet from Person class
            return "${greeting} Hi:"
      }
}
let me = new Tony("Tony");
console.log(me.greet());      //"hi Tony Hi:". will call greet from Tony class and inside method, will call Person class method


22) Public static fields -
* suppose, we don't want any field or method belongs to dervied object, then we can declare with static keyword. It stick to class only.
* 
class Person {
      static name = "XYX"
      static checkMsg(){
            console.log("ssdsdsds")
      }
}
Person.name      //XYX
Person.checkMsg()      //ssdsdsds
* In method, if there's no reference of any field or method of class which is not static, then it should declare static.


23) Private Fields with Getters and Setters -
* putting "#" infront of property will make it private.
class Person {
      #fname;
      #lname;
      constructor(fname, lname){
            this.#fname = fname;
            this.#lname = lname;
      }
      get fname(){
            return this.#fname;
      }
      set fname(fn){
            this.#fname = fn;
      }
      greet(){
            return `Hello, ${this.#fname}`
      }
}
let me = new Person("Tony", "Alicea")
console.log(me.greet())
me.fname = "Anthony"
me.greet()      //Hello, Anthony
me.fname      //Anthony


24) Private methods -
* adding "#" in front of method, we can convert it to private methods.
class Person {
      #greet(){
            return `this is speical one`
      }
}
let c = new Person();
c.#greet()      //error 


25) Arrow functions: why?
* 

26) Conceptual Aside: Arrow Functions and Mathematics -
* Here, we are seeing link between Arrow functions and mathematics

27) Syntax and parsing -
* talking about Arrow function syntax
* arrow functions are anonymous, so we are talking about arrow function expressions not declarations


28) Arrow functions and this -
* let me = {
      fname: "Tony",
      greet: function(){
            let self = this;
            let logMe = function(){
                  console.log(self);      //me object
            }
            logMe()
      },
      greet2: function(){
            console.log(this);      //me object
            let logMe = () => {
                  console.log(this);      //me object
            }
      }
}
* whenever arrow function executed, it create execution context but without "this" value. hence, using scope chain it looks in parent execution context for this value.


29) Returning values -
* let a = (a, v) => a + v;      // without render and curly braces
* let b = c => c * c;            //remove unnecessary parenthesis


30) Limitations and readability -
* ex. 
let longExpression = x => y => z => z? x:y
let longExpression2 = function(x) {
      return function(y){
            return function(z){
                  return z ? x: y
            }
      }
}
let res1 = longExpression("Tony")("Anthony")(true);      //tony
let res2 = longExpression("Tony")("Anthony")(false);      //anthony
let res1 = longExpression2("Tony")("Anthony")(true);      //tony

* from above functions, arrow function are hard to read. But it delivers the same with compact code.

* arrow function don't have own this value in their execution context, so they look in outer scope till GEC.
* let obj = {
      firstName: "Tony",
      greet: function(){
            console.log(this.firstName);      //Tony
            console.log(this);                 //obj
      },
      greet2: () => {
            console.log(this.firstName);      //undefined
            console.log(this);                  //window object
      }
}
* arrow function expression are not great to be used as object methods
class Person {
      constructor(fname){
            this.fname = fname;
            this.greet = () => {
                  console.log(this.fname);
            }
      }
}
let na = new Person("tony")
na.greet();      //tony


31) Symbols -
* symbol is primitive type
* sometimes, we can override earlier methods in JS. symbol helps to resolve this issue.

32) Using symbols -
* symbol is a fundamental type of thing in the JS engine.
* symbol is primitive type, just like boolean, number.

const grt = Symbol("greet");

* Hash code - a value generated from another value. The same value is always generated for the same input.
* hash codes are unique.
* some JS engine choose to use the address of the memory location in which the symbol is stored as the value for the symbol.
* every time we give, let's say one, two, three, I would always get out A, B, C.

* const greet = Symbol("Hello");      // here, "Hello" is a reference point for the symbol. this is not the value of symbol. we can call it "description"


* const grt = Symbol("greet");      // created new, random and unique value and store it in grt
const grt2 = Symbol("greet");      // created new value and store it in grt2
const fname = Symbol("fname");

console.log(grt === grt2);      // false, bcz everytime it has unique value

* ex.
      const grt = Symbol("greet");            // this will generate unique value, and we can use it as name of field in class, object
      const fname = Symbol("fname");

      class Person {
            [fname] = "Tony";                  // [fname] is to avoid collisions
            [grt] (){
                  return `Hi ${this.fname}`;
            }
      }
      let tony = new Person();
      const fname2 = Symbol("fname");
      tony[fname2] = "Anthony";
      tony.__proto__.greet = function(){
            return "Hello ${this[fname]}`;
      }

      console.log(tony[grt]());
      console.log(tony.greet());

      let me = {
            [fname]: "Anthony"
      }
      console.log(me[fname]);

* Magic strings - These are strings that have a special meaning or usage in your program. This makes your program fragile, and easily susceptible to bugs.

// global symbols
      const HAIR_STRAIGHT = Symbol.for("straight");            //Symbol.for register into the Global symbol registry
      const HAIR_WAVY = Symbol.for("wavy");
      const HAIR_CURLY = Symbol.for("Curly");

      let curly = Symbol.for("Curly");      //returns same value, which we got while using Symbol.for("Curly"). bcz its in global registry
      console.log(curly === HAIR_CURLY);

      console.log(Symbol.keyFor(HAIR_CURLY));

* use it symbol whenever required.



33) Well known Symbols -
* Symbols already built into the JS engine, used by the engine for certain tasks
* there already multiples are available


34) Iterators and Iterables -
* JS didn't gives us ways to create new types of things ourselves that work similarly to those other objects in ES6 and beyond.

35) Conceptual Aside: Iteration -
* Iteration - repeating a block of code, often by moving through a list or sequence of values.
* shows example of for loop with array 

36) for ..of and for..in
* enumberable - a property which will appear when looping over the properties of an object (it's "enumberable" flag is set to true). The term comes from mathematics , where it means "countable"
      let names = ["tony", "Anthony", "alicea"];
      for(const name of names){
            console.log(name)      // "tony", "Anthony", "alicea"            // values
      }
      for(const name in names){
            console.log(name)      // 0, 1, 2            // keys
      }

* lets check with class object properties are enumerable or not
      // with class
      class Animal {
            name = "Dog";
            static residence = "Earth";
      }
      class Dog extends Animal {
            sound = "bark";
            makeSound(){
                  console.log(this.sound);
            }
      }
      let dog = new Dog();
      for(const prop in dog){
            console.log(prop);      // name, sound      // here, makesound is not enumerable property
      }

      // with object literal
      let dog2 = {
            sound: "bark",
            makesound: function(){
                  console.log("bark");
            }
      }
      dog2.__proto__ = {
            residence: "Earth"
      }
      for(const prop in dog2){
            console.log(prop);      // sound, makesound, residence
      }

      console.log(dog.propertyIsEnumerable("sound"));            // true

      // 
      for(const prop of dog){
            console.log(prop);            // will return error - dog is not iterable
      }
* lets see, what is iterable

37) Iterators -
* Iterators - a object who follows iteration protocol
* Protocol - Rules for how to exchange information
* Iteration Protocol - The information that must be provided by an object to let itself be iterated over.
* Iterate over - To move from value to value across a set or list of values
* Purpose of an iterator is to allow JS engine to loop over the object.


38) Iterables and Symbol.iterator -
* Iterable - An Object that has the expected function which returns an iterator

40) Default Parameters: why?
* default parameter is new addition to es6. 

41) Default Parameters (Part 1) -
* as long as the value of the parameter is undefined, the default value will be used instead.
* ex.
function greet(fname = "Tony", lname = "Alicea"){
      return `Hi ${fname} ${lname}`
}
let grt1 = greet();      // Hi Tony Alicea
let grt2 = greet("Anthony");      //Hi Anthony Alicea
let grt3 = greet(null, "P. alicea");      //Hi null P. alicea
let grt4 = greet(undefined, "P. alicea");      //Hi Tony P. alicea

42) Default Parameters (Part 2) -
* ex.
function greet(fname = "Tony", lname = "Alicea", phrase = () => `Hi ${fname} ${lname}` ){
      return phrase()
}
let grt1 = greet();      //Hi Tony Alicea

function greet2(fname = "Tony",  phrase = () => `Hi ${fname} ${lname}` , lname = "Alicea"){
      return phrase()
}
let grt2 = greet2();      //Hi Tony Alicea

function greet3(fname = "Tony",  phrase = `Hi ${fname} ${lname}` , lname = "Alicea"){
      return phrase()
}
let grt3 = greet3();      //error - bcz lname is not set till now.
* 
