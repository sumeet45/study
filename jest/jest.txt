uses
.mock, .fn, and .requireActual
Globals -
Expect -
    Modifiers
    Matchers
    Asymmetric Matchers
    Assertion Count
Mock Functions
    use in expect or beforethat 
The Jest Object
    Mock Modules
    Mock Functions
    Fake Timers
    Misc
----------------------------------------
maximillian video (youtube) =

* Why Testing - when we update any changes in code, does it affect our application by using Automated Testing.

* Why Test? (advantages) = get an error if you break code, save time, Think about possible issues and bugs, integrate into build workflow, break up complex dependancies, improves code

*Test are of 3 types = 
1) Fully Isloated (testing 1 function),
2) Unit Tests (testing a function that calls a function),
3) E2E test(Full Flow or part application test, feature)

* we need test runner, assertions library, Headless browser to test code.
* Test runner - execute tests, summarize results. e.g. mocha
* assertions library - Defining test logic, expected outcome to compare with conditions. eg. chai
* Jest is great replacement for mocha and chai.


Jest use cases -
1) Unit Testing: Testing individual functions or components to ensure they work as expected
test('adds 1 + 2 to equal 3', () => {
    expect(1 + 2).toBe(3);
});

2) Snapshot Testing: Testing the output of React components to ensure the UI does not change unexpectedly.
test('renders correctly', () => {
    const tree = renderer.create(<MyComponent />).toJSON();
    expect(tree).toMatchSnapshot();
});

3) Integration Testing: Testing how different modules or components work together in a larger system
test('submits data correctly', async () => {
    const data = { name: 'John Doe' };
    axios.post.mockResolvedValue({ data: 'Success' });

    await act(async () => {
        fireEvent.click(submitButton);
    });

    expect(axios.post).toHaveBeenCalledWith('/submit', data);
});

4) Mocking: Testing code that depends on external modules, APIs, or services by replacing them with mock functions
jest.mock('axios');
test('fetches data from API', async () => {
    axios.get.mockResolvedValue({ data: { title: 'Hello World' } });
    const result = await fetchData();
    expect(result.title).toBe('Hello World');
});

5) Async Code Testing: Testing functions that involve asynchronous operations, such as promises, async/await, or timers.
test('async function works correctly', async () => {
    const data = await fetchData();
    expect(data).toEqual({ userId: 1, id: 1, title: 'Test Title' });
});


6) Testing with Coverage: Measuring the amount of your codebase that is covered by tests
jest --coverage

7) Testing DOM Manipulation: Testing how your code interacts with the DOM, particularly in frontend applications
test('button click updates the count', () => {
    const { getByText } = render(<Counter />);
    const button = getByText('Increment');
    fireEvent.click(button);
    expect(getByText('Count: 1')).toBeInTheDocument();
});






------------------------------------------------------
Jest Coverage link - https://medium.com/steve-cruz/awesome-jest-tip-coverage-report-6f1e303ef07


1) Using Matchers -
  * Common Matchers -
    * toBe uses Object.is to test exact equality. If you want to check the value of an object, use toEqual. 
    * toEqual recursively checks every field of an object or array.
    * ex. test('two plus two is four', () => {
             expect(2 + 2).toBe(4);
           });
      ex. test('object assignment', () => {
          const data = {one: 1};
          data['two'] = 2;
          expect(data).toEqual({one: 1, two: 2});
        });

  * Truthiness - In tests, you sometimes need to distinguish between undefined, null, and false, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.
     toBeNull matches only null
     toBeUndefined matches only undefined
     toBeDefined is the opposite of toBeUndefined
     toBeTruthy matches anything that an if statement treats as true
     toBeFalsy matches anything that an if statement treats as false

  * Numbers -
    test('two plus two', () => {
      const value = 2 + 2;
      expect(value).toBeGreaterThan(3);
      expect(value).toBeGreaterThanOrEqual(3.5);
      expect(value).toBeLessThan(5);
      expect(value).toBeLessThanOrEqual(4.5);
    
      // toBe and toEqual are equivalent for numbers
      expect(value).toBe(4);
      expect(value).toEqual(4);
    });

  * Strings -
    test('there is no I in team', () => {
      expect('team').not.toMatch(/I/);
    });
    
    test('but there is a "stop" in Christoph', () => {
      expect('Christoph').toMatch(/stop/);
    });

  * Arrays and iterables -
    * const shoppingList = ['diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];
      test('the shopping list has milk on it', () => {
        expect(shoppingList).toContain('milk');
        expect(new Set(shoppingList)).toContain('milk');
      });

  * Exceptions -
      function compileAndroidCode() {
        throw new Error('you are using the wrong JDK!');
      }
      
      test('compiling android goes as expected', () => {
        expect(() => compileAndroidCode()).toThrow();
        expect(() => compileAndroidCode()).toThrow(Error);
      
        // You can also use a string that must be contained in the error message or a regexp
        expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');
        expect(() => compileAndroidCode()).toThrow(/JDK/);
      
        // Or you can match an exact error message using a regexp like below
        expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails
        expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass
      });


2) Testing Asynchronous Code -
   * Promises -
     test('the data is peanut butter', () => {
        return fetchData().then(data => {
          expect(data).toBe('peanut butter');
        });
      });

   * Async/Await -
     test('the data is peanut butter', async () => {
       const data = await fetchData();
       expect(data).toBe('peanut butter');
     });
     
     test('the fetch fails with an error', async () => {
       expect.assertions(1);
       try {
         await fetchData();
       } catch (error) {
         expect(error).toMatch('error');
       }
     });

     test('the data is peanut butter', async () => {
       await expect(fetchData()).resolves.toBe('peanut butter');
     });
     
     test('the fetch fails with an error', async () => {
       await expect(fetchData()).rejects.toMatch('error');
     });

    * Callbacks -
      test('the data is peanut butter', done => {
         function callback(error, data) {
           if (error) {
             done(error);
             return;
           }
           try {
             expect(data).toBe('peanut butter');
             done();
           } catch (error) {
             done(error);
           }
         }
       
         fetchData(callback);
       });

     * .resolves / .rejects -
        test('the data is peanut butter', () => {
          return expect(fetchData()).resolves.toBe('peanut butter');
        });
        test('the fetch fails with an error', () => {
          return expect(fetchData()).rejects.toMatch('error');
        });

3) Setup and Teardown -
   * Repeating Setup -
     beforeEach(() => {
       initializeCityDatabase();
     });
     
     afterEach(() => {
       clearCityDatabase();
     });

     * beforeEach and afterEach can handle asynchronous code in the same ways that tests can handle asynchronous code - they can either take a done parameter or return a promise. For example, if initializeCityDatabase() returned a promise that resolved when the database was initialized, we would want to return that promise:
         beforeEach(() => {
          return initializeCityDatabase();
        });

   * One-Time Setup -
      beforeAll(() => {
        return initializeCityDatabase();
      });
      
      afterAll(() => {
        return clearCityDatabase();
      });

   * Scoping -  The hooks declared inside a describe block apply only to the tests within that describe block.
       describe('matching cities to foods', () => {
          // Applies only to tests in this describe block
          beforeEach(() => {
            return initializeFoodDatabase();
          });
          test('Vienna <3 veal', () => {
            expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
          });
        });

    * Order of Execution -
        beforeEach(() => console.log('connection setup'));
        beforeEach(() => console.log('database setup'));
        
        afterEach(() => console.log('database teardown'));
        afterEach(() => console.log('connection teardown'));
        
        test('test 1', () => console.log('test 1'));
        
        describe('extra', () => {
          beforeEach(() => console.log('extra database setup'));
          afterEach(() => console.log('extra database teardown'));
        
          test('test 2', () => console.log('test 2'));
        });
        
        // connection setup
        // database setup
        // test 1
        // database teardown
        // connection teardown
        
        // connection setup
        // database setup
        // extra database setup
        // test 2
        // extra database teardown
        // database teardown
        // connection teardown

    * General Advice -


4) Mock Functions -
  * Using a mock function -
      * when we mock function, we will get object within mock property of mock function. All mock functions have this special .mock property, which is where data about how the function has been called and what the function returned is kept. 
      ex. const mockCallback = jest.fn(x => 42 + x);
           forEachs([0,1], mockCall);
          console.log(mockCall.mock);    
          /*-- {
            calls: [ [ 0 ], [ 1 ] ],
            instances: [ undefined, undefined ],
            invocationCallOrder: [ 1, 2 ],
            results: [ { type: 'return', value: 42 }, { type: 'return', value: 43 } ]
          } --*/
          expect(mockCall.mock.calls).toHaveLength(2);

    * Mock Return Values -
        const myMock = jest.fn();
        console.log(myMock());        // > undefined
        myMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);
        console.log(myMock(), myMock(), myMock(), myMock());        // > 10, 'x', true, true

    * Mocking Modules -
        * ex. import axios from 'axios';
              class Users {
                static all() {
                  return axios.get('/users.json').then(resp => resp.data);
                }
              }
              export default Users;
        * we can use the jest.mock(...) function to automatically mock the axios module.
          ex.     import axios from 'axios';
                  import Users from './users';
                  jest.mock('axios');
                  test('should fetch users', () => {
                    const users = [{name: 'Bob'}];
                    const resp = {data: users};
                    axios.get.mockResolvedValue(resp);
                    // or you could use the following depending on your use case:
                    // axios.get.mockImplementation(() => Promise.resolve(resp))
                    return Users.all().then(data => expect(data).toEqual(users));
                  });

    * Mocking Partials -
        ex. export const foo = 'foo';
            export const bar = () => 'bar';
            export default () => 'baz';

        //test.js
        import defaultExport, {bar, foo} from '../foo-bar-baz';        
        jest.mock('../foo-bar-baz', () => {
          const originalModule = jest.requireActual('../foo-bar-baz');        
          //Mock the default export and named export 'foo'
          return {
            __esModule: true,
            ...originalModule,
            default: jest.fn(() => 'mocked baz'),
            foo: 'mocked foo',
          };
        });
        
        test('should do a partial mock', () => {
          const defaultExportResult = defaultExport();
          expect(defaultExportResult).toBe('mocked baz');
          expect(defaultExport).toHaveBeenCalled();        
          expect(foo).toBe('mocked foo');
          expect(bar()).toBe('bar');
        });

    * Mock Implementations -
        * it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with jest.fn or the mockImplementationOnce method on mock functions.
          const myMockFn = jest.fn(cb => cb(null, true));
          myMockFn((err, val) => console.log(val));          // > true
        * The mockImplementation method is useful when you need to define the default implementation of a mock function that is created from another module.
          //foo.js
          module.exports = function () {
            // some implementation;
          };

          //test.js
          jest.mock('../foo'); // this happens automatically with automocking
          const foo = require('../foo');          
          foo.mockImplementation(() => 42);           // foo is a mock function
          foo();          // > 42

        * When you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the mockImplementationOnce method:
          const myMockFn = jest.fn().mockImplementationOnce(cb => cb(null, true)).mockImplementationOnce(cb => cb(null, false));
         
          myMockFn((err, val) => console.log(val));         // > true
          myMockFn((err, val) => console.log(val));         // > false
        * When the mocked function runs out of implementations defined with mockImplementationOnce, it will execute the default implementation set with jest.fn (if it is defined).
        * For cases where we have methods that are typically chained (and thus always need to return this), we have a sugary API to simplify this in the form of a .mockReturnThis() function that also sits on all mocks.    
          const myObj = {
            myMethod: jest.fn().mockReturnThis(),
          };          
          // is the same as
          const otherObj = {
            myMethod: jest.fn(function () {
              return this;
            }),
          };

     * Mock Names - You can optionally provide a name for your mock functions, which will be displayed instead of 'jest.fn()' in the test error output. Use .mockName() if you want to be able to quickly identify the mock function reporting an error in your test output.
           const myMockFn = jest.fn().mockReturnValue('default').mockImplementation(scalar => 42 + scalar).mockName('add42');



GUIDES -
1) Snapshot Testing
   * 

2) An Async Example -
   * 

3)

4) Manual Mocks -
   * Mocking user modules -
     * to mock a module called user in the models directory, create a file called user.js and put it in the models/__mocks__ directory.
     * The __mocks__ folder is case-sensitive, so naming the directory __MOCKS__ will break on some systems.
     * When we require that module in our tests (meaning we want to use the manual mock instead of the real implementation), explicitly calling jest.mock('./moduleName') is required.

   * Mocking Node modules -
     * If the module you are mocking is a Node module (e.g.: lodash), the mock should be placed in the __mocks__ directory adjacent to node_modules (unless you configured roots to point to a folder other than the project root) and will be automatically mocked. There's no need to explicitly call jest.mock('module_name').
     * Scoped modules (also known as scoped packages) can be mocked by creating a file in a directory structure that matches the name of the scoped module. For example, to mock a scoped module called @scope/project-name, create a file at __mocks__/@scope/project-name.js, creating the @scope/ directory accordingly.
     * If we want to mock Node's built-in modules (e.g.: fs or path), then explicitly calling e.g. jest.mock('path') is required, because built-in modules are not mocked by default.

