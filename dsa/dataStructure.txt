
// https://www.youtube.com/watch?v=RBSGKlAvoiM&ab_channel=freeCodeCamp.org

* abstract data type
  * ADT is an abstraction of a data structure which provides only the interface to which data structure must adhere to.
  * ADT only defines how a DS should behave, and methods should have. but not details implementation.

* complexity analysis -
  * time and space -  how much required?

* big o tells about worst case

* Big O notation - (7:27)
  from small to large order -
  0(1)  -constant time
  0(log (n)) - logarithmic time
  0(n) - Linear time
  0(nlog(n)) - 
  0(n^2)
  0(n^3)
  0(b^n), b > 1
  0(n!)

  * we remove constant values from big o notation


  * Static and Dynamic arrays -
    * Static Array = 
      * static arrays is fixed length container containing n elements indexable from the range [0, n-1]
      * static arrays are given as contiguous (next to each other) chunks of memory. 
      * what is indexable? - each slot/ index in the array can be referenced with a number.
      * when and where is static array used? -
            1) Storing and accessing sequential data, 
            2) temporarily storing objects
            3) used by IO routines as buffers
            4) lookup tables and inverse lookup tables
            and many more places.
    * table
            static arr       dynamic arr
access        0(1)            0(1)
search        0(n)            0(n)
Insertion     N/A             0(n)
Appending     N/A             0(1)
Deletion      N/A             0(n)

    * array start indexing with 0.
    * 

  * Operations on Dynamic Arrays -
    * to create dynamic array using static array - create static array with 2 elements place and add all 2 numbers in it. once u want to add 3rd element, just create one more array with 3 space for elements and copy all elements from older array and add new numbers in the end.
   * shows array with push, pop, shift, unshift operations method implementation

2) What is Linked List -
  * is a sequential list of nodes that hold data which point to other nodes also containing data.
  * uses -
      * used in many List, queue, and stack implementation,
      * Great for creating circular lists
      * can easily model real world objects such as trains
      * used in separate chaining, which is present certain Hashtable implementations to deal with hashing collections
      * often used in the implementation of adjacency lists for graphs.

* Terminology -
  * Head - The first node in linked list
  * tail - The last node in linked list
  * Pointer - Reference to another node
  * Node - An Object containing data and pointers

             pointer        Node
   [3] -> [33] -> [35] -> [65] -> [2] -> [3] -> [30]
   head                                         Tail

* Singly vs Doubly Linked list -
  * Singly linked list only hold a reference to the next node. In the implementation, you always maintain a reference to the head to the linked list and a reference to the tail node for quick additions /  removals
  * Doubly linked list each node holds a reference to the next and previous node. In the implementation, you always maintain a reference to the head and the tail of the doubly linked list to do quick additions/ removals from both ends of your list.

* Pros and cons of linked list-
                 Pros                       Cons
Singly linked    Uses less memory           Cannot easily acces previous elements
Doubly linked    can be traversed back      Takes 2x memory

*** Check operations for lists

* Complexity -
                        Singly linked        Doubly linked
Search                     O(n)                O(n)
Insert at head             O(1)                O(1)
Insert at tail             O(1)                O(1)
Remove at head             O(1)                O(1)
Remove at tail             O(n)                O(1)
Remove in middle           O(n)                O(n)


*** Check github code for doubly linked list



3) Stack -
* stack - is a one-ended linear data structure which models a real world stack by having two primary operations, namely push and pop.
* stack based on LIFO.
* where used -
   * in text editors for undo and redo
   * used in compiler syntax checking for matching brackets and braces.
   * to show pile of books or plates
   * used behind the scenes to support recursion by keeping track of previous func calls.
   * used to do a Depth First Search (DFS) on graph.

* complexity analysis - 
   * pushing   O(1)
   * popping   O(1)
   * peeking   O(1)
   * searching O(n)
   * size      O(1)

* shows example of stack with bracket sequence -
     [[{}]()]

* tower of hanoi -
   [1,2,3,4]   []       []
   
* source code link given for stack DS code


4) Queues -
* A queue is a linear data structure which models real world queues by having two primary operations namely enqueue and dequeue
* queue have front end and back end.
* We can say adding for "enqueue" and removing from "dequeue"
* enqueue - adding from back end, dequeue - removing from front end

* quick example shown for queue 
* Use of queue -
   * waiting line model of queue
   * can be used to efficiently keep track of the most x recently added elements
   * web server request management where you wait first come first serve
   * breadth first search graph traversal

* complexity analysis 
   enqueue  O(1)
   dequeue  O(1)
   peeking  O(1)
   Contains O(n)
   Remove   O(n)
   isEmpty  O(1)

*** queue implementation -
* queue done by array, singly and doubly linked lists
* Yes, a queue is a first-in-first-out (FIFO) data structure, meaning that the first item added to the queue is the first to be removed. 


5) Priority Queues -
* Priority queue is abstract data type (ADT) that operates similar to a normal queue except that each element has a certain priority. The priority of the elements in the priority queue determine the order in which elements are removed from the PQ.
* Priority queues only supporters comparable data, meaning the data inserted into the priority queue must be able to ordered in some way either from least to greatest or greatest to least. This is so that we are able to assign relative priorities to each element.






---------------------------------------------------------------------------------------------------
https://youtu.be/2o2vX0ZqQ_Y?feature=shared

* computer science is about solving problems by designing algorithms that can be converted into efficient programs. The key challenge is optimizing for time and money.
* in recent time, we mostly focused on time, than memory.
* To write efficient program, you need both - DS ( organize of data )and Algorithm ( process to solve the problem using organize data )
* DS - is a particular way of organizing data in a computer memory, so that memory can be used effectively both in terms of time and space. It is logical relationship existing between individual elements of data, it considers elements stored and also their relationship to each other. Data structure mainly specifies following four things -
        organization of data, accessing methods, degree of association, Processing methods.

* Impact of DS on Programs -
  * if data is historical, then there's less chance of deletion, addition, or updating, so we should go for array DS
  * if daily operations like add, delete are there, then should go for linked list

  * DS affects both structural and functional aspects of Program. The choice of data structure plays a crucial role in program design and efficiency.
  * specialized DS for Diff applications -
        Relational DB - use B-tree indexes for efficient data retrieval
        Compiler implementation - commonly rely on hash tables for fast identifier lookups

  * DS and Algo Efficiency - efficient ds are essential to designing efficient algorithm. In some programming paradigm, DS are emphasized over algorithms as the primary organizing factor in the software design.
  * Implementing DS - typically involves creating set of procedures to instantiate and manipulate the structure, ensuring efficient use and access.


* Primitive and Non-primitive DS -
  Primitive -
  * char, int, float, double
  * predefined by system and are directly operated upon by machine instructions.

  Non-Primitive -
  * primitive DS are insufficient, we use derived and user-defined DS.
  * Derived DS - 
       * are built using primitive DS. They are provided by the system but their structure is more complex.
       * ex. arrays
  * User defined DS - 
      * created by the user using primitive and derived types, with custom structures and operations
      * linked list, Trees, Stack, 


* linear and non-linear DS -
   
   * LINEAR DATA STRUCTURE
      * In a linear data structure, data elements are arranged in a linear order where each and every element are attached to its previous and next adjacent.
      * In linear data structure, single level is involved.
      * Its implementation is easy in comparison to non- linear data structure.
      * In linear data structure, data elements can be traversed in a single run only.
      * Its examples are: array, stack, queue, linked list, etc.
   * NON-LINEAR DATA STRUCTURE
      * In a non-linear data structure, data elements are attached in hierarchical manner.
      * Whereas in non-linear data structure, multiple levels are involved.
      * While its implementation is complex in comparison to linear data structure.
      * While in non-linear data structure, data elements
      * can't be traversed in a single run only.
      * While its examples are: trees and graphs.

* Homogeneous vs. Heterogeneous Data Structures
Homogeneous Data: These data structures store elements of the same type, such as integers or floats. A common example is an array, where all elements share the same data type.
Heterogeneous Data: These data structures can hold elements of different types. For example, a data structure may store integers, floats, and characters together. Examples include structures and unions.

* Array -
 * An array is a data structure that stores collection of elements of same type stored at contiguous memory locations and can be accessed using an index.
 * indexing starts with 0.
 * var arr1 = [2,3,4,5];
34:47
