
// https://www.youtube.com/watch?v=RBSGKlAvoiM&ab_channel=freeCodeCamp.org

* abstract data type
  * ADT is an abstraction of a data structure which provides only the interface to which data structure must adhere to.
  * ADT only defines how a DS should behave, and methods should have. but not details implementation.

* complexity analysis -
  * time and space -  how much required?

* big o tells about worst case

* Big O notation - (7:27)
  from small to large order -
  0(1)  -constant time
  0(log (n)) - logarithmic time
  0(n) - Linear time
  0(nlog(n)) - 
  0(n^2)
  0(n^3)
  0(b^n), b > 1
  0(n!)

  * we remove constant values from big o notation


  * Static and Dynamic arrays -
    * Static Array = 
      * static arrays is fixed length container containing n elements indexable from the range [0, n-1]
      * static arrays are given as contiguous (next to each other) chunks of memory. 
      * what is indexable? - each slot/ index in the array can be referenced with a number.
      * when and where is static array used? -
            1) Storing and accessing sequential data, 
            2) temporarily storing objects
            3) used by IO routines as buffers
            4) lookup tables and inverse lookup tables
            and many more places.
    * table
            static arr       dynamic arr
access        0(1)            0(1)
search        0(n)            0(n)
Insertion     N/A             0(n)
Appending     N/A             0(1)
Deletion      N/A             0(n)

    * array start indexing with 0.
    * 

  * Operations on Dynamic Arrays -
    * to create dynamic array using static array - create static array with 2 elements place and add all 2 numbers in it. once u want to add 3rd element, just create one more array with 3 space for elements and copy all elements from older array and add new numbers in the end.
   * shows array with push, pop, shift, unshift operations method implementation

2) What is Linked List -
  * is a sequential list of nodes that hold data which point to other nodes also containing data.
  * uses -
      * used in many List, queue, and stack implementation,
      * Great for creating circular lists
      * can easily model real world objects such as trains
      * used in separate chaining, which is present certain Hashtable implementations to deal with hashing collections
      * often used in the implementation of adjacency lists for graphs.

* Terminology -
  * Head - The first node in linked list
  * tail - The last node in linked list
  * Pointer - Reference to another node
  * Node - An Object containing data and pointers

             pointer        Node
   [3] -> [33] -> [35] -> [65] -> [2] -> [3] -> [30]
   head                                         Tail

* Singly vs Doubly Linked list -
  * Singly linked list only hold a reference to the next node. In the implementation, you always maintain a reference to the head to the linked list and a reference to the tail node for quick additions /  removals
  * Doubly linked list each node holds a reference to the next and previous node. In the implementation, you always maintain a reference to the head and the tail of the doubly linked list to do quick additions/ removals from both ends of your list.

* Pros and cons of linked list-
                 Pros                       Cons
Singly linked    Uses less memory           Cannot easily acces previous elements
Doubly linked    can be traversed back      Takes 2x memory

*** Check operations for lists

* Complexity -
                        Singly linked        Doubly linked
Search                     O(n)                O(n)
Insert at head             O(1)                O(1)
Insert at tail             O(1)                O(1)
Remove at head             O(1)                O(1)
Remove at tail             O(n)                O(1)
Remove in middle           O(n)                O(n)


*** Check github code for doubly linked list



3) Stack -
* stack - is a one-ended linear data structure which models a real world stack by having two primary operations, namely push and pop.
* stack based on LIFO.
* where used -
   * in text editors for undo and redo
   * used in compiler syntax checking for matching brackets and braces.
   * to show pile of books or plates
   * used behind the scenes to support recursion by keeping track of previous func calls.
   * used to do a Depth First Search (DFS) on graph.

* complexity analysis - 
   * pushing   O(1)
   * popping   O(1)
   * peeking   O(1)
   * searching O(n)
   * size      O(1)

* shows example of stack with bracket sequence -
     [[{}]()]

* tower of hanoi -
   [1,2,3,4]   []       []
   
* source code link given for stack DS code


4) Queues -
* A queue is a linear data structure which models real world queues by having two primary operations namely enqueue and dequeue
* queue have front end and back end.
* We can say adding for "enqueue" and removing from "dequeue"
* enqueue - adding from back end, dequeue - removing from front end

* quick example shown for queue 
* Use of queue -
   * waiting line model of queue
   * can be used to efficiently keep track of the most x recently added elements
   * web server request management where you wait first come first serve
   * breadth first search graph traversal

* complexity analysis 
   enqueue  O(1)
   dequeue  O(1)
   peeking  O(1)
   Contains O(n)
   Remove   O(n)
   isEmpty  O(1)

*** queue implementation -
* queue done by array, singly and doubly linked lists
* Yes, a queue is a first-in-first-out (FIFO) data structure, meaning that the first item added to the queue is the first to be removed. 
