
----------------------------------------------------------------------------------------------
Quick Sort -

function quickSort(arr){
  if(arr.length === 1){
    return arr
  }
  var pivot = arr[arr.length - 1];
  var rArr = [], lArr = [];
  for(let i = 0; i < arr.length - 1; i++){
    if(arr[i] < pivot){
      lArr.push(arr[i]);
    } else {
      rArr.push(arr[i]);
    }
  }
  if(rArr.length > 0 && lArr.length > 0){
  	return [...quickSort(lArr), pivot, ...quickSort(rArr)]
  } else if(lArr.length > 0){
 		return [...quickSort(lArr), pivot]
  } else {
  	return [ pivot, ...quickSort(rArr)]
  }
}

let d = quickSort([2,8,6,3,77,94,1,56,75])
console.log(d)

* In quick sort, we decide first pivot point. Then iterate over remaining array. If element found large than pivot element, then places in the right Array. For smaller element, kept in left array. We use recursion in it.

----------------------------------------------------------------------------------------------

merge sort -

function mergeSort(array) {
  if (array.length <= 1) {
    return array;
  }

  const middle = Math.floor(array.length / 2);
  const left = array.slice(0, middle);
  const right = array.slice(middle);

  return merge(mergeSort(left), mergeSort(right));
}

function merge(left, right) {
  let result = [];
  let leftIndex = 0;
  let rightIndex = 0;

  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] < right[rightIndex]) {
      result.push(left[leftIndex]);
      leftIndex++;
    } else {
      result.push(right[rightIndex]);
      rightIndex++;
    }
  }

  // Concatenating the remaining elements
  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}

// Example usage:
const array = [34, 7, 23, 32, 5, 62];
const sortedArray = mergeSort(array);
console.log(sortedArray); // Output: [5, 7, 23, 32, 34, 62]


--------------------------------------------------------------------------------------------------------------------------------------
