4) Practice: Array Basics -

// Online C++ compiler to run C++ program online
#include <iostream>
#include <stdio.h>

int main() {
    // Write C++ code here
    std::cout << "Hello world!";
    // int A[5] = {2,4, 6, 8, 10};
    // int A[] = {2,4, 6, 8, 10};   //size will be determined based on elements
    // A[0] = 10;
    // A[1] = 12;
    // A[2] = 14;
    // latest compilers take 4 byte for integeer, but assume it take 2 byte for understanding DS
    // std::cout << sizeof(A) << std::endl;
    // std::cout << A[1];
    // printf("%d \n", A[2]);
    
    // 2 example
    // int A[10] = {2,4,6,8, 10, 12, 14};
    // std::cout << sizeof(A) << std::endl;
    // std::cout << A[8];       // 0
    // printf("%d \n", A[9]);       // 0
    
    // 3 example
    // int A[10] = {2,4};
    // std::cout << sizeof(A) << std::endl;
    // std::cout << A[2];      // 0
    // printf("%d \n", A[3]);      // 0
    
    // 4 example
    // int A[10] = {0};
    // for(int i = 0; i< 10; i++){
    //     std::cout<<A[i]<<std::endl;         //0,0,0,0,0,0,0,0,0,0
    // }
    
    // 5 example
    // int A[10] = {2,4,6,8,10,12};
    // for(int i=0;i<10; i++){
    //     std::cout<<A[i]<<std::endl;      //2,4,6,8,10,12,0,0,0,0,
    // }
    
    // 6 example
    // int A[10] = {2,4,6,8,10,12};
    // for(int x:A){
    //     std::cout<<x<<std::endl;        //2,4,6,8,10,12,0,0,0,0,
    // }
    
    // 7 example
    int n;
    std::cout<<"Enter size";        //7
    std::cin>>n;
    int A[n];
    A[0] = 2;
    
    for(int x:A){
        std::cout<<x<<std::endl;    //2,32765,0,0,-1612086032,32765,4198876, (filled with garbage values)
    }
    // variable size array don't initialize it
    
    return 0;
}


6) Practice: Structures -
* 
// Online C++ compiler to run C++ program online
#include <iostream>
#include <stdio.h>

// struct Rectangle {
//     int length;
//     int bredth;
// } r1, r2, r3;    // declare variable with type

struct Rectangle {
    int length;
    int bredth;
    char x;
};

int main() {
    struct Rectangle r1 = {10, 5};
    printf("%d", sizeof(r1));  
    // without char x, show 8
    // with char x, shows 12. Bcz 4 bytes allocate to character, but using 1 byte only
    // Char taking 1 byte, it will take nearest bigger size that is integer. this is called padding
    r1.length = 20;
    r1.bredth = 10;
    
    std::cout<<r1.length<<std::endl;    //20
    std::cout<<r1.bredth<<std::endl;    //10
    
    return 0;
}



8) Practice: Pointers -
// Online C++ compiler to run C++ program online
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

struct Rectangle {
    int length;
    int breadth;
};
int main() {
    // ex 1
    // int a = 10;
    // int *p;     //declaration of pointer
    // p = &a;     //address of a stored in p
    // std::cout<<a<<std::endl;
    // printf("using pointer %d", *p);     //dereferencing of pointer //using pointer 10
    
    // printf("using pointer %d %d", p, &a);     //will print address //using pointer 1184723108 1184723108
    
    
    // ex 2
    // whenever array created, its created in stack of that function
    // int A[5] = {2,3,5,6,7};
    // int *p = A;     // when array is giving to pointer, it should be without *
    // p = A;
    // // p = &A;  // invalid, either choose A or A[0]
    
    // for(int i = 0; i < 5; i++){
    //     // std::cout<<A[i]<<std::endl;     //2,3,5,6,7
    //     std::cout<<p[i]<<std::endl;     //2,3,5,6,7
    // }
    
    
    // ex 3
    // int *p;
    // p = (int *)malloc(5*sizeof(int));   //c style
    // // p = new int[5];     //c++ style
    // p[0] = 2, p[1] = 45, p[2] = 56, p[3]= 78, p[4] = 23;
    // for(int i = 0; i < 5; i++){
    //     std::cout<<p[i]<<std::endl; //2,45,56,78,23
    // }
    // // delete [ ] p;   //c++ way, to free memory of heap, once work is done
    // free(p);    //c way, to free memory of heap, once work is done 
    
    //  ex 4
    // here, we can see whichever pointer is created, have size of 8
    int *p1;
    char *c1;
    float *f1;
    double *d1;
    struct Rectangle *r1;
    
    std::cout<<sizeof(p1)<<std::endl;   //8
    std::cout<<sizeof(c1)<<std::endl;   //8
    std::cout<<sizeof(f1)<<std::endl;   //8
    std::cout<<sizeof(d1)<<std::endl;   //8
    std::cout<<sizeof(r1)<<std::endl;   //8
    
    
    return 0;
}


10) Practice: Referrence -
// Online C++ compiler to run C++ program online
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

struct Rectangle {
    int length;
    int breadth;
};
int main() {
    int a = 20;
    int &r = a; // referrence variable, need to initialize when declaring
    std::cout<<a<<std::endl;    //20
    std::cout<<r<<std::endl;    //20
    a = 30;
    std::cout<<a<<std::endl;    //30
    std::cout<<r<<std::endl;    //30
    r = 40;
    std::cout<<a<<std::endl;    //40
    std::cout<<r<<std::endl;    //40
    
    int b = 65;
    r = b;  // when change "r" with value of "b", "a" also changes
    std::cout<<a<<std::endl;    //65
    std::cout<<r<<std::endl;    //65
    std::cout<<b<<std::endl;    //65
    
    
    return 0;
}


12) 
