
2) Introduction -
* Data structures - programm is a set of instructions which performs operations on data. so data is important part of programm. so when a program is dealing with the data, how it will organize the data in the main memory, that's what its data structure. The way you organize the data in the main memory during execution time of programm, that is DS.
* list of DS - 
  Physical DS (how data arrange in memory)=
      Arrays,
      Matrices,
      Linked list
  Logical DS (how data can be utilize) =
      Stack
      Queues
      Trees
      Graph
      Hashing
  Recurssion
  Sortings

* 3 level of programmer -
 beginner - know DS and how they work
 intermediate - how they work in detail and able to do analysis (based on time and space complexities)
 pro - can create own DS

* using c for course


3) Arrays Basics -
* learn c language
* features need to learn - Arrays, Structure, Pointers, Referrence, Parameter Passing, Classes, constructor, template
* array - is a collection of similar data elements. 
  ex. 
int main(){
  int A[5];
}
* when above programmer run,it runs in main memory, which consists code section, stack, and heap. Array will created in stack.
int B[4] = {2, 4, 6, 8, 9}        // declaration : initialization
int i;
for(i = 0; i < 5; i++){
  print(%d, B[i]);
}


4) Practice: Array Basics:
5) Structures:
* DS can be defined as collection of data members under one name
* structure is used for defining user defined data types apart from primitive types.
ex. 
// definition of structure
struct Rectangle {
  int length;    // 2 byte
  int breadth;    // 2 byte
}
// total 4 byte 
* size of structure is the total amount of memory consumed by all its members
* ex.
    main(){
      struct Rectangle r;    //declaration
      struct Rectangle r = {10, 5};    //declaration
      r.length = 15;
      r.breadth = 10;
      printf("Area of Rectangle is %d", r.length * r.breadth)
    }
* r created in stack of memory.

* complex no. -
 struct Complex {
    int read;
    int imginary;
}
// memory used - 4 bytes

2. Students
struct Student {
  int roll,
  char name[25];
  char dept[10];
  char address[50];
}
// memory used by  - 87 bytes
struct Student s1;
s1.roll = 20;
s1.name = "Sumeet"
s1.dept = "IT"
s1.address = "long address"

3. PLaying Cards
struct Card {
  int face;
  int shape;
  int color;
}
main(){
  struct Card c;
  c.face = 1;
  c.shape = 0;
  c.color = 0;
// struct Card c = { 1, 0, 0}    // for single card
// struct Card deck[52];         // for multiple cards - using array of structures // 312 cards
// struct Card deck[52] = { {1,0,0}, {2,0,0} }; 
// printf("%d", deck[0].face);
// printf("%d", deck[0].shape);

}


7) Pointers -
* Pointers is an address variable that is meant for storing address of data. It is used for indirect accessing the data.
* programm can't access heap directly. Programm need pointer to access data from heap. Major usage of pointer to accessing the resources which are outside the programmm.
* usage - accessing in heap, accessing resoures, parameter passing
* using malloc(), we can get memory in heap.

ex. 
// accessing within stack memory
int a = 10;    //variable
int *p;        // pointer variable
p = &a;        // initialization
printf("%d", a);        // 10
printf("%d", *p);      // 10  - this is dereferencing


// access heap memory
int *p;      // takes place in stack. Whichever variable declared, it will be inside stack.
p = (int *)malloc(5 * sizeof(int));      // will allocate 5 integers in heap memory
// p = new int[5];         // for c++, for creating heap memory



9) Referrence -
* nothing before variable name is normal variable, "*" before variable is pointer and "&" before variable is referenece.
int a = 10;
int &r = a;    //must be initialized too, while declaring
cout<<a;    //10
r++;        
cout<<r;    //11
cout<<a;    //11
* reference - another name to variable. useful in parameter passing.


11) Pointer to structure -
* ex.
//Example 1
struct Rectangle r = {10,5};
struct Rectangle *p = &r;

r.length = 15;
(*p).length = 20;
p -> length = 20;


// Example 2
P = (Struct Rectangle *) malloc(sizeof(struct Rectangle));
P -> length = 10;
P -> breadth = 10;


13) Functions -
* whole code in 1 function, called Monolithic programming
* whole code divides in multiple functions, called Modular or Procedural programming.
int add(int a, int c){
  return a + b
}


15) Parameter passing methods -
* pass by value or call by value - use when any changes are done to formal parameters will not reflect in actual parameters.
void swap(int x, int y){
  int temp;
  temp = x;
  x = y;
  y = temp;
}
int main(){
  int a = 10, b= 20;
  swap(a,b);
  printf(" %d %d", a,b);
}


* pass by address or call by address - use when any changes are done to formal parameters will reflect in actual parameters. using pointer
void swap(int *x, int *y){
  int temp;
  temp = *x;
  *x = *y;
  *y = temp;
}
int main(){
  int a = 10, b= 20;
  swap(&a, &b);
  printf(" %d %d", a,b);
}


* pass by referrence - will update formal and actual parameters are updated. here, swap is not separate function, it's actually part of main function.
void swap(int &x, int &y){
  int temp;
  temp = x;
  x = y;
  y = temp;
}
int main(){
  int a = 10, b= 20;
  swap(a,b);
  printf(" %d %d", a,b);
}

* more common, call by value and address.



17) Array as Parameter -
* Arrays cannont be passed by value at all, only by address.
* Ex.
void fun(int A[], int B){
  for(int i = 0; i < n; i++){
    printf(" %d ", A[i]);
  }
  A[0] = 25;      // array element modified
}
int main(){
  int A[5] = {2,3,4,5,6};
  fun(A, 5);
}

* array as parameter -
int [] fun(int n){
  int *p;
  p = (int *) malloc (n * sizeof(int));
  return p;
}
int main(){
  int *A;
  A = fun(5);
}


19) Structure as Parameter -


21) Structures and Functions -
* Shows styling of how to code in c language

22) Converting a c programm to c++ class -
* classes and constructor -
class Rctangle {
  private int length;
  private int breadth;

  Rectangle(int l, int b){
      length = l;
      breadth = b;
  }
  int area(){
    return lenght * breadth;
  }
  void changelength(int l){
    length = l
  }
}

23) Monolithic programm -
* 


Section 3
39) Introduction
*  Data structure can be defined as arrangement of collection of data items so that they can be utilized efficiently, operations on that data can be done efficiently.
* DS all about arrangement and operations of data.
* So the arrangement or organizing of the data inside the main memory for efficient utilization by the application that arrangement is called as a Data Structure. So data structures are formed in the main memory, during the execution time of a program.

* Database - application program is using that database then data has to be brought into the main memory, Then only you can use it.
* arrangement of data here in the main memory is data structure. Then how this data is organized in form of table on the disk, This is database.

* commercial data are 2 types - legacy data and operational data. this legacy data keeps in data warehouse. algorithms written for analyzing that data are data mining algorithms.
* by analyzing that data we can take a lot of decisions, that is for management, for governance, or for business analysis. Storing and utilizing that very large sized data, that study is big data.


40) Stack vs Heap Memory -
* portion of memory that is given to the function is called as activation record of that function.

41) Stack vs Heap continued -
* same like executino context creation and deletion from stack.

* heap - used in 2 cases, 1) things are properly organised like a tower like thing, then also it is a heap. 2) if it is not organised and also it's looking like a tower, then also we call it as Heap.
* heap should treat like as a resource. when u require, use it and then once done using, also release it.
* program can't really access heap memory. using pointer, program can access.
ex. 
  int *p = new int[5];  // new means, memory allocating in heap.
  delete [] p;    // release memory from heap.
* heap memory explicitly requested, and explicitly released or disposed. If that memory not released properly, it will belong to that programm. And same things occurs multiple times, then it create memory leak.


42) Physical vs Logical DS -
* physical DS - array and LinkedList - it decide and defines how the memory is organized.
* array - continuous collection of items. array is static in nature (size of array is static). when u know length of the list, then we can choose array.
* linked list -each node contains data and linked to next node. we can add more number of items in it, so it's dynamic in nature. It's always created in heap.

* Logical DS - discipline for insertion and deletion operation defined by Logical DS. 
    Linear -stack ( LIFO ), queues, ( FIFO )
    non-linear - trees (  ), graph, (  )
    tabular - hash table
* Logical DS actually used in applications. For implementing these DS, we either use array or linked list.


43) ADT -
* Data type - define in 2 terms - data type is representation of data and operations of data
* when we write any class in c++ which has the data representation and operations together, it defines an ADT.
* operations on data - add(using element) /append (using element), add( index/element )/ insert(using index/element), remove(using index)/delete(index), set(using index/element)/replace(using index/element), get(using index), search(using key)/ contains(key), sort()
* need to understand


44) Time and space complexity -
* time complexity depends on the procedure  (means task on number of elements) that you are adopting or using program code.
* 
* need to understand




46) How Recursion works ( Tracing ) -
* Recursive function - function calling itself. It needs base condition to terminate recursion. Recursive functions trace in form of tree.
* shows example for tracing recursive functions in form of tree -
  first example - gives o/p = 3 2 1
  second example - gives o/p = 1 2 3
* It shows recursion has 2 phases - calling phase and returning phase

47) Generalising Recursion -
* In the recursive function, called before the function, if anything is there , then that will be executed at calling time.
* After the function call, it is executed at a returning time.
* like for loop, recursion have repeating. but loop will have only ascending phase and recursive functions have both ( ascending and descending phase )


48) How recursion uses stack -
* shows how program got executed and how stack filling for every functional call.
* for recursive function, O(n+1) => O(n) ( Space complexity )
* like JS execution stack, stack get filled and emptied here also.

49) Recurrence Relation - Time Complexity of Recursion -
* time complexity - O(n)
* need to understand

50) Lets code recursion -
* Showing same example with xcode and debugger. 

51) Static and Global variables in Recursion -
* for static variable, it will have single copy. so we have to update same for each function call.

52) Tail recursion -
* if recursive call is last statement in function, then it's tail recursion.
* shows comparison of tail recursion example with while loop.
* For tail recursion, complexity Time - O(n), space - O(n)
* For while loop, complexity time - O(n), space - O(1)

53) Head Recursion -
* Head recursion are difficult to convert it into loops

54) Tree recursion -
* if function calls more than 1 time in function, it called as Tree recursion.
* need to understand






79) Introduction to array -
* in simple variable, we can call scalar variable
* collection of similar elements
* memory allocation for array is continugously for each element.
* can access element using indices.

80) Declarations of Array -
* int A[5];    // initialize with garbage value (random value)
* int A[5] = {2,4}  // {2,4,0,0,0}  // if initialization start, then it will assign 0 to all remaining values
* int A[5] = {0}  //{0,0,0,0,0}  // first value assign with 0, and others assign also with 0 value
* int A[] = {2,4,5,6,7,8}    // {2,4,5,6,7,8}    //created array of 6 element based on available values. 
printf("%d %d", A[2], 2[A]);

82) Static vs Dynamic Arrays -
* in c, size of array decide at the compile time. though memory will be allocated at run time only.
* in c++, we can create array of size at run time.
* using new keyword, can create array in heap.
* to stop memory leak - delete []P;  to delete pointer variable
ex.
// pointer with array
int *P = new int[5];
P[0] = 2;


83) How to increase Array Size -
* we cannot update the size of array. so alternate is create bigger size array and shift elements of old array to new array.
* array can't be grown once initialized, bcz memory for array should be contingous. 

