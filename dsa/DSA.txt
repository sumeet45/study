
2) Introduction -
* Data structures - programm is a set of instructions which performs operations on data. so data is important part of programm. so when a program is dealing with the data, how it will organize the data in the main memory, that's what its data structure. The way you organize the data in the main memory during execution time of programm, that is DS.
* list of DS - 
  Physical DS (how data arrange in memory)=
      Arrays,
      Matrices,
      Linked list
  Logical DS (how data can be utilize) =
      Stack
      Queues
      Trees
      Graph
      Hashing
  Recurssion
  Sortings

* 3 level of programmer -
 beginner - know DS and how they work
 intermediate - how they work in detail and able to do analysis (based on time and space complexities)
 pro - can create own DS

* using c for course


3) Arrays Basics -
* learn c language
* features need to learn - Arrays, Structure, Pointers, Referrence, Parameter Passing, Classes, constructor, template
* array - is a collection of similar data elements. 
  ex. 
int main(){
  int A[5];
}
* when above programmer run,it runs in main memory, which consists code section, stack, and heap. Array will created in stack.
int B[4] = {2, 4, 6, 8, 9}        // declaration : initialization
int i;
for(i = 0; i < 5; i++){
  print(%d, B[i]);
}


4) Practice: Array Basics:
5) Structures:
* DS can be defined as collection of data members under one name
* structure is used for defining user defined data types apart from primitive types.
ex. 
// definition of structure
struct Rectangle {
  int length;    // 2 byte
  int breadth;    // 2 byte
}
// total 4 byte 
* size of structure is the total amount of memory consumed by all its members
* ex.
    main(){
      struct Rectangle r;    //declaration
      struct Rectangle r = {10, 5};    //declaration
      r.length = 15;
      r.breadth = 10;
      printf("Area of Rectangle is %d", r.length * r.breadth)
    }
* r created in stack of memory.

* complex no. -
 struct Complex {
    int read;
    int imginary;
}
// memory used - 4 bytes

2. Students
struct Student {
  int roll,
  char name[25];
  char dept[10];
  char address[50];
}
// memory used by  - 87 bytes
struct Student s1;
s1.roll = 20;
s1.name = "Sumeet"
s1.dept = "IT"
s1.address = "long address"

3. PLaying Cards
struct Card {
  int face;
  int shape;
  int color;
}
main(){
  struct Card c;
  c.face = 1;
  c.shape = 0;
  c.color = 0;
// struct Card c = { 1, 0, 0}    // for single card
// struct Card deck[52];         // for multiple cards - using array of structures // 312 cards
}

