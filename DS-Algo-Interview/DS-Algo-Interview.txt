
5) start applying for jobs, even you just started applying.

6) 
use "resumemaker.com",
* Imp points - one page, Relevant skills, Personalized, Online Link
* change every time little bit, as per JD

7) 
* resume cheatsheet - https://github.com/aneagoie/resume-checklist

* Use a pre-designed resume template - download resume from resume template website
* Make the resume fit on 1 page
* Include words from job description - add words to resume from JD
* Include company name you are applying to
* Does your first item on your resume reflect what they are looking for?
* Experience titles demonstrate value
* Do you have an online link?
* Remove the word “I”
* No buzzwords describing how great you are
* Are you using Action words?
* Measure everything in terms of impact, don’t just describe your responsibilities
* Technical Knowledge/Skills should include what they are looking for. Only show years if it is impressive
* Include only sections/items that are impressive: Experience, Projects, Education, Technical Skills
* No typos or bad grammar


12) LinkedIN -
* use search to search jobs and applied to it
* update keywords and skills weekly
* Ask for Recommendations
* connect with person through message 



23) Setting up Your Enviornment =
* use - https://replit.com/

24) Section Overview = 
* Learn Big O concepts to understand each language properly.


26) Big O cheatsheet = 
* https://zerotomastery.io/cheatsheets/big-o-cheat-sheet/?utm_source=udemy&utm_medium=coursecontent


27) What is Good Code? =
* Good code can be describe in 2 things - Readable and Scalable
* Scalable - big O notation is what allows us to measure this idea of scalable code that can scale.
* Programmer can code which might be efficient or inefficient way.
* write function called "FindNemo".


28) Big O and scalability =
* as input increases, findNemo function increase time to print character.
* output will be faster or slower based on CPU power and how many programms are running simultaneously and many other factors. So we can't predict based on this parameter, which one is good code and bad code?
* so for that, we have big o notation, to calculate efficiency.
* Here, we got chart of Big o. Now, with help of big O, we can found efficiency of our code.


29) O(n) -
* lets find out big O notation for functions.
* O(n) - as input increases, output increase linearly.
* Big O doesn't measure in seconds, instead we're focusing on how quickly our runtime grows. we do this with size of input and compare the operations that increases.
* O(n) -  this is most common notation.
* findNemo has for loop.
var array1 = [nemo];
var array2 = [..., nemo, ... many other];
function findNemo(array){
	for (let i=0;i< array.length; i++){
		if(array[i] === "nemo"){
			console.log("found nemo");
		}
	}
}
findNemo(array2);


30) O(1) =
* we call this "constant time", no matter how many input increases, we just grab 1st item of array.
* with O(1), we can execute code once, not needed to execute again and again.



36) Big O rule 1 - 
* first rule - always think about worst case.


37) Big O rule 2 -
* second rule - Remove constants
* O(2n)	becomes O(n)


38) Big O rule 3 -
* third rule - different terms for input.
* 2 loops, one by one - O(a + b)
* 2 loops, one inside one, different input - O(a * b)


39) O(n^2) - 
* 2 loops, one inside one, same input - O(n * n) => O(n^2)


40) Big O rule 4 -
* last rule - drop non dominants.
* if we have something like follow - O(x^2 + 100 + 2n )  =>  O(x^2)
* we are more concerned about O(n^2) than O(1), O(n).


41) Big O Cheatsheet -
-Big Os -
	O(1) Constant- no loops
	O(log N) Logarithmic- usually searching algorithms have log n if they are sorted (Binary Search)
	O(n) Linear- for loops, while loops through n items
	O(n log(n)) Log Liniear- usually sorting operations
	O(n^2) Quadratic- every element in a collection needs to be compared to ever other element. Two
	nested loops
	O(2^n) Exponential- recursive algorithms that solves a problem of size N
	O(n!) Factorial- you are adding a loop for every element

Iterating through half a collection is still O(n)
Two separate collections: O(a * b)


-What can cause time in a function?-
	Operations (+, -, *, /)
	Comparisons (<, >, ==)
	Looping (for, while)
	Outside Function call (function())


-Rule Book
	Rule 1: Always worst Case
	Rule 2: Remove Constants
	Rule 3: Different inputs should have different variables. O(a+b). A and B arrays nested would be O(a*b)
			+ for steps in order
			* for nested steps
	Rule 4: Drop Non-dominant terms


-What causes Space complexity?-
	Variables
	Data Structures
	Function Call
	Allocations



42) What does this all mean?
* scalable means we worry about large inputs.
* https://www.bigocheatsheet.com/
* data structure + algorithms = Programs
* Big O is about write scalable code for smaller and larger input in future too.


52) Section Overview -
* In this section, we will see about how to solve problem

53) What are companies looking for?
*  companies looking following skill - Analytic Skills, Coding Skills, Technical Skills, Communication Skills
* Analytic skills - want to know about, how u think through problems and analyze things, as well thought process and solving procedure.
* Coding skills - they check our code. is it clean, organised and readable?
* Technical Skills - fundamental knowledge 
* communication skills - must one
* Company want to know when you should use a certain data structures and algo over the other. companies need smart people.


54) What we need for coding interviews -
* Following DS and Algo, used mostly in 90% problems
* Data Structures - 
	Arrays, Trees, Stacks, Trees, Queues, Graphs, Linked lists, Hash Tables
* Algorithms -
	Sorting, Dynamic Programming, BFS + DFS (Searching), Recursion

55) Exercise: Google Interview -
* How to: work at Google - Example coding/engineering interview


62) What is A Data Structure?
* Data Structure - It's way for us to organize data
* the goal in this course is to understand data structures so that you can pick the right data structure
* based on certain scenario, data needs to store in specific format

63) How Computers stores data?
* To run code, we need to keep track of variable, array and so on. it store in "RAM"
* Need to rewatch

64) Data structures In different Languages-
https://coggle.it/diagram/W5E5tqYlrXvFJPsq/t/master-the-interview-click-here-for-course-link/c25f98c73a03f5b1107cd0e2f4bce29c9d78e31655e55cb0b785d56f0036c9d1

65) Operations on DS -
Operations mostly used - 
Insertion, Deletion, Traversal ( iterate over each item ), searching, sorting, Access


66) Arrays Introduction -
* arrays operations- 
	push, lookup, pop, are quick operations - o(1)  And  unshift and splice will take time - o(n)

67) Static and Dynamic Arrays -
* 


70) Implementing An Array -
* create own data structure with class. 
* Here took Array and its operations implemented within that class

71) Strings and Arrays -
* we should convert string into array. bcz string are simply array of characters. so whenever u got string related problem, convert it into array.

72) Reverse a string 
73) Solution:  Reverse a string -
const reverse = str => str.split("").reverse().join("")

74) Merge Sorted Arrays
75) Solution: Merge Sorted Arrays -
const merge = (arr1, arr2) => [...arr1, ...arr2].sort((a, b) => a - b)
merge([0, 3, 4, 31], [8, 6, 30])


77) Arrays Review -
Pros- 
fast lookups
fast push/pop
ordered

cons -
slow inserts
slow deletes
Fixed size* (for static array)

78) Hash Tables (Objects) -
In JS, we call Objects instead of "Hash Tables"

79) Hash function -
* Hash functions, which gives us output when we give input, which is same everytime. 
* Md5 is one of it types. there are more than this.
* It happens under the hood. we leaves it to languages.

80) Hash collisions -
* Hash collisions- It happen in Hash tables. so it suggest to use liknked list also.
* It gives us solution to resolve issue - https://en.wikipedia.org/wiki/Hash_table#Collision_resolution

81) Hash tables in different languages -
* 





154) Introduction to Algorithm -
* Algo allows us to use language built in data structures like arrays and objects or primitives such
* DS + algo = program

155) Recursion Introduction -
* recursive function - recursive function is a function that referes to itself

156) Stack overflow -
* with recursion, we may face stack overflow problem. 

157) Anatomy of Recursion -
* recursive function must have breaking point. we need to add condition to stop recursive function.

let counter = 0;
function inception(){
   console.log(counter);
   if(counter > 3){
    return "done"
   }
   counter++;
   inception()
}


220) During the interview - 
* Think like, i do have more offer letter in hand before starting interview and take this inerview as practice.
* Think like, you are going to meet a old friend with big smile and having fun, so it help increase positive bond between interviewer and me.
* 4 heroes - 
	create stories of 4 types - Technical, Success, Leadership, Challenge


222) Tell me about yourself -
* Triggers of success, mention things you want to get asked, Skills should be relevant to Job
* Use this opportunity of asking this question, take it to your skills area.
* Triggers of success - Use 4 heroes stories, past companies and projects,
* Mention things you want to get asked, Skills should be relevant to Job - use 4 heroes stories to demonstrate you as good candidate for this job
* they can ask question in different version, we can give this answer.


224) Why Us? -
* i've been researching your company and found you are working on some X, and in past, I worked on something like that.
* use 4 heroes stories to show them you are interested.
* why leave previous? - to grow, and for new challenges


225) Tell me about a problem you have solved -
* use 2 old great projects to 
* use SAR method - Situation, Action, Result - tell story in these 3 steps. be ready with exact implementation you did it.
* Tell me about an interesting project? - show how you differenet, relate it to this job


227) what is your biggest weakness -
* real answer
* show how you improved it


229) Any question for us?
* focus on them(you), not company
* ask future plans, projects, work culture




------------------------------------------------------------------------------------------------
Principles -

Why Principles?
* These principles will help us to understand, how to structure the code, so that the code will be robust, maintainable and flexible, easy to test.

SOLID Principles =
* Single Responsibily Principle - Single Function should do only one task. it should not do multiple things in single function.
* Open / Close Principle - Open for modification and closed for extension.
* Liskov Substitution - Liskov Substitution Principle (LSP) states that objects of a superclass should be replaceable with objects of its subclasses without breaking the application.
ex. class Bird {
		layEgg(){
			....
		}
	}

	class Eagle Extends Bird {
		fly(){
			....
		}
	}

	class Penguin Extends Bird {
		dive(){
			....
		}
	}

* Interface Segregation - Interface segregation principle (ISP) states that no code should be forced to depend on methods it does not use.
* Dependancy Inversion - 
