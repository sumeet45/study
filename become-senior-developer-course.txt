Udemy.com - How to Become a Senior Developer - Beyond coding skills

* google shortcuts for IDE which we gonna use ( and learn about IDE in details)
* run course with 1.25 speed, so ur attention will increase
* this course explaining about how to learn anything faster

2) who is senior developer
* proficient - 
	1) write high quality code according to best practices. 
	2) it means he awares about latest and greatest technology and methodology
	3) Find and solve bugs quickly
* Manage himself - priotize and handles tasks efficiently
* Professional - brings value to organization, always looking for continuous improvement,
* team player - he looks beyond his tasks to promote his team


3) How this course is built
* 


Excel
4) Introduction -
* Lessons in this module - Understanding the task, solving, implementing the solution, testing, bugs
* you don't need to use all this steps for each bugs or task. sometime, you just use your wisdom for small task or bugs.


5) Understand the task -
* 3 questions -
	a) why deep understanding of task before coding?
	b) How to tell you understand the task?
	c) How to remember what you understand?

	a) why deep understanding of task before coding?
	ans - less bugs, 
	      minimize changes after coding begins
	      better time management
* spend is adequate amount of time on reading specs.
	
	b) How to tell you understand the task?
	ans - 1) what does the user see?, 2) how does each part behave?, 3) what interaction is there with other components? 4) what are the tasks, edge cases and how to handle them?

	c) How to remember what you understand?
	 documenting
	* in documenting, comment the mockup
	* mark/comment key info
	* flow chart
	* writing down edge cases 



6) Solve -
* 2 questions -
	1) Why spend time on planning a solution, and do not go with first solution which comes in mind?
	* No reinventing the wheel
	* write compatible code
	* not waste time on implementing suboptimal solutions
	* Not find later that the solution doesn't work
	
	Solve -
	Business scope -
	* Define Technically-
		Scope -
			1) What already exists?
			2) What needs to be done?
		context - 
			1) Part of the system that interacts with your code, ex. exception handling mechanism
			2) Code you can learn from or use
			3) Coding standard
	* Find Optimal Solution -
		* what are some relevant solutions?
		* which solution is the optimal? why?

7) Implement -
* What is considered a good coding session?
	1) concentrate solely on solving a specific issue
	2) clear image of what you're trying to accomplish
* If you stop often to ask questions or assume things and tell yourself you'll check them later, you'll find concentrating harder and might find some of your assumptions wrong, which will cause you to backtrack, as we discussed on previous lessons. So that answers the first question.
* Mockup comments, key info comments, charts and diagram, edge cases, specs

review - 
1) be aware of all the task's details
2) Concentrate on the big picture
3) main flow is where you should start coding

* understand the task, found the optimal solution and implement the solution


8) Test
* why, how, how much, when to test?
	- Test code with various edge cases and test mercilessly
	- as much as it takes for you to be sure there aren't any bugs
	- 



12) set yourself goal -
* Smart goal - Specific, Measurable, Achievable, Relevant, Time-bound


13) Know your resources -
* Free time in front of computer
* Time at work
	* Work in an organization
	* Completing tasks
* Free time not in front of a computer



25) 
* senior developer should be proficient - high quality code, aware of technologies and methodologies inside and outside company, Finds and solves bugs quickly
* manages himself - prioritize & handles tasks
* Professional - brings value to organization, strives for excellence
* Team Player - Looks beyond his tasks, selfless




Process -
* Specification Document
* Clear understanding of the task
* Optimal Solution
* Working software
* Flawless software
