Elastic search
Email setup
notification
Form and File upload


DB
HTTP MDN
API and its security 
Libraries
Push notifications
IOS development
Android development
Tools - GitActions
CI-CD -
Firebase
payment integration
DNS

------------------------------------------------------------------------------------------------------------------------------
JWT (https://youtube.com/watch?v=5mUDRQfwXuE)-
* http is stateless protocol
* we used sessionid and token for giving data
* sessionid might have some issues - 
    1) suppose server A gaves you session id while login, but your next request goes to Server B, then it might create issue. bcz server B don't know about your session id
* JWT -
    In JWT, client sends details to server. and Server sends back all the information in JSON format, required by client in token form after token signtaure. server didn't store anything. token share with http header authorization. Server signed token with secret key ( public-private key, secret key). 

* session id is actually reference point. but JWT is actually storing all information required by user.
* JWT has 3 parts - header, payload, signature
* https://jwt.io/
* JWT token - has base 64 encode
* JWT header - has 2 props type and algorithm
      type - tells which type of token
      algorithm - tells which type of algorithm used  (HS256, RS256 and many more)
* JWT payload - actual user data
    * claim based and custom based 
    * we don't store any confidential data in payload
* JWT signature - using algo and available data, we create signature and store it in signature
* JWT uses in authorization
* JWT store it in http header authorization with "Bearer "
------------------------------------------------------------------------------------------------------------------------------



httpOnly cookie
xss
Cookies 
Session 

------------------------------------------------------------------------------------------------------------------------------

* db selection based on which reason - 
  1) read database manual of current DB. It can provide configuration know, which help to deal with any db related issue.
  2) can ask experts to select DB
  3) check Limit and FAQ section to learn about DB

------------------------------------------------------------------------------------------------------------------------------

* why react native instead of native or vice versa
  Choosing between native development and React Native depends on various factors, including project requirements, development resources, time constraints, and target audience. While both approaches have their advantages and disadvantages, there are scenarios where native development might be preferred over React Native:

1) Performance: Native development typically offers better performance compared to cross-platform solutions like React Native. Since native apps are developed using platform-specific languages (Swift/Objective-C for iOS, Java/Kotlin for Android), they have direct access to device features and APIs, resulting in faster execution and smoother user experience, especially for graphics-intensive or CPU-intensive applications.

2) Access to Native APIs: Native development allows developers to leverage platform-specific APIs and features to their full extent. This can be crucial for apps that require deep integration with device functionalities such as camera, GPS, sensors, and native UI components. While React Native provides a bridge to access native APIs, there might be limitations or delays in adopting new platform features.

3) User Experience: Native apps can provide a more consistent and polished user experience by adhering to platform-specific design guidelines (Material Design for Android, Human Interface Guidelines for iOS). This can be important for apps that prioritize user interface (UI) and user experience (UX) as key differentiators.

4) Tooling and Ecosystem: Native development platforms (Xcode for iOS, Android Studio for Android) offer mature development environments with comprehensive tooling, debugging capabilities, and performance profiling tools. While React Native has improved its tooling and ecosystem over the years, it may still lack some features or integrations available in native development environments.

5) Platform-Specific Requirements: Some projects may have platform-specific requirements or dependencies that are challenging to implement using cross-platform frameworks like React Native. In such cases, native development provides more flexibility and control over the application architecture and implementation.

6) Long-Term Maintenance and Scalability: Native apps may have lower maintenance overhead and better long-term scalability, especially for large-scale projects with complex requirements. Since native codebases are tightly coupled with platform updates and SDK changes, they can be easier to maintain and extend over time compared to cross-platform codebases, which may require additional effort for compatibility testing and updates.

While native development offers advantages in performance, user experience, and access to platform-specific features, it often requires separate development efforts for each platform, resulting in higher initial development costs and longer time to market. Ultimately, the choice between native and React Native depends on your project's specific needs, resources, and trade-offs between development efficiency and application performance.


------------------------------------------------------------------------------------------------------------------------------

* Improving Microservice Performance: From 1x to 10x

1.Cache:
Explanation: Cache stores frequently accessed data in a fast-access layer to reduce latency and improve performance.

2.Connection Pooling:
Explanation: Connection pooling reuses existing database connections to minimize the overhead of creating new connections, improving efficiency.

3.Pagination:
Explanation: Pagination divides a large set of data into smaller pages to enhance user experience and reduce data transfer times.

4.JSON Serialization:
Explanation: JSON serialization converts data objects into a JSON format for easy transmission between client and server applications.

5.Payload Compression:
Explanation: Payload compression reduces the size of data transmitted over the network, improving throughput and reducing latency.

6.Avoid N+1 Problem:
Explanation: The N+1 problem occurs in ORM frameworks when making repeated database queries instead of fetching data in bulk. It's solved by eager loading or using batch fetching techniques.

7.Async Logging:
Explanation: Async logging asynchronously writes log messages to disk or a centralized logging service, minimizing performance impact on the main application.

8.Load Balancer:
Explanation: Load balancer distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, and ensure high availability.

------------------------------------------------------------------------------------------------------------------------------

