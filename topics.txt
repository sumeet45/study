* web - HTML, CSS(sass, less), next/react router,  @testing-library/react

* mobile - React Native, React navigation, @testing-library/react-native, android(kotlin + XML), IOS(swift), DB, 

* Common - JS, React, Typescript, redux, jest, Regex, DSA, LLD, HLD, principles, system design

* TOPICS - HTTP, REGEX, JWT, Security ( Mobile, API, Client), Push notification,  payment integration, DNS, Authentication, Firebase, Elastic search, Form and File upload

* Important Point - While learning any technology, remember following points - * Concept and Code, * mental model, * keep clear mind and sentence about how it works in mind, * practice and discipline


RoadMap Given by Scaler -----------
give code to machine (w3schools, etc)
DSA - 
	20% - apna college, codehelp, mycodeschool, abdul bari, freecodecamp
	80% - InterviewBit - structured, leetcode, 
CS fundamentals- 
	OS - concurrency, memory management
	DB - Relational DB, { Index, SQL, B-Tree, Schema Design }
	Network - socket programming - websocket
------------------------------------------------------------
Projects - 
	MVC framework, 1 small project
---------------------------------------------------------
Design -
	HLD (system design)
	LLD - code, solid, design pattern
For LLD - content - https://refactoring.guru/,	
	  Book - Head first design
	
for HLD - Designing data intensive application - martin clifman
	bytebyteGo
	gaurav sen, tushar roy - utube
	educative.io - 



------------------------------------------------------------------------------------------------------------------------------
JWT (https://youtube.com/watch?v=5mUDRQfwXuE)-
* http is stateless protocol
* we used sessionid and token for giving data
* sessionid might have some issues - 
    1) suppose server A gaves you session id while login, but your next request goes to Server B, then it might create issue. bcz server B don't know about your session id
* JWT -
    In JWT, client sends details to server. and Server sends back all the information in JSON format, required by client in token form after token signtaure. server didn't store anything. token share with http header authorization. Server signed token with secret key ( public-private key, secret key). 

* session id is actually reference point. but JWT is actually storing all information required by user.
* JWT has 3 parts - header, payload, signature
* https://jwt.io/
* JWT token - has base 64 encode
* JWT header - has 2 props type and algorithm
      type - tells which type of token
      algorithm - tells which type of algorithm used  (HS256, RS256 and many more)
* JWT payload - actual user data
    * claim based and custom based 
    * we don't store any confidential data in payload
* JWT signature - using algo and available data, we create signature and store it in signature
* JWT uses in authorization
* JWT store it in http header authorization with "Bearer "
------------------------------------------------------------------------------------------------------------------------------



httpOnly cookie
xss
Cookies 
Session 

------------------------------------------------------------------------------------------------------------------------------

* db selection based on which reason - 
// https://medium.com/wix-engineering/how-to-choose-the-right-database-for-your-service-97b1670c5632

A) Query Patterns
        * How complex are your query patterns? Do you just need retrieval by key, or also by various other parameters? Do you also need fuzzy search on the data?
        * How you are going to fetch your data is one of the main ways to find the best database for your use case. If you are going to fetch data by key, then all you need is a key-value store (e.g. DynamoDB, Redis, S3, GCS).
        * In case you mostly fetch via key, but sometimes you also need to fetch by one or two other fields, then Wide-Column DBs (e.g.DynamoDB, Cassandra) may be right for you.    
        * On the other hand if you will require to query by many different fields you can choose either Relational DB (e.g.MySQL, PostgreSQL) or Document DB (e.g.MongoDB, CouchDB, MySQL, PostgreSQ). Note that Document DBs don’t support well queries that require joining data from multiple documents.    
        * Finally, in case you are looking for fuzzy search query capabilities (free text search), then search engines like Elasticsearch and Solr are the best fit.

B) Consistency
        * Is strong consistency required (read after write, especially when you switch writes to a different data-center) or eventual consistency is OK?
        * In case you need to read your data right after your write it (i.e. strong consistency) than a Relational database (e.g. MySQL, PostgreSQL) is usually more suited than a Document Database (e.g.MongoDB, CouchDB), especially in case of multi-data-center scenario.

C) Storage Capacity
        * How much storage capacity is needed?
        * Most database systems are limited by the amount of space on disk (e.g. MySQL) or struggle with performance as amount of Nodes and Shards grows into the hundreds (e.g. Elasticsearch).
        * When infinite storage is needed this is where cloud solutions shine. Object Storage Services like S3 and GCS will allow you to store as much data as you like with the handy option is multiple tiers, so you pay less for data that is rarely retrieved.

D) Performance
        * What is the needed throughput and latency?        
        * All databases performance degrades as the amount of read/write throughput traffic increases. This is the time when optimizations such as re-indexing and re-sharding of your data come in handy.        
        * In case you have very high traffic and require very low latency, Cloud providers solutions like Amazon’s DynamoDB and Google’s Bigtable could be just what you need. As long as your service is deployed on the same data center as the database, you can enjoy latencies that are under 10ms. The downside is of-course the $ cost.

E) Maturity and Stability
        * If you choose self-hosted deployment, How much experience does your DBA team have with this technology, how mature is it?        
        * Choosing the most trendy, powerful, and fully featured database to self-host maybe tempting, but as long as your orgainization doesn’t have experience with this database, you may end up regretting it.

F) Cost - 
        * If you choose a managed cloud solution, What are the costs? What are its limitations?



1) Inside Query Patterns, even though you may be a lot of data for audit and historical purposes, what will be the data that most users will be interested in?
2) Is versioning of data being stored needed?
3) How would you store the data and how easy would it be migrate to a new Database/Datastorw if need arises?
4) How easy would it be to make schema changes on the database(with and without encryption enabled)?

------------------------------------------------------------------------------------------------------------------------------

* why react native instead of native or vice versa
  Choosing between native development and React Native depends on various factors, including project requirements, development resources, time constraints, and target audience. While both approaches have their advantages and disadvantages, there are scenarios where native development might be preferred over React Native:

1) Performance: Native development typically offers better performance compared to cross-platform solutions like React Native. Since native apps are developed using platform-specific languages (Swift/Objective-C for iOS, Java/Kotlin for Android), they have direct access to device features and APIs, resulting in faster execution and smoother user experience, especially for graphics-intensive or CPU-intensive applications.

2) Access to Native APIs: Native development allows developers to leverage platform-specific APIs and features to their full extent. This can be crucial for apps that require deep integration with device functionalities such as camera, GPS, sensors, and native UI components. While React Native provides a bridge to access native APIs, there might be limitations or delays in adopting new platform features.

3) User Experience: Native apps can provide a more consistent and polished user experience by adhering to platform-specific design guidelines (Material Design for Android, Human Interface Guidelines for iOS). This can be important for apps that prioritize user interface (UI) and user experience (UX) as key differentiators.

4) Tooling and Ecosystem: Native development platforms (Xcode for iOS, Android Studio for Android) offer mature development environments with comprehensive tooling, debugging capabilities, and performance profiling tools. While React Native has improved its tooling and ecosystem over the years, it may still lack some features or integrations available in native development environments.

5) Platform-Specific Requirements: Some projects may have platform-specific requirements or dependencies that are challenging to implement using cross-platform frameworks like React Native. In such cases, native development provides more flexibility and control over the application architecture and implementation.

6) Long-Term Maintenance and Scalability: Native apps may have lower maintenance overhead and better long-term scalability, especially for large-scale projects with complex requirements. Since native codebases are tightly coupled with platform updates and SDK changes, they can be easier to maintain and extend over time compared to cross-platform codebases, which may require additional effort for compatibility testing and updates.

While native development offers advantages in performance, user experience, and access to platform-specific features, it often requires separate development efforts for each platform, resulting in higher initial development costs and longer time to market. Ultimately, the choice between native and React Native depends on your project's specific needs, resources, and trade-offs between development efficiency and application performance.


------------------------------------------------------------------------------------------------------------------------------

* Improving Microservice Performance: From 1x to 10x

1.Cache:
Explanation: Cache stores frequently accessed data in a fast-access layer to reduce latency and improve performance.

2.Connection Pooling:
Explanation: Connection pooling reuses existing database connections to minimize the overhead of creating new connections, improving efficiency.

3.Pagination:
Explanation: Pagination divides a large set of data into smaller pages to enhance user experience and reduce data transfer times.

4.JSON Serialization:
Explanation: JSON serialization converts data objects into a JSON format for easy transmission between client and server applications.

5.Payload Compression:
Explanation: Payload compression reduces the size of data transmitted over the network, improving throughput and reducing latency.

6.Avoid N+1 Problem:
Explanation: The N+1 problem occurs in ORM frameworks when making repeated database queries instead of fetching data in bulk. It's solved by eager loading or using batch fetching techniques.

7.Async Logging:
Explanation: Async logging asynchronously writes log messages to disk or a centralized logging service, minimizing performance impact on the main application.

8.Load Balancer:
Explanation: Load balancer distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, and ensure high availability.

------------------------------------------------------------------------------------------------------------------------------

how notification works? -
https://www.suprsend.com/post/how-does-ios-and-android-push-notification-service-works-technically