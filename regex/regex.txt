
Udemy course - https://www.udemy.com/course/regular-expressions-mastery/

Steps -
1) Find Pattern
2) Understand pattern
3) write patterns with regex symbols

1) Introduction -
* Regular expressions are a way to search for patterns within data sets
* To find result from data
* regular expression is not programming language, it's feature.
* Defn - A Regular expression, regex or regexp is a sequence of characters that define a search pattern.

2) Use Cases for Regular Expressions-
* While working with password
* Notepad++ comes with regex engine

3) Courses RoadMap

4) About Course Subtitles

5) Deep Dive - First Example -
* a* - Zero or more occurences of "a"
ex. const str = `fooaaaabar
fooabar
foobar
fooaabar
fooxxxbar
fooxbar`;
const regex = /fooa*bar/gm;


6) Resources for Download

7) A generic solution to any regex problem -
* steps -
  1) Understand the requirements? - what needs to be included? and what needs to be excluded?
  2) Identify the patterns in the inclusion list or exclusions list.
  3) Represent the patterns using regular expressions.

8) Hands-on with Linux Grep regex 
* All major programming language comes with a regex engine. eg. Java, Python, linux commands like grep, sed, awk etc.
* Though regex engines share the same fundamental philosophy, the complete feature set of each regex engine may vary.
* Almost all major regex engines are POSIX standards compliant.
* grep command preview -
  cat regex01.txt
  grep 'fooa*bar' regex01.txt

9) Hands-on with Java regex engine -
* 

Regex: The Basic Set -
10) Introduction-
* Basic set module

11) The wildcard symbol -
* . - single wildcard, a period or dot is a wildcard that represents exactly one character in a single position
ex.
let string = "fooabar
fooxbar
baryfoo
foobar
fooxybar
foocbar"
const pattern = foo.bar/gm;


12) Wildcard asterisk combo -
* var str = "foobar, barfoo, fooabcbar, foobxcbar, barcbyfoo, foozbar, barafoo, barabfoo"
 var pattern = foo[a-z]*bar

* var str = "foobar
barfoo
fooabcbar
foobxcbar
barcbyfoo
foozbar
barafoo
barabfoo"
var pattern = foo.*bar

13) Representing whitespaces -
* var str = "fooxxxbat
foo   bar
fooxbar
fooxxbar
foo bar
foo      bar
foobar
fooyyybar"
var pattern = foo\s*bar

14) Character classes -
* [abc] - this is called character class.
* var str = "foo
moo
coo
doo
poo
loo
boo
hoo"
var pattern = [fcl]oo

* var str = "foo
moo
coo
doo
poo
loo
boo
hoo"
var pattern = [fcdplb]oo

* var str = "foo
moo
coo
doo
poo
loo
boo
hoo"
var pattern = [^mh]oo


15) Character classes with ranges -
* var str = "joo
boo
koo
loo
woo
moo
zoo
coo"
 var pattern = [j-m]oo

* var str = "joo
boo
koo
loo
woo
moo
zoo
coo"
var patterns = [j-mz]oo

* var str = "joo
boo
Koo
Loo
woo
moo
zoo
coo"
var pattern = [j-mzKL]oo

16) Escaping with backslash -
* var str = "xxx.yy
xx.yyyy
x.yy
xy
xxyy
yyxx
yx
yxxx"
var pattern = x*\.y*

* var str = "x#y
x:y
x.y
x&y
x%y"
var pattern = x*[#:.]y*

* we saw "-" sign used for range and caret symbol for negation. these symbol have special meaning inside square brackets, so they need "\" help. It's not same for "."(period). Period work as literal in brackets

* var str = "x#y
x:y
x^y
x&y
x%y"
var pattern = x*[#:^]y*

* var str = "x#y
x\y
x^y
x&y
x%y"
var pattern = x*[#\\^]y*



17) Anchors -
* var str = "foo bar baz
bar foo baz
baz foo bar
bar baz foo
foo baz bar
baz bar foo"
var pattern = ^foo.*

* var str = "foo
foo bar
baz foo
foo bar baz
baz bar foo"
var pattern = ^foo$

Section 3:Regex: The extended set
18) Introduction -
* till now we do basic set. lets continue with extended set.

19) Curly braces reporter
* var str = "834
519
4874
5
89
45687
25
645"
var pattern = ^[0-9]{3}$
* The -E option is required, if you are using any symbol from POSIX extended set in the regex


* var str = "lion
tiger
leopard
fox
kangaroo
bat
mouse
cuckoo
deer"
var pattern = ^[a-z]{4,6}$

20) Single ended Curly braces repeater -
* var str = "ha
hahahahaha
hahaha
hahahaha
haha

hahahahahaha
hahahahahahahaha
hahahahahahahahaha"
var pattern = (ha){4,}


21) The Plus Repeater -
* var str = "fooaaaabar
fooabar
foobar
fooaabar
fooxxxbar
fooxbar
"
var pattern = fooa+bar


22) The Question Mark Binary -
* var str = "https://website
http://website
httpss://website
httpx://website
httpxx://website"
var pattern = https?:\/\/website


23) Making choices with Pipe -
* var str = "sapwood
rosewood
logwood
teakwood
plywood
redwood"
var pattern = (log|ply)wood


24) Introduction -
* Steps -
  1)  Understand the requrement: what needs to be replaced? What should be the replacement?
  2)  Represent the patterns using regex. Enclose the patterns that needs to be replaced with parenthesis to segregate them into  capture groups.
  3)  Come up with a substitution string by using the captured pattern groups.
  4)  Use a regex enabled to do the replacement.

25) The monitor resolutions problems -
* var str = "1280x820";
const regex = /([0-9]+)x([0-9]+)/gm;
const subst = `$1 pix by $2 pix`; 

26) The First name Last name Problem -
* var str = "sumeet shedge";
const regex = /([a-z]+)\s([a-z]+)/gm;
const subst = `$2,$1`;

27) The clock time problem -
* const regex = /([0-9]{1,2}):([0-9]{2})/gm;
const str = `7:32`;
const subst = `$2 mins past $1`;
const result = str.replace(regex, subst);

28) The Phone number problem -
* 
const regex = /[0-9]{3}\.[0-9]{3}\.([0-9]{4})/gm;
const str = `809.739.0271`;
const subst = `xxx.xxx.$1`;

29) The Date Problem -
* const regex = /([a-zA-Z]+)\s([0-9]{1,2})([a-z]+)\s[0-9]{2}([0-9]{2})/gm;
const str = `Jan 5th 1987`;
const subst = `$2-$1-$4`;

30) Another phone number problem -
* const regex = /\(([0-9]{3})\)(.[0-9]{3})(.[0-9]{4})/gm;
const str = `(808).282.2228`;
const subst = `$1$2$3`;


32) Email Challenge
* 




Symbols =
a* = zero or more occurance of "a"
. = represents exactly one character in a string
.* = zero or more occurence of wildcard, which means zero or more occurences of any character
\s = represents whitespace. \s* represents zero or more occurence of whitespace
[abc] = character class. one of the characters inside the square brackets - a, b or c
[^mh] = caret symbol within character class. sometimes its called the exponent operator.
[j-m] = character range class
[a-cx] = combination character class. one of the characters falling in the range OR any of the other choices given in square brackets - a,b,c,x
\. = escape character. following characters should be escaped with a backslash as these characters have special meaning otherwise - ^$*.[()\
^ = caret symbol outside of character class. ^ is placeholder that signifies begining of line. The interpretation of ^ differs within square brackets and outside of it. Inside square brackets, ^ stands for negation. Outside, it is a placeholder for begining of line.
$ = is a placeholder that signifies end of line
a{m} = represents exactly "m" repetitions of whatever immediately precedes this. i.e. "a"
a{m}{n} = represents at least "m" and at most "n" repetitions of whatever immediately precedes this. i.e. "a"
(ha){m,} = parenthesis are used to group and treat as a single entity
(ha){,n} = represent at most "n" repetitions of whatever immediately precedes this
a+ = One or more occurences of "a"
a? = Zero or one occurences of "a"
(a | b) = represents either a or b, where a and b can be multicharacter strings
