
1) Background Stroy - 
  * started by James gosling in June 1991 and give name "Oak"
  * Java 1.0 in 1995
  * why Java - c-like notation, uniform and simple, general-purpose
  * Object-oriented
  * write once, run anywhere application - Java introduce JVM between OS and application. Application run on JVM, not directly on OS. so we can build Java Application platform independent.
  * Java is everywhere.
  * IDE


5) The language of 50 keywords -
  * Keyword is reserved word.
  * meaning of word, is known to compiler
  * keyword cannot be used as name of variable
  * Keywords are reserved words in Java that have specific meanings and cannot be used for any other purpose, such as variable names or method names. Java has a total of 50 keywords, which are used to define the syntax and structure of Java programming language. Hereâ€™s a list of Java keywords:

    abstract: used to declare a class or method as abstract. An abstract class is a class that cannot be instantiated, and an abstract method is a method without a body that must be implemented in a subclass.
    assert: used to perform assertion testing in Java. An assertion is a statement that should always be true, and if it is false, then an AssertionError is thrown.
    boolean: used to declare a boolean variable, which can only have two values: true or false.
    break: used to break out of a loop or switch statement.
    byte: used to declare a byte variable, which is a data type that can store values from -128 to 127.
    case: used in a switch statement to define a case label.
    catch: used to catch and handle exceptions in Java.
    char: used to declare a char variable, which is a data type that can store a single character.
    class: used to declare a class in Java.
    const: a keyword that was reserved but never implemented in Java.
    continue: used to skip the current iteration of a loop and continue to the next iteration.
    default: used in a switch statement to define a default case.
    do: used to start a do-while loop.
    double: used to declare a double variable, which is a data type that can store decimal values.
    else: used in an if statement to define an alternative block of code to execute if the condition is false.
    enum: used to declare an enumeration, which is a type that consists of a set of named constants.
    extends: used to extend a class in Java.
    final: used to declare a variable or method as final, which means that its value or implementation cannot be changed.
    finally: used in a try-catch block to define a block of code that will always be executed, regardless of whether an exception is thrown or not.
    float: used to declare a float variable, which is a data type that can store decimal values with less precision than double.
    for: used to start a for loop.
    goto: a keyword that was reserved but never implemented in Java.
    if: used to define a conditional statement in Java.
    implements: used to implement an interface in Java.
    import: used to import a package or class into a Java program.
    instanceof: used to check if an object is an instance of a particular class or interface.
    int: used to declare an int variable, which is a data type that can store whole numbers.
    interface: used to declare an interface in Java.
    long: used to declare a long variable, which is a data type that can store larger whole numbers than int.
    native: used to declare a method as native, which means that its implementation is provided by the underlying platform, rather than in Java code.
    new: used to create a new object in Java.
    package: used to define a package in Java.
    private: used to declare a variable or method as private, which means that it can only be accessed within the same class.
    protected: used to declare a variable or method as protected, which means that it can be accessed within the same class or any subclass.
    public: used to declare a variable or method as public, which means that it can be accessed from anywhere in the Java program.
    return: used to return a value from a method or exit a method without returning a value.
    short: used to declare a short variable, which is a data type that can store smaller whole numbers than int.
    static: used to declare a variable or method as static, which means that it belongs to the class rather than to individual objects of the class.
    strictfp: used to enforce strict floating-point precision in Java.
    super: used to call a method or constructor in the superclass.
    switch: used to start a switch statement in Java.
    synchronized: used to ensure that only one thread can access a block of code or object at a time in Java.
    this: used to refer to the current object in Java.
    throw: used to throw an exception in Java.
    throws: used to declare that a method may throw an exception in Java.
    transient: used to declare a variable as transient, which means that it will not be serialized when the object is written to a file or transmitted over a network.
    try: used to start a try-catch block in Java.
    void: used to declare a method that does not return a value.
    volatile: used to declare a variable as volatile, which means that it is subject to optimization by the Java Virtual Machine.

  * Rules to follow for keywords:
      * Keywords cannot be used as an identifier for class, subclass, variables, and methods.
      * Keywords are case-sensitive.

6) Our First Java Program -
* System.out.println()- to print on console.
* Here, "System" is class and "out" is subclass which consist println().

7) Variables and datatype -
  * variables - variable is space in memory. It helps to store data in memory. so we can process variable later.
  * data type - while declaring variable, we have to supply data type. Based on this, we will decide which type of data would come in variables
ex.  int num1 = 25;
     string str1 = "sumeet";

8) Understanding variables -
  * when we declare variable without initialize and run application, it will crash bcz of variable without initialization like below -
    int value1;
    System.out.println(value1);

   Output - //ERROR!
  * int value1 = 4;
   System.out.println(value1);    // 4

  * int value1 = 1, value2 = 2;     // valid syntax
  * we can do basic operation and store value in variable too.
   int value3 = (2*2)-1;
  * variable names are case sensitive. 


9) Primitive Data types (Integer datatype) -
  * int - stands for integer ( for whole number ). 
    ex.   int max = 2147483647;  // int can contain number from "-2147483648" to "2147483647"

  * short max = 32767;    // for short, "-32768" to "32767"
  * long max = 9223372036854775807L;  //for long variable, "-9,223,372,036,854,775,808" to "9,223,372,036,854,775,807" and also need to add "L"
  * byte max = 127;   // for byte variable, "-128" to "127"


10) Primitive Data types (Floating point datatype) -
  * whenever we want to store decimal number, we have to use "float" and "double" data type.
  * could be 2 value - float (floating point) and double (floating point with double precision)
  * float occupy 32 bit of space in memory
  * double occupy 64 bit of space in memory
  * why double? - more precise, programm will run fast
  * int datatype preferred over long, byte, short
  * ex.  float value2 = 3f;
         double value3 = 9.903922dd;

  * ex.  float value2 = 10f/6f;     // 1.6666666
         double value3 = 10d/6d;    // 1.6666666666666667


11) BigDecimal Introduction -
  * BigDecimal helps to acheive ultra precision with decimal number
  * ex.  BigDecimal d1 = new BigDecimal("1.05");   // used number with double quoation, it helps to do addition properly
         BigDecimal d2 = new BigDecimal("1.05");
         System.out.println(d1.add(d2));    // 3.60
  * do research on BigDecimal

12) Primitive data type (Boolean and Char data type) -
  * boolean helps to store boolean values like true and false.
  * char helps to store single character in variable with single quoates. we can add unicode in single quoates and print any character.
        char var1 = 'b';
        boolean var2 = false;
        System.out.println(var1);   // b
        System.out.println(var2);   // false

13) String Basics -
  * String is sequence of characters.
  * string concatenation available in Java, like JS
  * When one of the operand is string, other operand would be typecasted and converted to string
    ex. String str = "Hello world";
    
    ex. String var1 = "10";
        String var2 = "20";
        System.out.println(var1+var2);    //1020

    ex. Int var1 = 10;
        String var2 = "20";
        System.out.println(var1+var2);    //1020

   * Proper way of declaring String - String var2 = new String("Hello world");


14) Type Casting -
  * It means conversion of data type to antoher data type.
   ex.  short x = 5;
        int y = x;
        System.out.println(y);   // 5 - this called implicit typecasting

   ex. int y = 10;
       short x = y;  // warning - type mismatch: cannot convert from int to short

  * TypeCasting has 2 types - Widening (Implicit Casting) and Narrowing (Explicitly Casting)
  * more resources - https://studyeasy.org/java/type-casting/
  * Implicit casting done automatically
  * For Explicity Casting ex -
       int y = 10;
       short x = (byte)y;  // cast to byte
       System.out.println(x);   // 5 - this called Explicit typecasting

  * ex. float v1 = 10.0f;
        double v2 = v1;
        System.out.println(v2);   
    
    ex. double v2 = 10.02d;
        float v1 = (float)v2;
        System.out.println(v1);   // 10.02
 
    ex. double v2 = 10.0123456789d;
        float v1 = (float)v2;
        System.out.println(v1);   //10.012345 - need to truncate value

   * we won't be able to type cast from String to int or viceversa.
   * we can type cast from int to float and viceversa, using Explicit typecasting only
    float f = 10.532f;
    long l = (long)f;
    System.out.println(v1);   //10.0

  * Explicit typecasting can alter the values.


17) Arithmatic operator -
  * link - https://studyeasy.org/java/arithmetic-operators/
  * operator - 
      * helps to perform an operation.
      * perform computation 
  * = operator - to assign value to variable
  * + helps to do arithmatic operation and concatenation operator (for string)
  * - helps to do substraction operation
  * * helps to do multiplication operation
  * / helps to do divide operation
  * % helps to do modulus operation (gives reminder)
  * x++ will print x and then increment value of x
  * ++x will increment x and then print value of x


18) Making decision with operators -
  * showing if else statement with condition
  * if we have single statement in if else block, we can skip curly brackets.
  ex.  if(x == 5)
         System.out.println("x is 5");
       else
         System.out.println("x is not 5");

  * if we have multiple statement in if else block, we can have to keep curly brackets. Otherwise we can face crash.
  
19) Making decision with operators Part 2 -
  * showing if else code with comparing 4 and 5, which shows warning about dead code.
  * If we use variable with value instead value for comparing in if else, will give warning


20) Making decision with operators Part 3 -
  * showing if else code with using logical operator ( "&&" , "||", "!" ) 

21) Ternary Operator -
  * boolean x = ( 5 > 4 )? true: false

22) Assignment Operators -
  * boolean val = true;  // assignment operator
  * x += 5;   // x = x + 5;  

23) Making decision with if else -
  * use {} with if block. best practice to follow
  * scope of if and else block is single statement
  * ex. 
        if(5 == 5)
           System.out.println(true);
        else
           System.out.println(false);
  * nested if possible
  

25) Switch case - Part 1 
  * 



44) Classes - Introduction -
  * what is class? - class is template of object. class is blueprint of object.
  * object is dervived from class. object has states and behaviour. 
  * ex. car has color, doors, engine. these are properties (states) of car. And driving is functionality (behaviour) of car.

45) Classes - getters and setters introduction -
  * using access modifiers like "private", we can create private properties. These properties are accessible within current class only.
  * using getters and setters, we can set and get values of private properties.
  * ex.
     public class Hello {
        public static void main(String[] args) {
            // "Car" before "Car1" is data type
            Car car1 = new Car();   // creating object
            car1.setSpeed(10);
            System.out.println(car1.getSpeed());
     
            car1.setDoors("closed");    // set value
            System.out.println(car1.getDoors());   // closed
     
            car1.setDriver("closed");
            car1.setEngine("closed");
            System.out.println(car1.run());   // "running" 
        }
     }
     public class Car {

        // declaration
        private int speed;
        private String engine;
        private String driver;
        private String doors;

        // constructor
        public Car(){
           doors = "opened";
           engine = "off";
           driver = "absent";
           speed = 0;
        }

        // constructor overloading
        public Car(String doors, String engine, String driver, int speed){
           this.doors = doors;
           this.engine = engine;
           this.driver = driver;
           this.speed = speed;
        }

        public void setSpeed(int speed){
          this.speed = speed;
        }
        public int getSpeed(){
          return speed;
        }

        public void setDoors(String doors){
          this.doors = doors;
        }
        public String getDoors(){
          return speed;
        }

       // adding functionality into class
        public String run(){
           if(doors.equals("closed") && engine.equals("on") && driver.equals("seated") && speed > 0){
               return "running";
           } else {
               return "not running";
           }
        }
     }

46) Classes - getters and setters -
  * showed how eclipse IDE set getters and setters for other private properties.
  
  * showed 1 more example with doors. Added same code in above example.

47) Classes - adding functionality into class -
  * whenever try to compare string, use ".equals("")"
  * added code in above car example.

48) Constructors introduction -
  * let's give default value to car properties
  * class has same name for its constructor. Constructor doesn't return anything.
  * constructor called automatically. so we can do initialization ( giving default value for properties ) in constructor. declaration of properties should be before constructor.
  * create another constructor with custom values.
  * super method is call to constructor of parent class.
  * if there's constructor more than 1, it called constructor overloading.
  * added code in above car example.

  
49) Default constructor -
  * Java has default constructor. If we add own constructor in class, then java do not add default constructor.

50) Usage of constructor - 
  * constructor helps to initialize properties of object.

51) Understanding inheritance - 
  * in Inheritance, there is relationship between child and parent - "is a" relationship
  * "car is a vehicle"
  * combinig all common properties in vehicle class. and extend vehicle class with car class using inheritance.

52) Working with inheritance - Part 1 - 

53) Working with inheritance - Part 2 - 
  * without initialization of property, if we used that property, we will get null as value.
  * suppose we change access modifier of lights property of vehicle classs to private, then it won't be a direct accessible in bike class. Hence, it will give null pointer exception.
  * in best practice, we mostly declare properties with private access modifier.
  * we access parents constructor through super from child constructor.

54) Working with inheritance - Part 3 -
  * added code in code files

55) Working with inheritance - Part 4 -
  * added code in code files

56) Working with inheritance - Part 5 -
  * overriding method by adding method in child. to overriding method, we need same method signature. 
  * added code in code files

57) Composition -
  * composition helps to depict real life scenario.
  * shows computer example in terms of composition.
  * laptop will have multiple properties like - screen, processor, ram, hardDrive, graphicsCard, opticalDrive, keyboard.
  * processor and graphicsCard will have more details data, so for them we will create class. And for other, we can use simple data type like string.

58) Composition setting up -
  * composition will be really helpful than inheritance

59) Working with compotsition- 
  * showed how to access method from object of object. we can use getters for that, bcz of properties are private.\

60) Adding functionality -
  * while creating object if we have object in object, we have to create first internal object and then outermost. like below -
    Process processor = new Processor("intel", "7200", 7, 4, 4, "6MB", "2.5GHz", "2.5GHz", "2.5GHz")
    Laptop lappy = new Laptop(16.5, processor, "DDR4", "2TB", null, "backlit");        // processor pointing to above recently created object.

61) Encapsulation - Part 1 -
  * Encapsulation - we can easily access and modify value of properties from object. so to restrict, we have to use encapsulation. 
  * Main use of encapsulation is to give shell to the data which is there in object inside. To hide information from outside of world.
  * 1) use private modifier
  * Encapsulate data should not be in direct contact with outer world. Data needs to encapsulated inside the object itself. rather use getter/setter and constructor.

  public class Hello {
    public static void main(String[] args){
      Person john = new Person();
      System.out.println(john);    // john object with default data
      Person pooja = new Person();
      System.out.println(pooja);   // pooja object
      pooja.setAge(-30);
      System.out.println(pooja);  //  pooja object
    }
  }

  public class Person {
    private String name;
    private int age;
    private String gender;

    public Person(){
      this.name = "XYZ";
      this.age = 25;
      this.gender = "male";
    }
    public Person(String name, int age, String gender){
      this.name = name;
      this.age = age;
      this.gender = gender;
    }

    public boolean setAge(int age){
      if(age >= 0 && age <= 100){
        this.age = age;
         return true;
      }
      return false;
    }
  }

62) Encapsulation - Part 2 -
  * code is added in above

63) Polymorphism - Part 1 -
  * shows polymorhism by using parents method, when child doesn't have its own.

64) Polymorphism - Part 2 -
  * 

66) Interfaces -
  * using interface, we can apply rules and regulations to our class. so we can create standardized application.
  * using interface, we can put apply rules about method name and methods return type.
  * In interface, we will have only declaration.
  * ex.
    public interface Phone {
       public String processor;
       public String OS;
       public int spaceInGB;
    }
    public class OnePlus5 implements Phone {
      // implement all methods which is listend in above interface
    }
    public class Hello {
   Phone phone1 = new OnePlus5();  // use "Phone" interface and "OnePlus5" class to create object (  we can use interface as data type of object and still working ), using it, we will create polymorphism example
     phone1.processor();     
    }
  * using it, we can standardized application and apply concept of polymorphism.
  * here, method signature is important, so we can skip access modifier in interface.

  67) Abstract Class - Introduction -
  * Interface and Abstract class both provide abstraction. (interface provide only complete abstraction, not implementation. Implementation for interface is done only in class.)
  * in abstract class, we can have implementation and abstract method also.
  * abstract keyword with class makes class "a abstract class".
  * abstract keyword with method makes class "a abstract method".
  * when classes have "is a" connection, then we have to use "abstract class". And for something else, we can use "Interface".
  * relationship between class and interface is "can relationship".
  * to implement multiple inheritance, we have to use "interface"
  * ex.
      public class Hello {
         Person john = new Vegan();
         john.speak();
         john.eat();
         System.out.println("**************");
         Person mia = new NonVegan();
         mia.speak();
         mia.eat();
      }

     // abstract class can implement interface. we can skip implementation of interface method in abstract class
      public abstract class Person implements IsAlive, LiveLife {
         public void speak(){
             System.out.println("************** check speak");
         }
         public abstract void eat();
         public void breathe(){
             System.out.println("************** can breathe");       
         }
         public void message(){
             System.out.println("************** can message");       
         }
      }
      public class Vegan extends Person {
          public void eat(){
             System.out.println("************** eat vegan");
          }
      }
      public class NonVegan extends Person {
          public void eat(){
             System.out.println("************** eat NonVegan");
          }
      }
      public inteface IsAlive {
          void breathe();
      }
      public interface LiveLife {
          void message();
      }

68) Multiple inheritance using interfaces -
  * Multiple inheritance using classes can create ambiguity.
  * Multiple inheritance with interfaces cannot create any issue. bcz in interfaces, there's no implementation.
  * code added in above example.

70) Inner classes -
  * Inner classes have multiple types. But in this video, we will discuss about non static inner class.
  * Inner classes 
  * ex.
        public class Door {
           private Lock lock;
           public Door(){
              this.lock = new Lock(true);
           }
           public void shopStatus(){
              if(lock.getLock()){
                 System.out.println("Shop is closed");
              } else {
                 System.out.println("Shop is opened");
              }
           }
           public class Lock {
             private boolean lock;
             public Lock(boolean lock){
               this.lock = lock;
             }
             public void setLock(boolean lock){
               this.lock = lock
             }
             public boolean getLock(){
               return this.lock;
             }
           }
        }

        public class Shop {
            public static void main(String[] args){
               Door door = new Door();
               door.shopStatus();   // shop is closed
               door.getLock().setLock(true);    
               door.shopStatus();    // true
            }
        }


  70) Types of nested class -
  * types of nested class - static and non-static 
  * non-static has 3 types - Member inner class, Local inner class, Anonymouse inner class
  * member inner class - non-static class inside a non-static class
  * Local inner class - class inside scope of block ( block might be method as well)
  * Anonymous inner class - nameless class inside of class. it's used once in lifetime.
  * non-static nested class known as inner class, bcz instance is inside instance.
  * Static nested class - A static class is a class that is created inside a class, is called a static nested class in Java. It cannot access non-static data members and methods. It can be accessed by outer class name.


  71) Local Inner class - 
  * ex.
      public class Door {
         public boolean isLocked(String key){
            class Lock {                                     // this is hidden from outside world. 
                public boolean isLocked( String key) {
                   if(key.equals("qwerty")){
                     return false;
                   } else {
                     return true;
                   }
                }
            }
            return new Lock().isLocked(key);
         }
      }
      public class Shop {
        public static void main(String[] args){
           Door door1 = new Door();
           System.out.println(door.isLocked("test"));  //true
           System.out.println(door.isLocked("qwerty"));  //false
           if(door.isLocked(args[0])){
              System.out.println("shop is closed");   
           } else {
              System.out.println("shop is opened");  
           }
        }
      }

  72) Anonymous object -
  * when we want to use object once in lifetime, then we can use anonymous object.
  * In nameless object, we can directly create object and use methods of it without storing in variable.
  * ex.
           if(new Door().isLocked(args[0]){      // replace this code in above code

  73) Anonymous inner class - 
  * ex.
      public abstract class Lock {
          public abstract boolean isUnlocked(String keycode);
          public void test(){
             System.out.println("test");
          }
      }
      public class Door{
         // class implementation added after "new Lock()" for anonymous inner class
         Lock lock = new Lock(){
           @override
           public boolean isUnlocked(String keycode){
              if(keycode.equals("qwerty")){
                  return true;
              } else {
                  return false;
              }
           }
         };
        public Lock getLock(){
           return lock;
        }
      }

      public class Shop {
        public static void main(String[] args){
           Door door1 = new Door();
           door1.getLock().test();   //test
           if(door.getLock().isUnlocked("qwerty")){
               System.out.println("we are open");  
           } else {
               System.out.println("we are close");  
           }
        }
      }


  74) Advantage of inner class
  * Better real life depiction
  * Inner class could be used only by outer class
  * Easy access, as inner object implicitly available inside outer object

  75) User Input -
  * to take data, from user we can use Scanner class.
  * ex.
       System.out.println("Enter name");
       Scanner sc = new Scanner(System.in);
       // String name = sc.nextLine();   // on enter, it will go to directly next sysout operations
       String name = sc.next();   //will wait till user didn't provide proper name
       sc.close();  // close operation
       System.out.println("Hey there "+ name +", have a nice day");

       
       System.out.println("Enter age");
       Scanner sc = new Scanner(System.in);
       int name = sc.nextInt();   //will wait till user didn't provide proper name
       sc.close();  // close operation
       System.out.println("age is " + age);
  
  76) Static elements -
  * static variable have independent memory location.
  * static variable have shared between all object.
  * we can access static variable directly without creating object.
  * we can't mark class as static.
  * ex.
       public class TestStatic {
          private static int staticVariable = 0;

          public int getStaticVariable(){
             return staticVariable;
          }
          public static void setStaticVar(int staticVariable){
             TestStatic.staticVariable = staticVariable;
          }
       }
        void main(){
          System.out.println("age is " + TestStatic.staticVariable);
        }

  77) Static inner class -
  * we can use static with class, when u write that class inside of another class.
  * true static inner class means everything inside of class is static.
  * ex.
      public class Outer {
        public static class Inner {
          public static int x = 10;
          public static void testMethod(){
             System.out.println("Testing inner class");
          }
        }
      }

      public static void main(String[] args){
        Outer.Inner.testMethod();           //  Testing inner class
        System.out.println("x value" + Outer.Inner.x);        // 0
      }

  78) Static Inner class - Part 2 -
  * ex.
       public class Outer {
         public static void testOuterMethod(){
            System.out.println("Value of inner class variable: "+ Inner.x);
            Inner.testingInnerMethod();
         }
         public static class Inner{
            public static int x = 10;
            public static void testingInnerMethod() {
               System.out.println("Testing inner class method");
            }
         }
       }
     
       public static void main(String[] args){
          new Outer().testOuterMethod(); // can call in another way - Outer.testOuterMethod(); 
       }

  79) Final keyword -
  * Final keyword helps to declare and initialize once only. It won't allow reassign or setter method also.
  * ex.
          public class B {
             public final int x = 10;
          }

  80) Final keyword with method and class -
  * we can't override method in child class which is final in parent class.
  * Suppose, if we need all properties and method should be final, then we can assign final keyword directly to class itself.
  * final class won't work as "parent class"

  81) Packages -
  * why packages required - to better organize files and to reduce name conflicts.
  * How java package system works - Showing mulitple class with same name but with different path.

  82) Package continues -
  * Suppose we have 2 Java classes in packages from platform.java and blog.Java.
  * so we can specify path of module, instead of class name.
  * ex.
       org.studyeasy.platform.Java platform = new org.studyeasy.platform.Java()

  83) Scope -
  * 
