constructor
properties
methods		// method, getter, setter
interface
abstract class
access modifier	//java

------------------------------------------------------------------------------
Learn Android App Development in both Java &amp; Kotlin Languages. You'll master Android from ZERO to HERO

1) Java or Kotlin-
  Java -
    * Java offers maturity. android has numerous libraries in java
    * Java code compiles to byte code that is optimized for JVM
    * Java uses for multiple level apps

  Kotlin -
    * kotlin known for its concise and expressive syntax, reducing boilerplate code
    * kotlin provides built in null safety features, helping to prevent common runtime crashes by catching null pointer exception at run time.

7) Changing Android Studio theme -
* in the open project, we have customize tab. Click on it, and you will find theme

8) Android Studio User Interface -


9) The Editors -
* telling about multiple components of Android studio like layout editor,Editor Gutter Area, Validation and makrer sidebar, code editor area, palette, component tree, toolbar

10) The Editors of Android Studio -
* same as above

11) Project Structure- 
* Every app project must have an Android manifest XML file.
* The manifest file describes essential information about your app to the Android Build tools, OS.
* java folder
* res folder - 
    1) drawable -contain images
    2) layout - store layouts
    3) mipmap - for placing app launcher icon. Other drawable assets you use should be placed in the relevant drawable folders
* values - contain many files of color, string and many
    * color.xml is xml file to store color
* strings - can define string in one place

12) Gradle -
* gradle build scripts used for configuring and building application
* used to define process, dependancies and other project specific configuration.
* build.gradle.kts (Project level) -  
    * responsible for build process for entire android project
    * specifies settings and dependancies that are common to all modules within project.
    * .kts indicates that its written in kotlin, and uses kotlin DSL (Domain Specific Language) for gradle.
* build.gradle.kts (App level) -  
    * specific build setting for your android app Module
    * includes dependancies, libraries, compileOptions, and other module specific configurations


13) 
* to fix issue of same class - 
    * update android sdk to latest and 
    * use invalidate cache.

14) 


15) 
* sharing process of creating Java module and tried to run it.
* first created new module using "new" of "file" menu.


16) comments
*   "//" 
*   /*
    * comments
    **/

17) Main method syntax
* main - is the main method which is called on application opening

18) Java output -
public class Person {
  public static void main(String[] args){
      System.out.println("this is log");
  }
}

19) Variables -
* variable - can hold many things inside of it.
* int age = 25;


22) Data types -
* define the type of data that a variable can hold
* 2 categories of data type -
    * Primitive data type - 
	* 8 data type available (byte, short, int, long(use L), float(use f), double(use d), char( 0 - 255, single character using single quote ), Boolean) 
	* basic data type in Java and represent simple values
    * NonPrimitive Data type - Array, String, Class, etc.


21) Numbers -
Data Type	      Description
byte	          Stores whole numbers from -128 to 127
short  	        Stores whole numbers from -32,768 to 32,767
int	            Stores whole numbers from -2,147,483,648 to 2,147,483,647
long	          Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	          Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double	        Stores fractional numbers. Sufficient for storing 15 to 16 decimal digits
boolean	        Stores true or false values
char	          Stores a single character/letter or ASCII values

int y = 23;

24) Decimals -
* float - is 32 bit with single precission floating point number
* double - is 64 bit with double precission floating point number
float pi = 3.14F;
double pi2 = 2.444455555;

25) Boolean -
* boolean val = true;

26) Characters -
* char m1 = 'A';
  char m2 = '8';
  char m3 = '$';
  char m4 = '\n';

27) type casting -
* type casting - converting  value of 1 data type to another
* implicit and explicit type casting
* Implicit - automatically converted from integer to double because there is no data loss.
  int numInt = 10;
  double numDouble = numInt;      //10.0
* explicit - need developer to explicit convert  from one type to another. when we want value to convert from larger data type to smaller data type
  double pi = 3.14;
  int numPi = (int) pi;		// 3

* int myInt = 5;
  char myChar = (char) (myInt + 'A');	//70


28) Operators -
* ( + - * / % )
* ( ==  !=  >  <   >=   <=  )
* ( &&  ||  ! )


29) Strings -
* string are objects from java.lang string class, which means they have a lot of built in functionalities for working with text.
* String hello = "Hello world";
* concatenating string -  " + "
* int length = hello.length();

30) Conditional Statements -
* if else code
* 

31) Switch Statement -
* ex.
    String day = "sunday";
		
	switch(day){
            case "monday":
                	System.out.println("1");
            break;
            case "tuesday":
                	System.out.println("2");
            break;                              // to break execution
            case "sunday":
                	System.out.println("7");
            break;
            default:                            // default case
                	System.out.println("8");
        }
* Sometimes you will want different switch cases to use the same code.
* If multiple cases matches a case value, the first case is selected.
* If no matching cases are found, the program continues to the default label.
* Switch cases use strict comparison (===).

32) While loop -
* syntax -
	while(condition){
		// code to be executed repeatedly as long as condition is true
	}
* ex.
	byte i = 0;
        while (i < 10){
            System.out.println(i);
            i++;
        }

33) For loop - 
* ex.
	for(int j = 0; j <= 5; j++){
            System.out.println(j);
        }

34) Break and Continue keywords -
* break used to break execution and skip loop
* continue used to break execution for that iteration only.

35) Arrays -
* int[] numArr = new int[5];
* numArr[0] = 10;
System.out.println("Element at index o: " + numArr[0]);

36) For Each loop - 
* syntax -
	for(dataType element: collection/Array){
		//code to execute
	}
*  for(int num: numArr){
      System.out.println(""+ num);
   }

37) Multidimensional Array -
*       int[][] arr1 = new int[3][3];
        arr1[0][0] = 1;
        arr1[0][1] = 2;
        arr1[0][2] = 3;
        arr1[1][0] = 4;
        arr1[1][1] = 5;
        arr1[1][2] = 6;
        arr1[2][0] = 7;
        arr1[2][1] = 8;
        arr1[2][2] = 9;
* int[][] arr2 = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
}


38) Methods -
* types of method = user-defined methods and Standard library methods
* declare method - 
    returnType methodNAme(){
      //code
    }
    static int getAge(){
      return age;
    }
    void main(){
	getAge()
    }

39) Returning type of Methods -
* static int addNumber(int x, int y){
  return x + y;
}

40) Method parameters -
static int getSum(int x, int y){
  return x + y
}
void main(){
	getSum(10, 20)	// 30
}


41) Method Overloading - 
* same method name but with different parameter
* static int getNum(int x, int y){
    return x + y
  }
* static double getNum(double x, double y){
    return x + y
  }


42) classes -
* java is object oriented programming language
* object is any entity that has state and behaviour.
* class is blueprint of objects.
* showed car class with method and properties
class Car {
    // states
    int year;		
    int speed;

    //methods
    void accelerate(){
        speed += 10;
    }
    void brake(){
        speed -= 10;
    }
}

43) Objects -
* syntax - className object = new className();
* Car audi = new Car();    // to create object from class using constructor method
        audi.speed = 180;
        audi.year = 2023;
        audi.accelerate();
        audi.accelerate();
        audi.brake();
        System.out.println(""+ audi.speed);

44) Constructor
* used to create and initialize objects when they are first created.
        Car audi = new Car(2024, 280);

//constructor in class Car
    public Car(int syear, int sspeed){
        year = syear;
        speed = sspeed;
    }

45) Access modifiers -
* 4 - public, private, protected, default
* private - available for only that class
* protected - available for same class and subclass. not available for outside of package
* default - no access modifier is specified, its considered as default access level. A class method or field with default access can be accessed only by classes within the same package.
* modifier play major role in encapsulation

46) Encapsulation -
* way to protect data (variables, methods of data from being accessed and modifier directly by other classes)
* we can access private properties through methods ( getters and setters )
    public int getYear(){
        return year;
    }
    public void setYear(int passYear){
        year = passYear;
    }

47) Inheritance -
* extends of properties of parent class
* super variable used for access parent class properties and methods

public class Vehicle {
    void start(){
      //start vehicle
    }
    void stop(){
      // stop vehicle
    }
    int wheels;
    public Vehicle(int nWheels){
        this.wheels = nWheels;
    }
}

public class Car extends Vehicle{
    public Car(){
      super(4)
    }
}

48) this
* "this" variable is a reference variable that is used to refer to the current instance of class.
* can be used within an instance method or a constructor to refer to the specific object that it is invoking the method or creating the instances.
* Car audi = new Car("audi");
  audi.start();  // vehicle method
  audi.honk();  // car method
  audi.stop();  // vehicle method

* in class car, to override method of vehicle
  @Override    //not mandatory
  void start(){
      //code
  }
* can't override methods declared as final and static.

49) Method Overriding -
* subclass overrides the method of superclass
* ex.
    public class Vehicle {
      void start(){   System.out.println(" start ")}
    }
    public class Car extends Vehicle {
      @override
      void start(){  System.out.println(" car start") }   // method overriding
    }
* we can't override the methods declared as final and static.
* we should use to override abstract method


50) Polymorphism
* is a concept that allows objects of different classes to be treated as objects of a common parent class.
* check Vehicle is placed in the starting.
  Vehicle v1 = new Car("audi");    // Car class
  Vehicle v2 = new Truck(6);        // Truck class
* polymorphism allows same method to work differently for different object.
* method overloading and method overriding shows polymorphism

51) Abstraction -
* abstract class won't allow you to create instance from it.
* public abstract class Vehicle {
      abstract void brake();    // bcz of this abstract method, editor will suggest to implement same method in child class.
}
* allows you to use classes and objects without worrying about their implementation.

52) Interfaces -
* is like a contract or a set of rules that a class can promise to follow.
* defines set of methods, signatures, methods without implementation that any class implementing the interface must provide.
* prviodes a way to achieve abstraction and define a common behaviour that multiple classes can share in vehicle class.
* ex.
    public interface VehicleInterface {
      void startEngine();
      void brake();
    }
    public class Car implements VehicleInterface {
      void startEngine(){
        System.out.println("")
      }
      void brake(){
        System.out.println("")
      }
    }
* multiple inheritance is not possible in Java, we can acheive this through interface


53) Abstraction Example - using Interface 
* 

54) Exercise 1-
* public class MainClass {
    public static void main(String[] args) {
        MainClass c1 = new MainClass();
        Scanner s1 = new Scanner(System.in);
        System.out.println("Enter two numbers");
        int num1 = s1.nextInt();
        int num2 = s1.nextInt();
        c1.divide(num1, num2);        
    }

    public int divide(int num1, int num2) {    
        System.out.println("Dividing " + num1 + " by " + num2);
        System.out.println("reminder " + num1%num2+ " division " + num1/num2);
    }
}

55) Exercise 2-
* 



64) Views and View Group-
* view Group denotes container and view is small view.
* ViewGroup is special subclass of the view class that serves as a container for multiple views

65) UI editing in Android Studio -
* shows use of code, split and design mode

66) Views Attributes -
* We use these Attributes to define how each UI element should appear and behave.
* id - assign unique id to view.
* width and height - to set height and widthl.
* above are constraintLayout Attributes.
* here, he shows how to play with xml file and with Attributes panel


67) TextView - Formatting texts -
* its part of android widget framework
* Attributes are defined in XML layout files that can also be modified programmatically in Java and kotlin code.
* common Attributes - layout_width, layout_height, textColor, textStyle, text, gravity, typeface, textAllCaps, padding, layout_margin, background, inputType

68) Declaring and initialising Views -
* its refer to the process of creating referrences to UI elements or the views or the views defined in layout XML files so that you can interact with them programmatically
* ex.         android:id="@+id/myTextView" - add id to xml file
* now, we need to access those element using id with the help of "findViewById"
  TextView myTextView = findViewById(R.id.myTextView);
  myTextView.setText("Hi From Java code");


69) EditText -
* where user can enter text. Fundamental input control in android.
* Attributes - layout_margin, hint, inputType, maxLength, textColor, textSize, textStyle, layout_editor_absoluteX, layout_editor_absoluteY
* ex.
        EditText myEditText = findViewById(R.id.editTextId);
        String inputString = myEditText.getText().toString();

        myTextView.setText(inputString);


70) Buttons -
* it is an integral part of Android app user interfaces and are widely used to create interactive interfaces.

71) listeners in Android -
* attach listeners on Buttons
* ex. 
  myBtn.setOnClickListener()

72) ImageView - Displaying images -
* used to show images and drawable. part of android framework
* Attributes - src , 