
Day 2 Code-

1) fun main(){
    println("enter age");
    var age = readln().toInt();
    if(age >= 40){
        println("too young")
    } else if(age >= 18){
        println("can enter")
    } else {
        println("not allowed")
    }
    var count = 0
    while (count < 10){
        println("count $count");
        count++;
    }
}

2) fun main(){
    var playerChoice = "";
    var computerChoice = "";
    println("enter choice");
    playerChoice = readln();
    val randomNumber = (1..3).random();
    val rock = "rock";
    val paper = "paper";
    val scissors = "scissors";

    when (randomNumber) {
        1 -> {
            computerChoice = rock;
        }
        2 -> {
            computerChoice = paper;
        }
        3 -> {
            computerChoice = scissors;
        }
    }
    println("computer choice $computerChoice");
    val winner = when {
        playerChoice == computerChoice -> "Tie"
        playerChoice == rock && computerChoice == scissors -> "Player"
        playerChoice == paper && computerChoice == rock -> "Player"
        playerChoice == scissors && computerChoice == paper -> "Player"
        else -> "Computer"
    }
    println("winner is $winner");

}



2) 
data class CoffeeDetails (val sugarCount: Int, val name: String, val size: String, val creamAmount: Int)
fun main(){
//  create object of class
    var daisy: Dog = Dog("D");
    println(daisy.bark());

    val coffeeForDenis = CoffeeDetails(4, "Denis", "large", 3);
    makeCoffee(coffeeForDenis);
}

fun makeCoffee(coffeeForDenis: CoffeeDetails){
    if(coffeeForDenis.sugarCount == 1){
        println("spoons count ${coffeeForDenis.sugarCount} for ${coffeeForDenis.name} with size ${coffeeForDenis.size} and creamamount ${coffeeForDenis.creamAmount}")
    } else {
        println("spoon count ${coffeeForDenis.sugarCount} for ${coffeeForDenis.name} with size ${coffeeForDenis.size} and creamamount  ${coffeeForDenis.creamAmount} ")
    }
}
class Dog(val name: String) {
    init {
        bark();
    }
    fun bark(){
        println("bark $name")
    }
}


3)
fun main(){
//  immutable list - can't change after initialization
    val shoppingList = listOf("Processor", "Ram", "mouse", "keyboard");
//  mutable list
    val mutableLists = mutableListOf("Processor", "Ram", "mouse", "keyboard");
    mutableLists.add("Speaker");
    println(mutableLists);
    mutableLists.removeAt(2);
    println(mutableLists);
    mutableLists.removeAt(1);
    println(mutableLists);
    mutableLists.add(1, "mouse");
    println(mutableLists);
    mutableLists[2] = "headset";
    println(mutableLists);
    mutableLists.set(1, "Cooling Fan");
    println(mutableLists);
    println(mutableLists.contains("headset"));

    for(item in mutableLists){
        println(item);
        if(item == "headset"){
            break;
        }
    }
    for(index in 0 until mutableLists.size){
        println("index $index, and value ${mutableLists[index]}")
    }
//    for(index in 0 .. mutableLists.size){
//        println("index $index, and value ${mutableLists[index]}")
//    }

    val userBankAccount = BankAccount("Denis", 23000.02);
    userBankAccount.deposit(3000.90);
    userBankAccount.deposit(3000.90);
    userBankAccount.withdraw(200.90);
    userBankAccount.displayHistory();
}

class BankAccount( val name: String, var balance: Double) {
    private val history = mutableListOf<String>();  //visible within class only, bcz of private
    fun withdraw(amount: Double){
        if(amount < balance){
            balance -= amount
            history.add("$name withdraw $$balance");
        } else {
            history.add("$name won't be able to withdraw amount");
        }
    }
    fun deposit(amount: Double){
        balance += amount;
        history.add("$name deposited $$balance");
    }
    fun displayHistory(){
        println(history);
        for (item in history){
            println("$item");
        }
    }
}
