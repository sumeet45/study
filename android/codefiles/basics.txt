
Day 2 Code-

1) fun main(){
    println("enter age");
    var age = readln().toInt();
    if(age >= 40){
        println("too young")
    } else if(age >= 18){
        println("can enter")
    } else {
        println("not allowed")
    }
    var count = 0
    while (count < 10){
        println("count $count");
        count++;
    }
}

2) fun main(){
    var playerChoice = "";
    var computerChoice = "";
    println("enter choice");
    playerChoice = readln();
    val randomNumber = (1..3).random();
    val rock = "rock";
    val paper = "paper";
    val scissors = "scissors";

    when (randomNumber) {
        1 -> {
            computerChoice = rock;
        }
        2 -> {
            computerChoice = paper;
        }
        3 -> {
            computerChoice = scissors;
        }
    }
    println("computer choice $computerChoice");
    val winner = when {
        playerChoice == computerChoice -> "Tie"
        playerChoice == rock && computerChoice == scissors -> "Player"
        playerChoice == paper && computerChoice == rock -> "Player"
        playerChoice == scissors && computerChoice == paper -> "Player"
        else -> "Computer"
    }
    println("winner is $winner");

}



3) 
data class CoffeeDetails (val sugarCount: Int, val name: String, val size: String, val creamAmount: Int)
fun main(){
//  create object of class
    var daisy: Dog = Dog("D");
    println(daisy.bark());

    val coffeeForDenis = CoffeeDetails(4, "Denis", "large", 3);
    makeCoffee(coffeeForDenis);
}

fun makeCoffee(coffeeForDenis: CoffeeDetails){
    if(coffeeForDenis.sugarCount == 1){
        println("spoons count ${coffeeForDenis.sugarCount} for ${coffeeForDenis.name} with size ${coffeeForDenis.size} and creamamount ${coffeeForDenis.creamAmount}")
    } else {
        println("spoon count ${coffeeForDenis.sugarCount} for ${coffeeForDenis.name} with size ${coffeeForDenis.size} and creamamount  ${coffeeForDenis.creamAmount} ")
    }
}
class Dog(val name: String) {
    init {
        bark();
    }
    fun bark(){
        println("bark $name")
    }
}


4)
fun main(){
//  immutable list - can't change after initialization
    val shoppingList = listOf("Processor", "Ram", "mouse", "keyboard");
//  mutable list
    val mutableLists = mutableListOf("Processor", "Ram", "mouse", "keyboard");
    mutableLists.add("Speaker");
    println(mutableLists);
    mutableLists.removeAt(2);
    println(mutableLists);
    mutableLists.removeAt(1);
    println(mutableLists);
    mutableLists.add(1, "mouse");
    println(mutableLists);
    mutableLists[2] = "headset";
    println(mutableLists);
    mutableLists.set(1, "Cooling Fan");
    println(mutableLists);
    println(mutableLists.contains("headset"));

    for(item in mutableLists){
        println(item);
        if(item == "headset"){
            break;
        }
    }
    for(index in 0 until mutableLists.size){
        println("index $index, and value ${mutableLists[index]}")
    }
//    for(index in 0 .. mutableLists.size){
//        println("index $index, and value ${mutableLists[index]}")
//    }

    val userBankAccount = BankAccount("Denis", 23000.02);
    userBankAccount.deposit(3000.90);
    userBankAccount.deposit(3000.90);
    userBankAccount.withdraw(200.90);
    userBankAccount.displayHistory();
}

class BankAccount( val name: String, var balance: Double) {
    private val history = mutableListOf<String>();  //visible within class only, bcz of private
    fun withdraw(amount: Double){
        if(amount < balance){
            balance -= amount
            history.add("$name withdraw $$balance");
        } else {
            history.add("$name won't be able to withdraw amount");
        }
    }
    fun deposit(amount: Double){
        balance += amount;
        history.add("$name deposited $$balance");
    }
    fun displayHistory(){
        println(history);
        for (item in history){
            println("$item");
        }
    }
}




5) 
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            UnitconverterTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    UnitConverter()
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun UnitConverterPreview() {        // name should end with Preview
    UnitConverter()
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UnitConverter(){
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
    // Here all the elements will be stacked below each other
//        Greeting(name = "Android")
//        Greeting(name = "Android")
        Text(text = "Unit Converter", modifier = Modifier.padding(10.dp))
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(value = "Enter value here", onValueChange = {})

        Spacer(modifier = Modifier.height(16.dp))
        Row {
            // Here all the elements will be placed beside each other in 1 row
//            Greeting(name = "Sumeet")
//            Greeting(name = "Sumeet")
//            val context = LocalContext.current;

            Box {
                Button(onClick = {}) {
                    Text(text = "Select")
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "")
                }
                DropdownMenu(expanded = true, onDismissRequest = { /*TODO*/ }) {
                    DropdownMenuItem(text = { Text(text = "Centimeters") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Meters") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Feet") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Millimeters") }, onClick = { /*TODO*/ })
                }
                
            }
            Box {
                Button(onClick = {}) {
                    Text(text = "Select")
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "")
                }
                DropdownMenu(expanded = true, onDismissRequest = { /*TODO*/ }) {
                    DropdownMenuItem(text = { Text(text = "Centimeters") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Meters") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Feet") }, onClick = { /*TODO*/ })
                    DropdownMenuItem(text = { Text(text = "Millimeters") }, onClick = { /*TODO*/ })
                }
            }

            Spacer(modifier = Modifier.height(16.dp))
//            Button(onClick = {
////                Toast.makeText(context, "Thanks for clicking", Toast.LENGTH_LONG).show()
//            }) {
//                Text(text = "Click here")
//            }
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Result")
    }
}




6) 
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            UnitconverterTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    UnitConverter()
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun UnitConverterPreview() {        // name should end with Preview
    UnitConverter()
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UnitConverter(){
    var inputValue by remember { mutableStateOf("") }
    var outputValue by remember { mutableStateOf("") }
    var inputUnit by remember { mutableStateOf("Centimeters") }
    var outputUnit by remember { mutableStateOf("Meters") }
    var iExpanded by remember { mutableStateOf(false) }
    var oExpanded by remember { mutableStateOf(false) }
    val conversionFactor = remember { mutableStateOf(0.01) }
    val oConversionFactor = remember { mutableStateOf(1.00) }

    fun convertUnits(){
//        ?: elvis operator
        val inputValueDouble = inputValue.toDoubleOrNull() ?: 0.0;
        val result = (inputValueDouble * conversionFactor.value * 100.0 / conversionFactor.value).roundToInt() / 100.00
        outputValue = result.toString()
    }

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
    // Here all the elements will be stacked below each other
//        Greeting(name = "Android")
//        Greeting(name = "Android")
        Text(text = "Unit Converter", modifier = Modifier.padding(10.dp))
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(value = inputValue, onValueChange = {
            inputValue = it
            convertUnits()
        },
            label = { Text(text = "Enter Value")})

        Spacer(modifier = Modifier.height(16.dp))
        Row {
            // Here all the elements will be placed beside each other in 1 row
//            Greeting(name = "Sumeet")
//            Greeting(name = "Sumeet")
//            val context = LocalContext.current;
            //Input Box
            Box {
                // Input Button
                Button(onClick = { iExpanded = true }) {
                    Text(text = inputUnit)
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "")
                }
                DropdownMenu(expanded = iExpanded, onDismissRequest = { iExpanded = false }) {
                    DropdownMenuItem(text = { Text(text = "Centimeters") }, onClick = {
                        iExpanded = false
                        inputUnit = "Centimeters"
                        conversionFactor.value = 0.01
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Meters") }, onClick = {
                        iExpanded = false
                        inputUnit = "Meters"
                        conversionFactor.value = 1.0
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Feet") }, onClick = {
                        iExpanded = false
                        inputUnit = "Feet"
                        conversionFactor.value = 0.3048
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Millimeters") }, onClick = {
                        iExpanded = false
                        inputUnit = "Millimeters"
                        conversionFactor.value = 0.001
                        convertUnits()
                    })
                }
                
            }
            Box {
                Button(onClick = { oExpanded = true }) {
                    Text(text = outputUnit)
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "")
                }
                DropdownMenu(expanded = oExpanded, onDismissRequest = { oExpanded = false }) {
                    DropdownMenuItem(text = { Text(text = "Centimeters") }, onClick = {
                        oExpanded = false
                        inputUnit = "Centimeters"
                        oConversionFactor.value = 0.01
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Meters") }, onClick = {
                        oExpanded = false
                        inputUnit = "Meters"
                        oConversionFactor.value = 1.00
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Feet") }, onClick = {
                        oExpanded = false
                        inputUnit = "Feet"
                        oConversionFactor.value = 0.3048
                        convertUnits()
                    })
                    DropdownMenuItem(text = { Text(text = "Millimeters") }, onClick = {
                        oExpanded = false
                        inputUnit = "Millimeters"
                        oConversionFactor.value = 0.001
                        convertUnits()
                    })
                }
            }

            Spacer(modifier = Modifier.height(16.dp))
//            Button(onClick = {
////                Toast.makeText(context, "Thanks for clicking", Toast.LENGTH_LONG).show()
//            }) {
//                Text(text = "Click here")
//            }
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Result ${outputValue} ${outputUnit}",
            style = MaterialTheme.typography.headlineMedium)
    }
}


captainGame -
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CaptaingameTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    CaptainGame()
                }
            }
        }
    }
}

@Composable
fun CaptainGame(){
//    val treasureFound = remember { mutableStateOf(0) }//holds value within "treasureFound.value"
    val treasureFound by remember { mutableStateOf(0) } //holds value within "treasureFound"
    val direction = remember { mutableStateOf("North") }
    val stormOrTreasure = remember { mutableStateOf("") }
    Column {
//        Text(text = "Treasures found: ${treasureFound.value}")
        Text(text = "Treasures found: ${treasureFound}")// using by
        Text(text = "Treasures found: ${direction.value}")
        Text(text = stormOrTreasure.value)
        Button(onClick = {
            direction.value = "East"
            if(Random.nextBoolean()){
                treasureFound.value += 1;
                stormOrTreasure.value = "Found a Treasure";
            } else {
                stormOrTreasure.value = "Storm ahead";
            }
        }) {
            Text("Sail East")
        }
        Button(onClick = {
            direction.value = "West"
            if(Random.nextBoolean()){
                treasureFound.value += 1;
                stormOrTreasure.value = "Found a Treasure";
            } else {
                stormOrTreasure.value = "Storm ahead";
            }
        }) {
            Text("Sail West")
        }
        Button(onClick = {
            direction.value = "South"
            if(Random.nextBoolean()){
                treasureFound.value += 1;
                stormOrTreasure.value = "Found a Treasure";
            } else {
                stormOrTreasure.value = "Storm ahead";
            }
        }) {
            Text("Sail South")
        }

        Button(onClick = {
            direction.value = "North"
            if(Random.nextBoolean()){
                treasureFound.value += 1;
                stormOrTreasure.value = "Found a Treasure";
            } else {
                stormOrTreasure.value = "Storm ahead";
            }
        }) {
            Text("Sail North")
        }
    }
}

