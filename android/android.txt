youtube - 
search "Google Developers India" - Android Developer Fundamentals


----------------------------------------------------------------------------------
https://www.youtube.com/watch?v=UmPSe1j9aE4

device type -> smartphone, tablet, wear, tv,
screen size -> small, normal, large, and extra large
screen density -> ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi

what is pixel?
 everything we see on screen is made up of these pixels.
 pixel denoted by "px", unit of pixel.
 single selection/dot is called picture element (PEL)
 picture element in short is called "pixel"
 one pixel is a one physical dot on the screen

screen resolution?
total number of pixel on the screen in horizontal and vertical
ex. 1080 x 1920 

Table
screen category     screen size            screen Resolution
small                 2 - 2.7              at least 426dp x 320dp
normal                2.7 - 4.3            at least 470dp x 320dp
large                 4 - 7                at least 640dp x 480dp
extra large           7 - 10               at least 960dp x 720dp


what is pixel density(dpi)?
pixel/dot > dpi/ppi (dot per inch/pixel per inch /pixel density per inch) 

how dpi effects User Interface?
1) more pixels in 1 inch > more dpi/ppi > clear image
2) less pixels in 1 inch > less dpi/ppi > blur image

pixel density buckets -
ldpi(120 dpi), mdpi(160 dpi), hdpi(240 dpi), xhdpi(320 dpi), xxhdpi(480 dpi), xxxhdpi(640 dpi)

* Always look for more ppi/dpi, not for higher resolution

--------------------------------------------------------------------------------
https://www.youtube.com/watch?v=iBsOakAI2nw

What is device-independent-pixel(dp) & why we use it?
we want to design 1 layout and will give UI which works on all type of screen perfectly.

dp/ dip -
* Abbreviated "dp" or "dip", is a virtual pixel unit, equivalent to one physical pixel on mdpi screen & scaled proportionally on higher or lower density screens
* "dp"/"dip" is unit of "device-independent-pixels"
* like a pixel, "dp" is also unit of Screen measurement
* "dp" is logical measurement, not like pixel one.
* "dp" is independent of Screen density
* "1 dp" = different physcial pixels depending on the device screen
* used to define layout or views dimensions
* we specify dimensions in dp, eg height of button = 100dp
* at runtime, Android framework automatically converts the dp value into px value

dp to px conversion -
* 1dp = 1px on 160dpi(mdpi) screen (hence we call 160dpi is called baseline dpi)
* for other dpi screen, android converts dp into px using this formula,  px = dp*(screen dpi / 160)
* eg. app running on 200 dpi screen
    1px = 1dp * (screen dpi/160)
    1px = 1dp * (200/160)
    1px = 1.25dp

------------------------------------------------------------------------


WsCube Tech - For Android development
1) Android Introduction -
* android is open source, linux-based operating system

What is OS?
* An OS is software programm that enables the hardware to communicate and operate with the software.
* OS is a interface between user and hardware

2) History Of android -
* in Oct 2003, 4 people created Android Inc.
* google acquired android inc. in 2005. In 2008, first android phone released.

3) Android versions A to Z -
* 

4) What is IDE for android -
* android studio for android development

8) What is Front end and Back end in Android app?
* Static and Dynamic app- 
  * Static application based on data which is available in apk. For dynamic app, it's mostly depend on server for its dynamic content.
* 


------------------------------------------------------------------------

7) Setting up our First project -
* adjust setting for android studio
* SDK - Software Development Kit, which is basically a set of softwares tools and libraries.

8) Day 1- Overview of the android studio interface
* giving little intro about Android studio, will tell in depth later videos.

9) Day 1 - understanding gradle -
* gradle fetches required things and helps to build application
* it's bit like package.json.

10) Day 1 - Changing the Scaling in android studio
* adjustin zoom level to see code properly

11) Setting up our Emulator -
* choose model from device manager (Pixel 7
* System image Optoin - choose android system image 
* AVD manager - adjust setting and create device
* run our app firs time with "Hello Android" text
* we have emulator setup and ran our first application in this video

12) Tip of the day -
* we can go through tips provided by android studio on opening editor.
* it will show various tips to developer

13) Changing our code for the first time -
* change "hello world" to "welcome denis"

14) Understanding preview -
* To see preview, without reloading whole application we can update content.

15) Imports and Packages -
* Teaching about imports and packages. 
* like Javascript, we also got packages and libraries readymade, which we import and use it in MainActivity.kt

16) Understanding the MainActivity Oncreate and Composable -
* Giving basic Understanding of MainActivity file. In future, we will go deeper.
* Activity is like whole page. 

17) finishing day 1
* summary - 
* set up android studio, android virtual device, and run app also
* also got high level understanding android studio, MainActivity, and preview also

19) Welcome to day 2

20) Overview of what Rock Paper Scissors is build of

21) Overview of what variables are
* variable - use as storage or container to store data, which we use later in programm
* can hold various types of data
* name for variable should be descriptive
* kotlin take care of how much space will need for variable, we need to create only variable and assign value.

22) Int data type -
* In kotlin, we have multiple type for number with sizes - byte(8), short(16), Int(32), Long(64)
* val one = 1 // Int
  val threeBillion = 1200000000 // Long
  val ch = 1L  // Long
  val ch1: Byte = 1  // Byte
* for byte and short, we need to specify with initialization

23) Running Hello World -
* in it, he states that, main function given already by kotlin. 
* he show how to run programm and give reference of website - https://play.kotlinlang.org/

24) Val vs Var and print its on the console -
* val - for constant (immutable)
* var - for mutable storage

25) Int, long, Short, Byte, and specifying the type manually -
* Kotlin uses given data type. if its not specified then it will take int or long only.
* once variable created with specific data type, you can't add other type of data in it like below.
  var myAge = 35
  myAge = 232323232323232323   // will give error. so while declaring variable myAge, add data type "long"
* val a1: Byte = 12; 
  val s2: Short = 3112;
  val s3: Int = 22323232;
  val s4: Long = 232332323232323232323;

26) Float and double -
* float and double for decimal numbers
* byDefault kotlin uses double
* val pi = 3.13  //double data type on hover
* we can add "f" or "F" at the end of variable declaration.
 val e = 2.8239393f
* val a1: Float = 3.124;
  val a2: Double = 23.22233333;
  var s3 = 1.233f

27) unsigned integers -
* it starts from 0 to 255
* it should be only positive number
* var age: UShort = 35u

28) Booelans true false negation -
* var a : Boolean = true;
* shows how to store boolean value in variable.

29) Char, unicode and Backslash escape character -
* It can store only 1 character and just use single quotes.
* var myChar = 'a'
* var myChar = '\u00AE'

30) Strings -
* In string type, you can add long string in variable.
* strings are objects
* each string has own methods also like we have in JS.
* let a = "Very long string in string variable"
* a.lowercase()
* var name = "sumeet";
  println(name + " shedge")

31) If else statement -
* showed if else statement in kotlin

32) ReadIn and toInt to convert strings into int variables -
* var enteredValue = readln()
  age = enteredValue.toInt()
if(age > 18){
  println("you can enter")
} else {
  println("nope, you won't")
}

33) Else if and the in keyword -
* else if condition added in above if statement
* one more way - 
using "in" operator
if( age in 18 ..  39){
 println("you can enter")
}

34) Rock Paper Scissors Part 1 - Getting the computers choice -
* Added if else condition and read from user input

35) Rock Paper Scissors Part 2 - Finding out the winner -
* update suggestion of "when" with "if else"
* added if conditions 

36) RPS Part 3 - Presenting the winner -
* update code to show winner

37) Day 2 - While loops with counters -
* code added to show how while loop works

38) Day 2 - while loops with user input -
* code improved to take user input using "readln" and check within while loop. If condition satisfie, then execute code.
