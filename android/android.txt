youtube - 
search "Google Developers India" - Android Developer Fundamentals


----------------------------------------------------------------------------------
https://www.youtube.com/watch?v=UmPSe1j9aE4

device type -> smartphone, tablet, wear, tv,
screen size -> small, normal, large, and extra large
screen density -> ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi

what is pixel?
 everything we see on screen is made up of these pixels.
 pixel denoted by "px", unit of pixel.
 single selection/dot is called picture element (PEL)
 picture element in short is called "pixel"
 one pixel is a one physical dot on the screen

screen resolution?
total number of pixel on the screen in horizontal and vertical
ex. 1080 x 1920 

Table
screen category     screen size            screen Resolution
small                 2 - 2.7              at least 426dp x 320dp
normal                2.7 - 4.3            at least 470dp x 320dp
large                 4 - 7                at least 640dp x 480dp
extra large           7 - 10               at least 960dp x 720dp


what is pixel density(dpi)?
pixel/dot > dpi/ppi (dot per inch/pixel per inch /pixel density per inch) 

how dpi effects User Interface?
1) more pixels in 1 inch > more dpi/ppi > clear image
2) less pixels in 1 inch > less dpi/ppi > blur image

pixel density buckets -
ldpi(120 dpi), mdpi(160 dpi), hdpi(240 dpi), xhdpi(320 dpi), xxhdpi(480 dpi), xxxhdpi(640 dpi)

* Always look for more ppi/dpi, not for higher resolution

--------------------------------------------------------------------------------
https://www.youtube.com/watch?v=iBsOakAI2nw

What is device-independent-pixel(dp) & why we use it?
we want to design 1 layout and will give UI which works on all type of screen perfectly.

dp/ dip -
* Abbreviated "dp" or "dip", is a virtual pixel unit, equivalent to one physical pixel on mdpi screen & scaled proportionally on higher or lower density screens
* "dp"/"dip" is unit of "device-independent-pixels"
* like a pixel, "dp" is also unit of Screen measurement
* "dp" is logical measurement, not like pixel one.
* "dp" is independent of Screen density
* "1 dp" = different physcial pixels depending on the device screen
* used to define layout or views dimensions
* we specify dimensions in dp, eg height of button = 100dp
* at runtime, Android framework automatically converts the dp value into px value

dp to px conversion -
* 1dp = 1px on 160dpi(mdpi) screen (hence we call 160dpi is called baseline dpi)
* for other dpi screen, android converts dp into px using this formula,  px = dp*(screen dpi / 160)
* eg. app running on 200 dpi screen
    1px = 1dp * (screen dpi/160)
    1px = 1dp * (200/160)
    1px = 1.25dp

------------------------------------------------------------------------


WsCube Tech - For Android development
1) Android Introduction -
* android is open source, linux-based operating system

What is OS?
* An OS is software programm that enables the hardware to communicate and operate with the software.
* OS is a interface between user and hardware

2) History Of android -
* in Oct 2003, 4 people created Android Inc.
* google acquired android inc. in 2005. In 2008, first android phone released.

3) Android versions A to Z -
* 

4) What is IDE for android -
* android studio for android development

8) What is Front end and Back end in Android app?
* Static and Dynamic app- 
  * Static application based on data which is available in apk. For dynamic app, it's mostly depend on server for its dynamic content.
* 


------------------------------------------------------------------------

7) Setting up our First project -
* adjust setting for android studio
* SDK - Software Development Kit, which is basically a set of softwares tools and libraries.

8) Day 1- Overview of the android studio interface
* giving little intro about Android studio, will tell in depth later videos.

9) Day 1 - understanding gradle -
* gradle fetches required things and helps to build application
* it's bit like package.json.

10) Day 1 - Changing the Scaling in android studio
* adjustin zoom level to see code properly

11) Setting up our Emulator -
* choose model from device manager (Pixel 7
* System image Optoin - choose android system image 
* AVD manager - adjust setting and create device
* run our app firs time with "Hello Android" text
* we have emulator setup and ran our first application in this video

12) Tip of the day -
* we can go through tips provided by android studio on opening editor.
* it will show various tips to developer

13) Changing our code for the first time -
* change "hello world" to "welcome denis"

14) Understanding preview -
* To see preview, without reloading whole application we can update content.

15) Imports and Packages -
* Teaching about imports and packages. 
* like Javascript, we also got packages and libraries readymade, which we import and use it in MainActivity.kt

16) Understanding the MainActivity Oncreate and Composable -
* Giving basic Understanding of MainActivity file. In future, we will go deeper.
* Activity is like whole page. 

17) finishing day 1
* summary - 
* set up android studio, android virtual device, and run app also
* also got high level understanding android studio, MainActivity, and preview also

19) Welcome to day 2

20) Overview of what Rock Paper Scissors is build of

21) Overview of what variables are
* variable - use as storage or container to store data, which we use later in programm
* can hold various types of data
* name for variable should be descriptive
* kotlin take care of how much space will need for variable, we need to create only variable and assign value.

22) Int data type -
* In kotlin, everything is an object.
* In kotlin, we have multiple type for number with sizes - byte(8), short(16), Int(32), Long(64)
* val one = 1 // Int
  val threeBillion = 1200000000 // Long
  val ch = 1L  // Long
  val ch1: Byte = 1  // Byte
* for byte and short, we need to specify with initialization
* if we don't specify type for number, then it will automatically assign Int type. 
* in kotlin type inferrence are available.
* ex.
    var a: Byte = 2;
    println( a::class.simpleName);   //Byte

23) Running Hello World -
* in it, he states that, main function given already by kotlin. 
* he show how to run programm and give reference of website - https://play.kotlinlang.org/

24) Val vs Var and print its on the console -
* val - for constant (immutable)
* var - for mutable storage

25) Int, long, Short, Byte, and specifying the type manually -
* Kotlin uses given data type. if its not specified then it will take int or long only.
* While assigning data type, consider how much value going to be stored and then give data type.
* once variable created with specific data type, you can't add other type of data in it like below.
  var myAge = 35
  myAge = 232323232323232323   // will give error. so while declaring variable myAge, add data type "long"
* val a1: Byte = 12; 
  val s2: Short = 3112;
  val s3: Int = 22323232;
  val s4: Long = 232332323232323232323;

26) Float and double -
* float and double for decimal numbers
* byDefault kotlin uses double
* val pi = 3.13  //double data type on hover
* we can add "f" or "F" at the end of variable declaration.
 val e = 2.8239393f
* val a1: Float = 3.124;
  val a2: Double = 23.22233333;
  var s3 = 1.233f

27) unsigned integers -
* it starts from 0 to 255
* it should be only positive number
* var age: UShort = 35u

28) Booelans true false negation -
* var a : Boolean = true;
* shows how to store boolean value in variable.

29) Char, unicode and Backslash escape character -
* It can store only 1 character and just use single quotes.
* var myChar = 'a'
* var myChar = '\u00AE'

30) Strings -
* In string type, you can add long string in variable.
* strings are objects
* each string has own methods also like we have in JS.
* let a = "Very long string in string variable"
* a.lowercase()
* var name = "sumeet";
  println(name + " shedge")

31) If else statement -
* showed if else statement in kotlin

32) ReadIn and toInt to convert strings into int variables -
* var enteredValue = readln()
  age = enteredValue.toInt()
if(age > 18){
  println("you can enter")
} else {
  println("nope, you won't")
}

33) Else if and the in keyword -
* else if condition added in above if statement
* one more way - 
using "in" operator
if( age in 18 ..  39){
 println("you can enter")
}

34) Rock Paper Scissors Part 1 - Getting the computers choice -
* Added if else condition and read from user input

35) Rock Paper Scissors Part 2 - Finding out the winner -
* update suggestion of "when" with "if else"
* added if conditions 

36) RPS Part 3 - Presenting the winner -
* update code to show winner

37) Day 2 - While loops with counters -
* code added to show how while loop works

38) Day 2 - while loops with user input -
* code improved to take user input using "readln" and check within while loop. If condition satisfie, then execute code.

42) Day 3 - Amy and her coffee Function -
* Showed how to create function and called from main function.

43) Day 3 - Adding Sugar - Functions with Parameters -
*  Showed function calling with parameter

44) Day 3 - Quiz Challenge Solution - 1 spoon 2 spoons -
* solved "spoon grammer issue" in this video

45) Day 3 - Quiz Challenge solution - who is the coffee for -
* Showed function with another parameter "name", which show user name for whom we prepare coffee

46) Day 3 - BONUS Quiz Challenge Solution - Who is the coffee for with user input -
* Showed function with more details taken from users like name and sugarcount 

47) Day 3 - Functions that return show something -
* Showed simple add function to return value.

48) Day 3 - Quiz challenge solution - Get user Input to add two numbers -
* Showed simple add function which accept number from user

49) Day 3 - More about Return types -
* Showed divide function with double data type

50) Day 3 - Limitation of Output - Return Types
* 

51) Day 3 - Classes Story Time -
* class is blueprint of objects

52) Day 3 - Creating our First class and Object -
* Classes can contain - Constructor and initializer blocks, Functions, Properties, Nested and inner classes, Object declarations
* init in Kotlin - It will get called while creating( Initialization of) object from class
* initializer and function - are class member
* ex. 
     // creating object using Dog class
    val myDog = Dog()
    myDog.bark();

  class Dog {
    init {}
    fun bark(){
        println("bark function")
    }
}

53) Day 3 - Understanding constructors and default values -
* constructor - preceding the initializer or it starts the initializer
* we can pass parameter in class with constructor.
* class Dog constructor(){
 ...
}
* we can omit "constructor" keyword.
* we can give default values in constructor
* object creation process in following direction - constructor, initializer
ex.
class Dog(val name: String, val breed : String, val age: Int = 0) {
    init {}
    fun bark(){
        println("${this.name} bark function with ${this.breed} breed of age ${this.age}")
    }
}

val myDog = Dog("daisy", "b1")
myDog.bark();


54) Day 3 - Accessing and Changing Properties - 
* in constructor, if we want values are immutable, then we should use val and vice versa

55) Day 3 - Data classes and coffee -
* Data classes - Data classes in Kotlin are classes whose main purpose is to hold data
ex -
data class CoffeeDetails(val sugarCount: Int, val name: String, val size: String, val creamAmount: Int){
}
var coffeForSumeet = CoffeeDetails(9,"sumeet", "3", 2)
createCoffee(coffeForSumeet)

fun createCoffee(coffee: CoffeeDetails){
    println("let's create coffee for ${coffee.name}")
    var sugarText = if ( coffee.sugarCount  > 1) "spoons" else "spoon";
    println("use ${coffee.sugarCount} ${sugarText} and creamAmount ${coffee.creamAmount} with ${coffee.size}")
}


56) Day 3 - Finishing Day 3 -
* Tap on shoulder!!!

57) Summary of Day 3 -
* https://tutorials.eu/basic-kotlin-syntax-functions-objects-and-classes-in-kotlin-day-3-android-14-masterclass/

58) Welcome to day 4 -

59) Day 4 - Multiline comments -
* js and kotlin have same commenting style.
* for single line - // This is comment
* for multiline - /* This is comments */

60) Day 4 - Listof and MutableListOf -
* ListOf - create list with given items. 
* ex. val shoppingList = listOf<String>("Processor", "RAM", "SSD", "Screen")
 this is immutable list. It won't change once it created.
* Mutable list example - 
 ex. val mutableList = mutableListOf<String>("Processor", "RAM", "SSD", "Screen")
println(mutableList)
mutableList.add("Graphics Card")
println(mutableList)
mutableList.add(5, "Another")
println(mutableList)

61) Day 4 - Index in Lists -
* index starts in list start with 0.
* Showing adding and removing at specific index with given value.
* ex - 
    mutableList.removeAt(2)
    println(mutableList)
    mutableList.add(3, "RAM11")


62) Day 4 - Modifying specific items in a List -
* To access index in list - 
ex. println(mutableList[2])  //access index
    mutableList[4] = "AMD Card";   //direct accessing
    println(mutableList)

63) Day 4 - Set Metohd on Lists -
* another way to set list item at particular index
* ex. mutableList.set(2,  "ScreenBig")
      println(mutableList)
* we can do above like folllowing also - mutableList[2] = "ScreenBig"

64)  Day 4 - Contains Method - check if item in the list -
* to check whether item is available or not
* println(mutableList.contains("RAM")) // return boolean

65) Day 4 - For loops with lists -
* for loop with list 
* ex.
  for (item in fruitsList){
   println(item)
   if( item == "RAM"){
    break;
   }
 }

66) Day 4 - Getting the index in a for loop -
* Show index and item using for loop
*     for( index in 0 until  fruitsList.size){
        println("item is ${fruitsList[index]} at ${index}")
    }
* one more way -
ex. for( index in 0..4){
        println("item is ${fruitsList[index]} at ${index}")
    }

67) Day 4 - BankAccountApp - Private Keyword and Defining List type -
* private keyword makes it private property which is accessible within class only
* ex.
 class BankAccount(var accountHolder: String, var balance: Double) {
    private  val transactionHistory = mutableListOf<String>()
 }
 fun main(){
   val denisBankAccount = BankAccount("Denis", 4000.00)
   denisBankAccount.transactionHistory // will not available. give error
 }

68) Day 4 - BankAccountApp - Implementing the functionality -
* Completed bankAccountApp

69) Day 4 - Finishing day 4
* Tap on shoulder...

70) Summary of Day 4 -
* https://tutorials.eu/kotlin-basics-for-loops-and-list-manipulations-day-4-android-14-masterclass/

71) Day 5 - welcome to day 5
* ready for day 5

72) Day 5 - XML and Jepack compose -
* XML is structured programming language
* Jetpack compose is new way by google

73) Day 5 - Creating a Project and Understanding the Code with our New Knowledge
* override fun onCreate - it helps to override general implementation
* composable is special function which has certain behaviour
* surface - background of our application

74) Day 5 - Creating our own Composables and Understanding Column -
* Composable function - which should be rendered as a user interface element
* That's just a different way of displaying the user interface elements in comparison to XML
* ex. 
@Composable
fun Greeting(){ }
* It enables the declarative way, which takes care of rendering and updating the UI

75) OutlinedTextField and Anonymous Functions -
* 
