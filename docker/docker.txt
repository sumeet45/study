Youtube - TechWorld with Nana

1) Container - 
	* A way to package application with all the necessary dependencies and configuration. Package is portable artifact, which is easily shared and move around.
	* Portability of containers plus everything packaged in one isolated enviornment gives it some advantages that makes development and deployment process  more efficient.
	* Technically, container is stacked layers of images, which has linux base image at base bcz its small in size. keeping small size of linux base images makes container size small.

2) Container Repository -
	* container lives in container repo. some private company have private repo. We also have public repo for docker container where you can browse and probably find any application container that you want.
	* docker hub is public repo for docker image/container.

3) Container vs image -
	* image is actual package, which has config and dependancies. It is movable artifact. 
	* container is when i pull image on our local machine, started to run. It creates container enviornment. If image 
	* If image is lying inside local machine, then its image. If we started to run image, it create container enviornment, so we call container.
	* Container is running enviorment for an image.
	* in image, It coulbe be collection of application images() or config, or enviormental configuration. Container has port bind to it, which makes possible to talk to application which is present in container.

4) Docker vs VM -
	* In OS, we have following layer structure =>
					Application layer
					OS Kernel
					Hardware
	* Every OS have same kernel, but bcz of Application layer, it look different and works differently.
	* when we download docker image, it contain the application layer of OS and some other application installed on top of it.
	* in VM, it virtualize both "application" and "OS Kernel" layer. so it has its own kernel.
	diffn -
	1) size - docker is very small in compare to VM, bcz it contain own kernel
	2) speed - docker container are faster than VM
	3) compatibility - VM of any OS can run on any OS host, but it's not possible with Docker. some time Docker won't be compatible with host OS. So we have workaround for this, using "Docker ToolBox".

6) Docker Installation - 
* If computer doesn't meet requirements to run docker, theres a workaround for that, which is called docker toolbox.
* we setup docker using package.
* run command  - sudo docker run hello-world

7) bind two redis from same port with two different ports of host machines-
* docker run -p6000:6379 redis
* docker run -p6000:6379 -d redis
* docker run -p6001:6379 redis:4.0
* docker run -p6001:6379 -d redis:4.0

8) Docker Network - 
* Here, it creates isolated docker network, where the containers are running in. when we deploy 2 container in same docker network, they can talk to each other using names, without localhost, port or anything else.

9) Create simple project -
* First, create network which contains mongo db and mongo express.
* docker network create mongo-network  	//to create mongo network
* command to execute - 
		sudo docker run -d \
		-p 27017:27017 \
		-e MONGO_INITDB_ROOT_USERNAME=admin \
		-e MONGO_INITDB_ROOT_PASSWORD=password \
		--name mongodb \
		--net mongo-network \
		mongo
* command to execute mongo-express =
	sudo docker run -d \
	-p 8081:8081 \
	-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
	-e ME_CONFIG_MONGODB_ADMINPASSWORD=password \
	--net mongo-network \
	--name mongo-express \
	-e ME_CONFIG_MONGODB_SERVER=mongodb \
	mongo-express



10) Docker Compose -
* sometime we need to deal with multiple containers. so it became tedious job to write and run those container for multiple time. Hence we use docker compose feature. docker compose is collection of docker commands in yaml file, it becomes easy to edit and run it.
* Docker compose takes care of container. it create common network for these containers.
* store it in root folder of project.

* edit yaml file -
 version: "3"		= latest version of docker-compose
 services:			= now container list comes here
   mongodb:
     image:mongo
     ports:
       - 27017:27017	= HOST:CONTAINER
     enviornment:
       - MONGO_INITDB_ROOT_USERNAME=admin
       - MONGO_INITDB_ROOT_PASSWORD=password
   mongo-express:
    image: mongo-express
    ports: 
      - 8080:8080
    enviorment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb			

* to run above yaml file and create new container using it, Need to run following command - 
	docker-compose -f mongo.yaml up
* to stop network and available containers in it, used following command - 
	docker-compose -f mongo.yaml down


commands -
* docker run postgres:10.10			// to download from docker hub
* docker ps 						// to show running container
* docker images						// list of downloaded images
* docker pull redis					// download redis image 
* docker run redis					// run images and create new container enviornment
* docker ps 						// list of running container 
* docker run -d redis 				// run container in detached mode
* docker stop container_id			// to stop container, first get container id using "docker ps" and replaced with "container_id"
* docker start container_id			// to start container using container_id
* docker ps -a 						// show start and stopped container list
* docker run redis:4.0				// download and run redis image 
* docker run -p6000:6379 redis		// bind host port to container port, 6000 (host port) and 6379 (container port) 
* docker run -d -p6001:6379 --name redis-older redis:4.0  	// to update name
* docker logs container_id/names	// get logs of container
* docker logs container_id/names | tail		//shows last activity of container
* docker logs container_id/names -f		//shows logs in string manner
* docker exec -it container_id /bin/bash   // get terminal of running container to check logs, env_variables and many more.
* docker network ls 				// to get list of docker network
* docker network create mongo-network  	//to create mongo network
* docker-compose -f mongo.yaml		// to execute yaml file
* docker-compose -f mongo.yaml up	//to create network and start containers in it
* docker-compose -f mongo.yaml down	//to close network and stop containers which is available within it
* docker build -t my-app:1.0 .		//create docker image of our project
* docker rmi image_number		//delete image
* docker rm container_number
* docker tag my-app:1.0  amazonaws.com/my-app:1.0 	//to copy and rename image
* docker push my-app:1.0		//push image to dockerhub


11) DockerFile -
* In order to build a docker image from an application, we basically have to copy the contents of that applications into docker file. It could be an artifact that we built. in our case, we just have 3 files (jar, war, bundles.js) so we can copy them directly in the image and we're going to configure it. In order to do that, we're going to use a blueprint for building images, which is called docker file.
* Docker file is blueprint for creating docker images
* we can configure enviornment variables also in dockerfile
* "/home/app" directory is going to live inside of the container, it means it will created in container not on laptop(host)
* save it as "Dockerfile" in root folder
* create docker image using Dockerfile - docker build -t my-app:1.0 .
* need to apply last 4 mins on actual example


* dockerFile -
FROM node:13-alpine
ENV MONGO_DB_USERNAME=admin \
    MONGO_DB_PWD=password
RUN mkdir -p /home/app
COPY . /home/app
CMD ["node", "/home/app/server.js"]


12) Docker Registry -
* Docker Registry is repository we created on AWS to store image using AWS ECR service.
* In AWS, For each repositoy, we can add only 1 image of same name ( we can add different versions)
* Before pushing image to Repo, 
	1) have to login into private repo - all the steps given on AWS ECR
* "tag" in AWS pushing command - it means we renaming image


docker engine	- docker itself
docker ToolBox 	- helps to run docker, where docker is not supported
docker desktop
docker hub - same as github


13) Deply our containerized app -
*  add it in yaml file -
	my-app:
	  image: amazonaws.com/my-app:1.0
	  ports: 
	    - 3000:3000
* Need to check this section

14) Docker Volumes
