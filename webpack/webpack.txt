1) 
* Basics -  loaders, plugins, managing modules
* webpack project - hot reloading, dependancy management, css modules, dynamic imports
* optimizations - bundle analysis, duplication prevention, lazy loading
* optimizations and production builds - bundle analysis, duplication prevention, lazy loading, Dead code elimination, Shimming, CSS spliting
* build react app using webpack - react specific configurations, route management, css enhancement
* final mastery Micro FrontEnd - use all previously learned concepts, routing in micro front ends, state management in micro front end

2) What is webpack -
* earlier we need to wait to download js, css, files. bcz of that, we need to wait and it hits sites performance.
* jquery uses grunt for bundling
* Webpack - 
  * load all types of assets in module format (js, styles, images, fonts)
  * dynamically building the dependancies graph
  * removing unused code in a library
  * removing duplication code
  * Fetching modules at runtime

3) Software installations
* git, node, vs code

4) understanding basic concepts
* dependancy graph - based on this, dependancy and bundles are made in webpack.
* entry file - entry point for webpack. now webpack will look for import and require module. It will start fetching content. in child files, webpack also look for required import and require modules. It also remove unused dependancy files from graph.
* webpack output - output point for webpack, where optimized js, css, and images files are stored 
* index.html - we will add only those files which comes from webpack output.

5) Download source code

7) Basic HTML Javascript setup -
* write html and js code

8) Adding webpack configuration - 
* dependancies of webpack -
 npm i --save-dev webpack webpack-cli
 npm i lodash
* create webpack.config.js.

    const path = require("path");   //node library
    module.exports = {
     entry: "./src/index.js",
     output: {
        filename: "bundle.js",
        path: path.resolve(__dirname, "dist")
     }
    }

* add script in package.json
      "build": "webpack --config webpack.config.js", //for production, if no mode passed
      "buildDev": "webpack --config webpack.config.js --mode development"

* replace "index.js" with "../dist/bundle.js"

9) Fixing our button click -
* In webpack, they uses IIFE concept to not pollute global namespace, hence we can't able to call the function directly. so we have to use another way using addEventListener.
document.getElementById("btn1").addEventListener("click",function(){

})

10) CommonJS modules -
* types of module - commonjs (require), ES6 (import and export), amd (define/ require), @import (css/ scss) , Image url reference


12) Loaders Section Introduction -
* Loaders - will help to load particular files like Js, html file

13) What are Loaders -
* Loaders - webpack doesn't know how to deal with other type of files except JS. So that time loaders comes to help us.
* we need to define loaders for each and every file we needed, like for CSS, CSS preprocessor, Images and so on.
* showing official documentation
* we can have multiple loaders for each file type.

14) CSS loaders part - 1
* we are importing css in js, so we can enable webpack optimizations.
* if we added css in js, on running "npm run buildDev", it gives error. 
 "You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders"
* so for that, we need to add loader for that file type.
* install loader dependancy - 
   npm i --save-dev css-loader style-loader
* how your adding loaders in rules is also important. Right to left
* add it in webpack.config.js -
      module: {
         rules: [
             {
                 test: /.css$/,
                 use: ["style-loader", "css-loader"]  // execution order right to left
             }
         ]
      }

15) CSS loaders Part 2-
* CSS modules -


16) SCSS loaders -
* rename files from css to scss and variable in scss file.
* for SCSS preprocessor, we need to add extra packages.
  npm i --save-dev sass-loader sass
* change regex for css also - /\.(css)$/,
* {
        test: /.s[ac]ss$/,
        use: [
          { loader: "style-loader" },
          { loader: "css-loader", options: { modules: true } },
          { loader: "sass-loader"},
        ],
      }

17) Loading images in js
* 


56) Basics of Micro FrontEnd -
*

57) Why Micro-FrontEnd -
Pros-
* Performance
* Faster production rollout
* Easier code reusability
* Reduce dependancy

Cons -
* Lacks of control
* need more coordination between teams
* Complexity development & deployment progress

* MFE good for bigger application

58) Mirco-FrontEnd project introduction -
* homepage (host app), details, booking, react component, serve app (MFE application)

59) Starting of application servers - 
* 


60) Module federation basics -
* we need 2 properties "exposes"(in host) and "remotes"( in MFE)

61) Exposing components -

*In webpack.config.js

    //From Host Application
        const {ModuleFederationPlugin} = require("webpack").container;
    
        // within plugins array - add following
        new ModuleFederationPlugin({
            name: "home",
            filename: "remoteEntry.js",
            remotes: {
              components: "components@http://localhost:3002/remoteEntry.js",
            }
        })
    
    
    // From MFE application
    const { ModuleFederationPlugin } = require("webpack").container;
    
        // within plugins array - add following
        new ModuleFederationPlugin({
            name: "components",       //application name
            filename: "remoteEntry.js",
            exposes: {
              "./MovieCard": "./src/components/MovieCard/MovieCard.jsx",  //we can use only default exports
              "./BuyButton": "./src/components/Button/BuyButton/BuyButton.jsx",
              "./Typography": "./src/components/Typography/Typography.jsx"
            }
        })



* In host application, where you want to import component -
    
     const MovieCard = React.lazy(() => import("components/MovieCard"));

     <Suspense fallback={<div>Loading...</div>}>
        <MovieCard title={item.name} imageUrl={item.imageUrl} />
     </Suspense>
