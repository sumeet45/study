Edureka youtube - 

* what is version control?
- Version control is a system that records changes to a file or set of files over the time, so that you can recall specific versions later. These versions are recorded in a repository and can be recalled from the same. There are local, centralized and distributed version control systems.

Local VCS 
Centralized VCS
Distributed VCS

* Use of VCS
- better collaboration of code (shared workspace and real time updates),
  managing code (previous versions code manage),
  Rollback version,
  Reduce Downtime (Reverse faulty and save time)
  analyze code

* what is repository?
- A repo is a directory or storage space where your projects can live. It can be local to a folder on your computer or it can be a storage space on another online host (such as Github). In repo, you can any file related to your projects.

* What is Git?
- Git is Distributed version control tool that supports distributed non-linear workflows by providing data assurance form developing quality software.It lets you and your team of developers work together on the same project from anywhere. Team members can work on files and easily merge their changes into one source.



------------------------------------------------------------------------------------------------------------------------------------------------
Leela web dev - git course youtube

1)
* Git is version control system (VCS)
* VCS is software designed to record changes made to the file over time. git gives us ability to revert file or set of file.
* 3 types of VCS are available in our daily life - Local, centralized, distributed
* Local Version control system - we keep backup of files with adding current date in file name, and then change current file.
* centralized version control system - in it, we keep our files in single server, and multiple developers can access it. Within it, we can maintain versions of files also.

2) 
* In centralized, we deal with server files which cause latency. In git, we will do code in local and when required, we push changes to git.
* using git, we can have all history in the local only, don't need to go server.
* in centralized, we can edit files, but we can't commit changes to your database.( bcz database is offline)
* git maintain local database and on server database
* 3 states in git - modified, staged (after git add), commited (git commit)
* Working directory - is a singlecheckout of one version of the project. these files are pulled out of the compressed database in the git directory, and placed on disk for you to use or modify.
* Staging Area - The staging area is a file, generally contained in your git directory. That stores information about what will go into next commit. technical name in git is the "index", but the phrase "staging area" works well
* Repository Area - the git directory is where git store metdata and object database for your project. This is the most important part of git, and it is what is copied when you clone repo
* Git workflow - 
  a) modify files in working tree.
  b) select files only which we needed in next commit and add those files in staging area ( git add )
  c) takes files from staging area and store snapshots permanently to git repo ( means commiting files)


3) 
* download git software
* command line tool and GUI
* git bash provided by git


4) 
* after installing, first set git username and email.
* use " git config " to get list of information
* git uses a series of configuration to determin behaviour. git has 3 level configuration - 
    a) Repository / Project Level (local - for each project )   -  repository/.git/config
    b) User Account (Global level - computer user)    -            Users/sumeet/.gitconfig
    c) System Level (git installation - Git level)    -            /usr/local/etc/gitconfig
* Hierarchy level - Repo > User Account > System level
* check complete git config - 
    git config --list --show-origin


5) 
* "git init" - Initialized empty Git repository in folder
* to change username and email for project level, we can use following commands - 
    $ git config user.email
      sumeets@nousinfo.com

    $ git config --local user.email sumeetshedge@gmail.com      // to set project level

    $ git config user.email                    //show email
    sumeetshedge@gmail.com

    git config user.name sumeet                // store on project level
    git config user.name
    sumeet

    git config --unset user.email              // to remove from git project level

    git config --local --remove-section user          //to remove user section from "config" file of project level

* or we can go to file directly and add it directly within file


6) 
* "git help" - will give commonly used git commands
* "git help -a"  - will give all commands
* "Porcelain" means which we are using mostly
* "git help --all"
* to find about particular comman command - git help init (will open webpage about command)
* "git status" - will gives status and branch name


7) 
* in project, there's html file untracked. let add it to staging area.
* "git add index.html"          // addition to stage

  //output
        On branch master
        No commits yet
        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)
                new file:   index.html
* "git rm --cached index.html"          // to remove from staging area
* "git commit -m "initial commit"            //  to add commit
* "git log"                    // to log previous commits


8)
* "git diff" command is used in git to track the difference between the changes made on file.
* diff command takes two inputs and reflects the differences between them.
* to check changes between working area and staging area -  "git diff"
* to check changes between staging area and repository area -  "git diff --staged"
* to check changes between working area and repository area -  "git diff head"
* To check diff command, lets add contact.txt
* "git add contact.txt"
* "git status"
      On branch master
        Changes to be committed:
          (use "git restore --staged <file>..." to unstage)
                new file:   contact.txt
* again update contact.txt and use status command
*   On branch master
    Changes to be committed:
      (use "git restore --staged <file>..." to unstage)
            new file:   contact.txt
    
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git restore <file>..." to discard changes in working directory)
            modified:   contact.txt
    
* let use "git diff"
    $ git diff
      diff --git a/contact.txt b/contact.txt
      index e69de29..c6a7d70 100644
      --- a/contact.txt
      +++ b/contact.txt
      @@ -0,0 +1 @@
      +this is contact page
      \ No newline at end of file

* $ git diff --staged
  diff --git a/contact.txt b/contact.txt
  new file mode 100644
  index 0000000..e69de29

* $ git diff head
  diff --git a/contact.txt b/contact.txt
  new file mode 100644
  index 0000000..c6a7d70
  --- /dev/null
  +++ b/contact.txt
  @@ -0,0 +1 @@
  +this is contact page
  \ No newline at end of file


9) 
* git stores data in the form of keys and values
* values is nothing but the contents of the file.
* we give value and it will calculate a key for it, that is nothing but hash.
* git calculate hashes with SHA1 algorithm
* "git cat-file 1dd2d4df2a76f939755bd20d700b0dad1f62d9f0 -p" 


10) 
