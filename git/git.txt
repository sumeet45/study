While working on code, we can use git commands and vs code plugins simultaneously. whenever we use GUI of vs code, we can write/visualize commands. so it will make solid understanding.

commands - 

git branch -  list all branches locally
git branch dummy - create new branch

------------------------------------------------------------------------------------------------------------------------------------------------
Leela web dev - git course youtube

1)
* Git is version control system (VCS)
* VCS is software designed to record changes made to the file over time. git gives us ability to revert file or set of file.
* 3 types of VCS are available in our daily life - Local, centralized, distributed
* Local Version control system - we keep backup of files with adding current date in file name, and then change current file.
* centralized version control system - in it, we keep our files in single server, and multiple developers can access it. Within it, we can maintain versions of files also.

2) 
* In centralized, we deal with server files which cause latency. In git, we will do code in local and when required, we push changes to git.
* using git, we can have all history in the local only, don't need to go server.
* in centralized, we can edit files, but we can't commit changes to your database.( bcz database is offline)
* git maintain local database and on server database
* 3 states in git - modified, staged (after git add), commited (git commit)
* Working directory - is a singlecheckout of one version of the project. these files are pulled out of the compressed database in the git directory, and placed on disk for you to use or modify.
* Staging Area - The staging area is a file, generally contained in your git directory. That stores information about what will go into next commit. technical name in git is the "index", but the phrase "staging area" works well
* Repository Area - the git directory is where git store metdata and object database for your project. This is the most important part of git, and it is what is copied when you clone repo
* Git workflow - 
  a) modify files in working tree.
  b) select files only which we needed in next commit and add those files in staging area ( git add )
  c) takes files from staging area and store snapshots permanently to git repo ( means commiting files)


3) 
* download git software
* command line tool and GUI
* git bash provided by git


4) 
* after installing, first set git username and email.
* use " git config " to get list of information
* git uses a series of configuration to determin behaviour. git has 3 level configuration - 
    a) Repository / Project Level (local - for each project )   -  repository/.git/config
    b) User Account (Global level - computer user)    -            Users/sumeet/.gitconfig
    c) System Level (git installation - Git level)    -            /usr/local/etc/gitconfig
* Hierarchy level - Repo > User Account > System level
* check complete git config - 
    git config --list --show-origin


5) 
* "git init" - Initialized empty Git repository in folder
* to change username and email for project level, we can use following commands - 
    $ git config user.email
      sumeets@nousinfo.com

    $ git config --local user.email sumeetshedge@gmail.com      // to set project level

    $ git config user.email                    //show email
    sumeetshedge@gmail.com

    git config user.name sumeet                // store on project level
    git config user.name
    sumeet

    git config --unset user.email              // to remove from git project level

    git config --local --remove-section user          //to remove user section from "config" file of project level

* or we can go to file directly and add it directly within file


6) 
* "git help" - will give commonly used git commands
* "git help -a"  - will give all commands
* "Porcelain" means which we are using mostly
* "git help --all"
* to find about particular comman command - git help init (will open webpage about command)
* "git status" - will gives status and branch name


7) 
* in project, there's html file untracked. let add it to staging area.
* "git add index.html"          // addition to stage

  //output
        On branch master
        No commits yet
        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)
                new file:   index.html
* "git rm --cached index.html"          // to remove from staging area
* "git commit -m "initial commit"            //  to add commit
* "git log"                    // to log previous commits


8)
* "git diff" command is used in git to track the difference between the changes made on file.
* diff command takes two inputs and reflects the differences between them.
* to check changes between working area and staging area -  "git diff"
* to check changes between staging area and repository area -  "git diff --staged"
* to check changes between working area and repository area -  "git diff head"
* To check diff command, lets add contact.txt
* "git add contact.txt"
* "git status"
      On branch master
        Changes to be committed:
          (use "git restore --staged <file>..." to unstage)
                new file:   contact.txt
* again update contact.txt and use status command
*   On branch master
    Changes to be committed:
      (use "git restore --staged <file>..." to unstage)
            new file:   contact.txt
    
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git restore <file>..." to discard changes in working directory)
            modified:   contact.txt
    
* let use "git diff"
    $ git diff
      diff --git a/contact.txt b/contact.txt
      index e69de29..c6a7d70 100644
      --- a/contact.txt
      +++ b/contact.txt
      @@ -0,0 +1 @@
      +this is contact page
      \ No newline at end of file

* $ git diff --staged
  diff --git a/contact.txt b/contact.txt
  new file mode 100644
  index 0000000..e69de29

* $ git diff head
  diff --git a/contact.txt b/contact.txt
  new file mode 100644
  index 0000000..c6a7d70
  --- /dev/null
  +++ b/contact.txt
  @@ -0,0 +1 @@
  +this is contact page
  \ No newline at end of file


9) 
* git stores data in the form of keys and values
* values is nothing but the contents of the file.
* we give value and it will calculate a key for it, that is nothing but hash.
* git calculate hashes with SHA1 algorithm
* "git cat-file 1dd2d4df2a76f939755bd20d700b0dad1f62d9f0 -p" 


10) 
* create channel.txt and then rename it to "channel.html".
*   on git status, 
    On branch master
    Changes to be committed:
      (use "git restore --staged <file>..." to unstage)
            renamed:    channel.txt -> channel.html
    
* now if we want to rename back, we can use following. It will rename and add it directly in staging area-
    git mv channel.html channel.txt
  
  * git mv command - move or rename file
           git mv myFile.txt new_directory/

* suppose, we added some changes in channel.txt.
    git add channel.txt

* and now, if you want to restore file from staging area to working area
    git restore --staged channel.txt

* and in working area, we again remove recent changes, we can use following command
    git restore channel.txt

* From web for git mv - 
    * git mv is essentially a combination of git rm (to remove the old file) and git add (to add the new file).
    * After using git mv, you still need to commit the changes
    * If the destination file already exists, git mv will overwrite it. Use the -f flag to force this behavior if needed.

* Fron web for git restore -

11) 
* Showing branch working concept
* default branch has created "master" branch
* Whenever we added commit, "HEAD" pointer moved to next commit in master branch.
* while developing new feature, we need to create branch. 
      git checkout -b loginFeature


14) 
* using "git init", we can initialize git in any folder with "master" branch.
* using "git add .", we can add all files in staging area.
* "git log" -  will give all commits available
* "git log --oneline"  - will give all commits available in one line
* to create feature branch - 
    git checkout -b loginFeature              // will create branch and switch to branch also
* add new file in folder, to add and check with "loginFeature"
    git commit -m "login file added"
* now if u use, git log with "loginFeature" branch
    $ git log
        commit 3d965c14d8b917e3f9a0e5dee5993a2be415f3e8 (HEAD -> loginFeature)
        Author: Sumeet Shedge <sumeets@nousinfo.com>
        Date:   Sun Nov 10 03:11:35 2024 +0530
            login file added
        
        commit 9b15c771e30cf884ee29af21ac5a688ea8ae97a3 (master)
        Author: Sumeet Shedge <sumeets@nousinfo.com>
        Date:   Sun Nov 10 03:03:37 2024 +0530
            initial commit

* now switch back to master branch and check files. you will find only "ecom.txt" file which is created in master branch earlier.
      git checkout master        // switch back to master
  
      ls
        ecom.txt

* now if you added some changes in "ecom.txt" file and you will add commit with msg "minor fixes" and you will be able to see the commit in log ( In master branch)
    $ git log --oneline
    7a90d90 (HEAD -> master) minor fixes
    9b15c77 initial commit

* now if we move back to login branch, it will have its own comments
    $ git checkout loginFeature
    $ git log --oneline
    3d965c1 (HEAD -> loginFeature) login file added
    9b15c77 initial commit

* so it shows every branch keep its commits separately until its merge.


13) 
* in git/objects folder, we will be able to see all commits.
* In git/refs/heads, we can see all branches listed there.
* create branch
      git branch dummy

* to see content inside of each branch
      $ cat .git/refs/heads/loginFeature
      3d965c14d8b917e3f9a0e5dee5993a2be415f3e8

      $ git log
        commit 3d965c14d8b917e3f9a0e5dee5993a2be415f3e8 (HEAD -> loginFeature, dummy)
        Author: Sumeet Shedge <sumeets@nousinfo.com>
        Date:   Sun Nov 10 03:11:35 2024 +0530
            login file added
        
        commit 9b15c771e30cf884ee29af21ac5a688ea8ae97a3
        Author: Sumeet Shedge <sumeets@nousinfo.com>
        Date:   Sun Nov 10 03:03:37 2024 +0530    
            initial commit

    first commit and cat command shows same "3d965c14d8b917e3f9a0e5dee5993a2be415f3e8"

* Using "HEAD" file which points to current branch
* to see content of HEAD - 
      cat .git/HEAD

* to rename branch -
      git branch -m dummyBranch

* to delete branch -
      git checkout master
      git branch -d dummyBranch

* some time before deleting, we might have some commits in branch, which didn't allow to delte branch. So we can use following comments
      git branch -D dummyBranch


14) 
* To merging we need "target" (master) and "source" (feature branch). For that, we need to move back to master branch
      git checkout master
      git merge login_feature
* if no commits happened to master branch, then it will do fast-forward merge

* lets add new feature branch and add commits in it
      git checkout -b newFeature
      git add .            //after adding new file
      git commit -m "new file added"
      git checkout master

      $ git merge newFeature
      Updating bbda67b..0f3be7d
      Fast-forward
       newFile.txt | 0
       1 file changed, 0 insertions(+), 0 deletions(-)
       create mode 100644 newFile.txt

* you can see, there's fast forward merge, bcz there's no new commits in master branch

* next example -
    git checkout -b newFeature2
    git checkout master
    git add .                        // after adding file and folder
    git commit -m "newFile2 and folder added"

    git checkout newFeature2
    git add .                        //after adding new files
    
    
