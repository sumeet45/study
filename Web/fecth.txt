// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch, From Referrence
Fetch - 

*Using the Fetch API -
    * The Fetch API provides a JavaScript interface for making HTTP requests and processing the responses.
    * Fetch is the modern replacement for XMLHttpRequest: unlike XMLHttpRequest, which uses callbacks, Fetch is promise-based and is integrated with features of the modern web such as service workers and Cross-Origin Resource Sharing (CORS).
    * ex.
                async function getData() {
                  const url = "https://example.org/products.json";
                  try {
                    const response = await fetch(url);
                    if (!response.ok) {
                      throw new Error(`Response status: ${response.status}`);
                    }
                
                    const json = await response.json();
                    console.log(json);
                  } catch (error) {
                    console.error(error.message);
                  }
                }
    * The fetch() function will reject the promise on some errors, but not if the server responds with an error status like 404: so we also check the response status and throw if it is not OK.

* Making a request
      * To make a request, call fetch(), passing in:
        A) a definition of the resource to fetch. This can be any one of:
              1) a string containing the URL
              2) an object, such an instance of URL, which has a stringifier that produces a string containing the URL
              3) a Request instance
        B) optionally, an object containing options to configure the request.

* Setting the method
      * By default, fetch() makes a GET request, but you can use the method option to use a different request method:
          const response = await fetch("https://example.org/post", {
                              method: "POST",
                              // ...
                            });
      * If the mode option is set to no-cors, then method must be one of GET, POST or HEAD.

* Setting a body
      * The request body is the payload of the request: it's the thing the client is sending to the server. You cannot include a body with GET requests, but it's useful for requests that send content to the server, such as POST or PUT requests. For example, if you want to upload a file to the server, you might make a POST request and include the file as the request body.
        * To set a request body, pass it as the body option:
                const response = await fetch("https://example.org/post", {
                                            body: JSON.stringify({ username: "example" }),
                                            // ...
                                          });
        * You can supply the body as an instance of any of the following types:
                    a string
                    ArrayBuffer
                    TypedArray
                    DataView
                    Blob
                    File
                    URLSearchParams
                    FormData

* Setting headers
      * Request headers give the server information about the request: for example, the Content-Type header tells the server the format of the request's body. Many headers are set automatically by the browser and can't be set by a script: these are called Forbidden header names.
      * To set request headers, assign them to the headers option.
      * You can pass an object literal here containing header-name: header-value properties:
                  const response = await fetch("https://example.org/post", {
                                                    headers: {
                                                      "Content-Type": "application/json",
                                                    },
                                                    // .,.
                                                  });
      * Alternatively, you can construct a Headers object, add headers to that object using Headers.append(), then assign the Headers object to the headers option:
                                  const myHeaders = new Headers();
                                  myHeaders.append("Content-Type", "application/json");
                                  
                                  const response = await fetch("https://example.org/post", {
                                    headers: myHeaders,
                                    // .,.
                                  });

* Making POST requests
        * We can combine the method, body, and headers options to make a POST request:
                const myHeaders = new Headers();
                myHeaders.append("Content-Type", "application/json");
                
                const response = await fetch("https://example.org/post", {
                  method: "POST",
                  body: JSON.stringify({ username: "example" }),
                  headers: myHeaders,
                });

* Making cross-origin requests
      * Whether a request can be made cross-origin or not is determined by the value of the mode option. This may take one of three values: cors, no-cors, or same-origin.
          * By default, mode is set to cors, meaning that if the request is cross-origin then it will use the Cross-Origin Resource Sharing (CORS) mechanism. This means that:
                a) if the request is a simple request, then the request will always be sent, but the server must respond with the correct Access-Control-Allow-Origin header or the browser will not share the response with the caller.
                b) if the request is not a simple request, then the browser will send a preflighted request to check that the server understands CORS and allows the request, and the real request will not be sent unless the server responds to the preflighted request with the appropriate CORS headers.
          * Setting mode to same-origin disallows cross-origin requests completely.
          * Setting mode to no-cors means the request must be a simple request, which restricts the headers that may be set, and restricts methods to GET, HEAD, and POST.

* Including credentials
      * Credentials are cookies, TLS client certificates, or authentication headers containing a username and password.
      * To control whether or not the browser sends credentials, as well as whether the browser respects any Set-Cookie response headers, set the credentials option, which can take one of the following three values:
          1) omit: never send credentials in the request or include credentials in the response.
          2) same-origin (the default): only send and include credentials for same-origin requests.
          3) include: always include credentials, even cross-origin.
      * Note that if a cookie's SameSite attribute is set to Strict or Lax, then the cookie will not be sent cross-site, even if credentials is set to include.
      * Including credentials in cross-origin requests can make a site vulnerable to CSRF attacks, so even if credentials is set to include, the server must also agree to their inclusion by including the Access-Control-Allow-Credentials header in its response. Additionally, in this situation the server must explicitly specify the client's origin in the Access-Control-Allow-Origin response header (that is, * is not allowed).
      * This means that if credentials is set to include and the request is cross-origin, then:
            * If the request is a simple request, then the request will be sent with credentials, but the server must set the Access-Control-Allow-Credentials and Access-Control-Allow-Origin response headers, or the browser will return a network error to the caller. If the server does set the correct headers, then the response, including credentials, will be delivered to the caller.
            * If the request is not a simple request, then the browser will send a preflighted request without credentials, and the server must set the Access-Control-Allow-Credentials and Access-Control-Allow-Origin response headers, or the browser will return a network error to the caller. If the server does set the correct headers, then the browser will follow up with the real request, including credentials, and will deliver the real response, including credentials, to the caller.


* Creating a Request object
        * The Request() constructor takes the same arguments as fetch() itself. This means that instead of passing options into fetch(), you can pass the same options to the Request() constructor, and then pass that object to fetch().
              const myHeaders = new Headers();
              myHeaders.append("Content-Type", "application/json");
              
              const myRequest = new Request("https://example.org/post", {
                method: "POST",
                body: JSON.stringify({ username: "example" }),
                headers: myHeaders,
              });
              
              const response = await fetch(myRequest);

  
* Canceling a request -
      * To make a request cancelable, create an AbortController, and assign its AbortSignal to the request's signal property.
      * To cancel the request, call the controller's abort() method. The fetch() call will reject the promise with an AbortError exception.

              const controller = new AbortController();      
              const fetchButton = document.querySelector("#fetch");
              fetchButton.addEventListener("click", async () => {
                try {
                  console.log("Starting fetch");
                  const response = await fetch("https://example.org/get", {
                    signal: controller.signal,
                  });
                  console.log(`Response: ${response.status}`);
                } catch (e) {
                  console.error(`Error: ${e}`);
                }
              });
              
              const cancelButton = document.querySelector("#cancel");
              cancelButton.addEventListener("click", () => {
                controller.abort();
                console.log("Canceled fetch");
              });


* Handling the response -
      * As soon as the browser has received the response status and headers from the server (and potentially before the response body itself has been received), the promise returned by fetch() is fulfilled with a Response object.


* Checking response status -
      * The promise returned by fetch() will reject on some errors, such as a network error or a bad scheme. However, if the server responds with an error like 404, then fetch() fulfills with a Response, so we have to check the status before we can read the response body.
      * The Response.status property tells us the numerical status code, and the Response.ok property returns true if the status is in the 200 range.
      * A common pattern is to check the value of ok and throw if it is false:
                async function getData() {
                  const url = "https://example.org/products.json";
                  try {
                    const response = await fetch(url);
                    if (!response.ok) {
                      throw new Error(`Response status: ${response.status}`);
                    }
                    // ...
                  } catch (error) {
                    console.error(error.message);
                  }
                }


* Checking the response type -
    * Responses have a type property that can be one of the following:
        * basic: the request was a same-origin request.
        * cors: the request was a cross-origin CORS request.
        * opaque: the request was a cross-origin simple request made with the no-cors mode.
        * opaqueredirect: the request set the redirect option to manual, and the server returned a redirect status.

    * The type determines the possible contents of the response, as follows:
         * Basic responses exclude response headers from the Forbidden response header name list.
         * CORS responses include only response headers from the CORS-safelisted response header list.
         * Opaque responses and opaque redirect responses have a status of 0, an empty header list, and a null body.


* Checking headers -
      * Just like the request, the response has a headers property which is a Headers object, and this contains any response headers that are exposed to scripts, subject to the exclusions made based on the response type.
      * A common use case for this is to check the content type before trying to read the body:
                  async function fetchJSON(request) {
                    try {
                      const response = await fetch(request);
                      const contentType = response.headers.get("content-type");
                      if (!contentType || !contentType.includes("application/json")) {
                        throw new TypeError("Oops, we haven't got JSON!");
                      }
                      // Otherwise, we can read the body as JSON
                    } catch (error) {
                      console.error("Error:", error);
                    }
                  }


* Reading the response body
      * The Response interface provides a number of methods to retrieve the entire body contents in a variety of different formats:
              Response.arrayBuffer()
              Response.blob()
              Response.formData()
              Response.json()
              Response.text()
              These are all asynchronous methods, returning a Promise which will be fulfilled with the body content.              
      * In this example, we fetch an image and read it as a Blob, which we can then use to create an object URL:
                    const image = document.querySelector("img");
                    
                    const url = "flowers.jpg";
                    
                    async function setImage() {
                      try {
                        const response = await fetch(url);
                        if (!response.ok) {
                          throw new Error(`Response status: ${response.status}`);
                        }
                        const blob = await response.blob();
                        const objectURL = URL.createObjectURL(blob);
                        image.src = objectURL;
                      } catch (e) {
                        console.error(e);
                      }
                    }
        * The method will throw an exception if the response body is not in the appropriate format: for example, if you call json() on a response that can't be parsed as JSON.


* Streaming the response body -
          * Request and response bodies are actually ReadableStream objects, and whenever you read them, you're streaming the content. This is good for memory efficiency, because the browser doesn't have to buffer the entire response in memory before the caller retrieves it using a method like json().
          * This also means that the caller can process the content incrementally as it is received.
          * For example, consider a GET request that fetches a large text file and processes it in some way, or displays it to the user:

                        const url = "https://www.example.org/a-large-file.txt";                        
                        async function fetchText(url) {
                          try {
                            const response = await fetch(url);
                            if (!response.ok) {
                              throw new Error(`Response status: ${response.status}`);
                            }
                        
                            const text = await response.text();
                            console.log(text);
                          } catch (e) {
                            console.error(e);
                          }
                        }

          * If we use Response.text(), as above, we must wait until the whole file has been received before we can process any of it.
          * If we stream the response instead, we can process chunks of the body as they are received from the network:
                      const url = "https://www.example.org/a-large-file.txt";
                        
                        async function fetchTextAsStream(url) {
                          try {
                            const response = await fetch(url);
                            if (!response.ok) {
                              throw new Error(`Response status: ${response.status}`);
                            }
                        
                            const stream = response.body.pipeThrough(new TextDecoderStream());
                            for await (const value of stream) {
                              console.log(value);
                            }
                          } catch (e) {
                            console.error(e);
                          }
                        }

* Processing a text file line by line


* Locked and disturbed streams
              The consequences of request and response bodies being streams are that:
              
              if a reader has been attached to a stream using ReadableStream.getReader(), then the stream is locked, and nothing else can read the stream.
              if any content has been read from the stream, then the stream is disturbed, and nothing else can read from the stream.
              This means it's not possible to read the same response (or request) body more than once:
              

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// https://developer.mozilla.org/en-US/docs/Web/API/Headers
Headers -
      * The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers.
      * You can retrieve a Headers object via the Request.headers and Response.headers properties, and create a new Headers object using the Headers() constructor.

* Modification restrictions -
      * Some Headers objects have restrictions on whether the set(), delete(), and append() methods can mutate the header. The modification restrictions are set depending on how the Headers object is created.
         * For headers created with Headers() constructor, there are no modification restrictions.
         * For headers of Request objects:
               1) If the request's mode is no-cors, you can modify any CORS-safelisted request header name/value.
               2) Otherwise, you can modify any non-forbidden header name/value.
         * For headers of Response objects:
               1) If the response is created using Response.error() or Response.redirect(), or received from a fetch() call, the headers are immutable and cannot be modified.
               2) Otherwise, if the response is created using Response() or Response.json(), you can modify any non-forbidden response header name/value.

* Constructor
      Headers() - Creates a new Headers object.

* Instance methods
      Headers.append() - Appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.
      
      Headers.delete() - Deletes a header from a Headers object.
      
      Headers.entries() - Returns an iterator allowing to go through all key/value pairs contained in this object.
      
      Headers.forEach() - Executes a provided function once for each key/value pair in this Headers object.
      
      Headers.get() - Returns a String sequence of all the values of a header within a Headers object with a given name.
      
      Headers.getSetCookie() - Returns an array containing the values of all Set-Cookie headers associated with a response.
      
      Headers.has() - Returns a boolean stating whether a Headers object contains a certain header.
      
      Headers.keys() - Returns an iterator allowing you to go through all keys of the key/value pairs contained in this object.
      
      Headers.set() - Sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.
      
      Headers.values() - Returns an iterator allowing you to go through all values of the key/value pairs contained in this object.

      ex. 
      const myHeaders = new Headers();      
      myHeaders.append("Content-Type", "text/xml");
      myHeaders.get("Content-Type"); // should return 'text/xml'
